[
  {
    "objectID": "profiles/profiles.html",
    "href": "profiles/profiles.html",
    "title": "Learner Profiles{{< include learner-profiles.md >}}",
    "section": "",
    "text": "Skip to main content\n          \n            \n              \n                \n                                              \n            \n            \n              \n                \n                  \n                    \n                      \n                    \n                    \n                  \n                  \n                    \n                      \n                        \n                          \n                        \n                        Light\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Dark\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Auto\n                        \n                          \n                        \n                      \n                    \n                  \n                \n              \n              \n              \n                        \n                   Instructor View \n                \n                \n                  Learner View\n                \n                      \n            \n          \n          \n        \n        \n          \n            \n              \n              Menu\n            \n            \n              \n            \n            \n              Version Control with Git\n            \n            \n              \n            \n            \n              \n                \n                  \n                    Version Control with Git\n                  \n                \n                \n                \n                  \n                  Setup\n                \n                        \n                  Key Points\n                \n                \n                  Instructor Notes\n                \n                \n                  Extract All Images\n                \n                                  \n                    \n                      More \n                    \n                    \n                      \n\n                      Git Cheatsheets for Quick Reference\n                      Discussion\n                      FCM vs Git Cheat Sheet\n                      Quick Start Repository Guide            \n                  \n                      \n            \n            \n            \n            \n              \n                \n                \n              \n              \n                \n              \n            \n          \n        \n\n        \n          Version Control with Git\n        \n\n        \n          \n            0%\n          \n          \n            \n            \n          \n            \n      \n        \n          \n            \n              \n                \n              \n              \n                \n                  \n                    \n                      \n                        \n                          \n                        \n                        Toggle Theme\n                      \n                      \n                        \n                          \n                            \n                              \n                            \n                            Light\n                            \n                              \n                            \n                          \n                        \n                        \n                          \n                            \n                              \n                            \n                            Dark\n                            \n                              \n                            \n                          \n                        \n                        \n                          \n                            \n                              \n                            \n                            Auto\n                            \n                              \n                            \n                          \n                        \n                      \n                    \n                  \n                \n                \n                  \n                    \n                      \n                        \n                                            \n                            \n                               Learner View\n                            \n                          \n                          \n                            \n                              Instructor View\n                            \n                          \n                                          \n                      \n                    \n                  \n                  \n                  \n                \n\n                \n                  \n\n                    \n                      ../EPISODES\n                    \n                    \n\n                      \n                        \n\n                                \n                                  \n                                    \n                                      Summary and Setup\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      1. Automated Version Control\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      2. Setting Up Git\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      3. Creating a Repository\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      4. Branches\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      5. Tracking Changes\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      6. Exploring History\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      7. Reverting Changes\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      8. Ignoring Things\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      9. Break\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      10. Remotes in GitHub\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      11. Exploring GitHub\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      12. Exploring History on GitHub\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      13. Pull Requests\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      14. Configuring GitHub\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      15. End\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      16. Open Science\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      17. Licensing\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      18. Citation\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      19. Hosting\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      20. 'Using Git from RStudio'\n                                    \n                                  \n                                              \n                    \n                  \n                \n                \n\n                \n                          \n                    \n                      \n                        \n                          RESOURCES\n                        \n                      \n                      \n                        \n                          \n                            \n                            \n                              \n                              Setup\n                            \n                                                \n                              Key Points\n                            \n                            \n                              Instructor Notes\n                            \n                            \n                              Extract All Images\n                            \n                                                \n                          \n                        \n                      \n                    \n                  \n                  \n                  \n                  \n                  \n\n                  \n                              \n                \n              \n            \n          \n                                        \n                      Learner Profiles{{&lt; include learner-profiles.md &gt;}}\n                      \n                      \n                      \n      \n      \t\t\n      \t\t\t\n      \t\t\t\n              This lesson is subject to the &lt;(Code of Conduct)&gt;\n              Edit on GitHub\n              | Contributing\n              | Source\n      \t\t\t\tCite | Contact | About\n      \t\t\t\n      \t\t\t\n                      Materials licensed under &lt;({license})&gt; by the authors\n                      Template licensed under &lt;(CC-BY 4.0)&gt; by {template_authors}\n              Built with Quarto"
  },
  {
    "objectID": "instructors/instructor-notes.html",
    "href": "instructors/instructor-notes.html",
    "title": "Version Control with Git",
    "section": "",
    "text": "Skip to main content\n          \n            \n              \n                \n                                              \n            \n            \n              \n                \n                  \n                    \n                      \n                    \n                    \n                  \n                  \n                    \n                      \n                        \n                          \n                        \n                        Light\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Dark\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Auto\n                        \n                          \n                        \n                      \n                    \n                  \n                \n              \n              \n              \n                        \n                   Instructor View \n                \n                \n                  Learner View"
  },
  {
    "objectID": "instructors/instructor-notes.html#overall",
    "href": "instructors/instructor-notes.html#overall",
    "title": "Version Control with Git",
    "section": "Overall",
    "text": "Overall\n                      Version control might be the most important topic we teach, but Git is definitely the most complicated tool. However, GitHub presently dominates the open software repository landscape, so the time and effort required to teach fundamental Git is justified and worthwhile.\n                      Because of this complexity, we don’t teach novice learners about many interesting topics, such as hashes, and commit objects.\n                      Instead we try to convince them that version control is useful for working in teams or not, because it is\n                      \n                      a better way to “undo” changes,\n                      a better way to collaborate than mailing files back and forth, and\n                      a better way to share your code and other work with the world."
  },
  {
    "objectID": "instructors/instructor-notes.html#teaching-notes",
    "href": "instructors/instructor-notes.html#teaching-notes",
    "title": "Version Control with Git",
    "section": "Teaching Notes",
    "text": "Teaching Notes\n                      \n                      You can “split” your shell so that recent commands remain in view using this script.\n                      Make sure the network is working before starting this lesson.\n                      Drawings are particularly useful in this lesson: if you have a whiteboard, use it!\n                      Version control is usually not the first subject in a workshop, so get learners to create a GitHub account after the session before. Remind learners that the username and email they use for GitHub (and setup during Git configuration) will be viewable to the public by default. However, there are many reasons why a learner may not want their personal information viewable, and GitHub has resources for keeping an email address private.\n                      If some learners are using Windows, there will inevitably be issues merging files with different line endings. (Even if everyone’s on some flavor of Unix, different editors may or may not add a newline to the last line of a file.) Take a moment to explain these issues, since learners will almost certainly trip over them again. If learners are running into line ending problems, GitHub has a page that helps with troubleshooting. Specifically, the section on refreshing a repository may be helpful if learners need to change the core.autocrlf setting after already having made one or more commits.\n                      We don’t use a Git GUI in these notes because we haven’t found one that installs easily and runs reliably on the three major operating systems, and because we want learners to understand what commands are being run. That said, instructors should demo a GUI on their desktop at some point during this lesson and point learners at this page.\n                      Instructors should show learners graphical diff/merge tools like DiffMerge.\n                      When appropriate, explain that we teach Git rather than CVS, Subversion, or Mercurial primarily because of GitHub’s growing popularity: CVS and Subversion are now seen as legacy systems, and Mercurial isn’t nearly as widely used in the sciences right now.\n                      Further resources:\n                      \n                      git-it is a self-paced command-line Git demo, with git-it-electron its GitHub Desktop successor.\n                      Code School has a free interactive course, Try Git.\n                      for instructors, the Git parable is useful background reading"
  },
  {
    "objectID": "instructors/instructor-notes.html#automated-version-control",
    "href": "instructors/instructor-notes.html#automated-version-control",
    "title": "Version Control with Git",
    "section": "Automated Version Control",
    "text": "Automated Version Control\n                      \n                      Ask, “Who uses ‘undo’ in their editor?” All say “Me”. ‘Undo’ is the simplest form of version control.\n                      Give learners a five-minute overview of what version control does for them before diving into the watch-and-do practicals. Most of them will have tried to co-author papers by emailing files back and forth, or will have biked into the office only to realize that the USB key with last night’s work is still on the kitchen table. Instructors can also make jokes about directories with names like “final version”, “final version revised”, “final version with reviewer three’s corrections”, “really final version”, and, “come on this really has to be the last version” to motivate version control as a better way to collaborate and as a better way to back work up.\n                      \n                      \n                      Met Office\n                      Why are we moving to Git and GitHub?\n                      \n                      FCM/SVN becoming unmaintainable\n                      Git/GitHub provide better security (MFA)\n                      GitHub has more useful features for collaboration than trac\n                      Easier to collaborate with partners outside the Met Office with GitHub"
  },
  {
    "objectID": "instructors/instructor-notes.html#setting-up-git",
    "href": "instructors/instructor-notes.html#setting-up-git",
    "title": "Version Control with Git",
    "section": "Setting Up Git",
    "text": "Setting Up Git\n                      Do NOT skip any steps setting the config. This may cause problems later especially if students end up with master branches.\n                      \n                      We suggest instructors and students use nano as the text editor for this lessons because\n                      \n                      it runs in all three major operating systems,\n                      it runs inside the shell (switching windows can be confusing to students), and\n                      it has shortcut help at the bottom of the window.\n                      \n                      Please point out to students during setup that they can and should use another text editor if they’re already familiar with it.\n                      When setting up Git, be very clear what learners have to enter: it is common for them to edit the instructor’s details (e.g. email). Check at the end using git config --list.\n                      When setting up the default branch name, if learners have a Git version older than 2.28, the default branch name can be changed for the lesson using git branch -M main if there are currently commits in the repository, or git checkout -b main if there are no commits/the repository is completely empty."
  },
  {
    "objectID": "instructors/instructor-notes.html#creating-a-repository",
    "href": "instructors/instructor-notes.html#creating-a-repository",
    "title": "Version Control with Git",
    "section": "Creating a Repository",
    "text": "Creating a Repository\n                      \n                      When you do git status, Mac users may see a .DS_Store file showing as untracked. This a file that Mac OS creates in each directory.\n                      The challenge “Places to create repositories” tries to reinforce the idea that the .git folder contains the whole Git repo and deleting this folder undoes a git init. It also gives the learner the way to fix the common mistake of putting unwanted folders (like Desktop) under version control.\n                      Instead of removing the .git folder directly, you can choose to move it first to a safer directory and remove it from there:\n                      $ mv .git temp_git\n$ rm -rf  temp_git\n                      The challenge suggests that it is a bad idea to create a Git repo inside another repo. For more discussion on this topic, please see this issue."
  },
  {
    "objectID": "instructors/instructor-notes.html#branches",
    "href": "instructors/instructor-notes.html#branches",
    "title": "Version Control with Git",
    "section": "Branches",
    "text": "Branches\n                      All Mermaid diagrams don’t render atm in the Extract all Images page so be wary of this. Avoid putting your own preference into the training and teach git switch (although the other options are also given for reference)."
  },
  {
    "objectID": "instructors/instructor-notes.html#tracking-changes",
    "href": "instructors/instructor-notes.html#tracking-changes",
    "title": "Version Control with Git",
    "section": "Tracking Changes",
    "text": "Tracking Changes\n                      \n                      It’s important that learners do a full commit cycle by themselves (make changes, git diff, git add, and git commit). The “bio repository” challenge does that.\n                      This is a good moment to show a diff with a graphical diff tool. If you skip it because you’re short on time, show it once in GitHub.\n                      One thing may cause confusion is recovering old versions. If, instead of doing $ git checkout f22b25e forecast.md, someone does $ git checkout f22b25e, they wind up in the “detached HEAD” state and confusion abounds. It’s then possible to keep on committing, but things like git push origin main a bit later will not give easily comprehensible results. It also makes it look like commits can be lost. To “re-attach” HEAD, use git checkout main.\n                      This is a good moment to show a log within a Git GUI. If you skip it because you’re short on time, show it once in GitHub."
  },
  {
    "objectID": "instructors/instructor-notes.html#ignoring-things",
    "href": "instructors/instructor-notes.html#ignoring-things",
    "title": "Version Control with Git",
    "section": "Ignoring Things",
    "text": "Ignoring Things\n                      Just remember that you can use wildcards and regular expressions to ignore a particular set of files in .gitignore."
  },
  {
    "objectID": "instructors/instructor-notes.html#remotes-in-github",
    "href": "instructors/instructor-notes.html#remotes-in-github",
    "title": "Version Control with Git",
    "section": "Remotes in GitHub",
    "text": "Remotes in GitHub\n                      \n                      Make it clear that Git and GitHub are not the same thing: Git is an open source version control tool, GitHub is a company that hosts Git repositories in the web and provides a web interface to interact with repos they host.\n                      It is very useful to draw a diagram showing the different repositories involved.\n                      When pushing to a remote, the output from Git can vary slightly depending on what leaners execute. The lesson displays the output from Git if a learner executes git push origin main. However, some learners might use syntax suggested by GitHub for pushing to a remote with an existing repository, which is git push -u origin main. Learners using syntax from GitHub, git push -u origin main, will have slightly different output, including the line Branch main set up to track remote branch main from origin by rebasing.\n                      \n                      \n                      Met Office\n                      Why are we moving to Git and GitHub?\n                      \n                      GitHub has better project management features\n                      Git/GitHub provide better security (MFA)\n                      GitHub has more useful features for collaboration than trac\n                      Easier to collaborate with partners outside the Met Office with GitHub"
  },
  {
    "objectID": "instructors/instructor-notes.html#exploring-github",
    "href": "instructors/instructor-notes.html#exploring-github",
    "title": "Version Control with Git",
    "section": "Exploring GitHub",
    "text": "Exploring GitHub\n                      When you are exploring the GitHub interface you may wish to show:\n                      \n                      How to manage access to a repository (changes are only visible to those with access)\n                      How to enable wiki pages, discussions, projects\n                      \n                      And mention that these are covered in more detail in the Git & GitHub Working Practices training. You can also mention that it is possible to edit files via the GitHub interface but we won’t be doing that today."
  },
  {
    "objectID": "instructors/instructor-notes.html#collaborating",
    "href": "instructors/instructor-notes.html#collaborating",
    "title": "Version Control with Git",
    "section": "Collaborating",
    "text": "Collaborating\n                      NOT IN THE MET OFFICE VERSION\n                      \n                      Decide in advance whether all the learners will work in one shared repository, or whether they will work in pairs (or other small groups) in separate repositories. The former is easier to set up; the latter runs more smoothly.\n                      Role playing between two instructors can be effective when teaching the collaboration and conflict sections of the lesson. One instructor can play the role of the repository owner, while the second instructor can play the role of the collaborator. If it is possible, try to use two projectors so that the computer screens of both instructors can be seen. This makes for a very clear illustration to the students as to who does what.\n                      It is also effective to pair up students during this lesson and assign one member of the pair to take the role of the owner and the other the role of the collaborator. In this setup, challenges can include asking the collaborator to make a change, commit it, and push the change to the remote repository so that the owner can then retrieve it, and vice-versa. The role playing between the instructors can get a bit “dramatic” in the conflicts part of the lesson if the instructors want to inject some humor into the room.\n                      If you don’t have two projectors, have two instructors at the front of the room. Each instructor does their piece of the collaboration demonstration on their own computer and then passes the projector cord back and forth with the other instructor when it’s time for them to do the other part of the collaborative workflow. It takes less than 10 seconds for each switchover, so it doesn’t interrupt the flow of the lesson. And of course it helps to give each of the instructors a different-colored hat, or put different-colored sticky notes on their foreheads.\n                      If you’re the only instructor, the best way to create is clone the two repos in your Desktop, but under different names, e.g., pretend one is your computer at work:\n                      $ git clone https://github.com/mo-eormerod/weather.git weather-at-work\n                      It’s very common that learners mistype the remote alias or the remote URL when adding a remote, so they cannot push. You can diagnose this with git remote -v and checking carefully for typos.\n                      \n                      To fix a wrong alias, you can do git remote rename &lt;old&gt; &lt;new&gt;.\n                      To fix a wrong URL, you can do git remote set-url &lt;alias&gt; &lt;newurl&gt;.\n                      \n                      Before cloning the repo, be sure that nobody is inside another repo. The best way to achieve this is moving to the Desktop before cloning: cd && cd Desktop.\n                      If both repos are in the Desktop, have them to clone their collaborator repo under a given directory using a second argument:\n                      $ git clone https://github.com/mo-eormerod/weather.git alflin-weather\n                      The most common mistake is that learners push before pulling. If they pull afterward, they may get a conflict.\n                      Conflicts, sometimes weird, will start to arise. Stay tight: conflicts are next.\n                      Learners may have slightly different output from git push and git pull depending on the version of git, and if upstream (-u) is used."
  },
  {
    "objectID": "instructors/instructor-notes.html#conflicts",
    "href": "instructors/instructor-notes.html#conflicts",
    "title": "Version Control with Git",
    "section": "Conflicts",
    "text": "Conflicts\n                      NOT IN THE MET OFFICE VERSION\n                      \n                      Expect the learners to make mistakes. Expect yourself to make mistakes. This happens because it is late in the lesson and everyone is tired.\n                      If you’re the only instructor, the best way to create a conflict is:\n                      \n                      Clone your repo in a different directory, pretending is your computer at work: git clone https://github.com/mo-eormerod/weather.git weather-at-work.\n                      At the office, you make a change, commit and push.\n                      At your laptop repo, you (forget to pull and) make a change, commit and try to push.\n                      git pull now and show the conflict.\n                      \n                      Learners usually forget to git add the file after fixing the conflict and just (try to) commit. You can diagnose this with git status.\n                      Remember that you can discard one of the two parents of the merge:\n                      \n                      discard the remote file, git checkout --ours conflicted_file.txt\n                      discard the local file, git checkout --theirs conflicted_file.txt\n                      \n                      You still have to git add and git commit after this. This is particularly useful when working with binary files.\n                      Keep in mind that depending on the Git version used, the outputs for git push and git pull can vary slightly."
  },
  {
    "objectID": "instructors/instructor-notes.html#open-science",
    "href": "instructors/instructor-notes.html#open-science",
    "title": "Version Control with Git",
    "section": "Open Science",
    "text": "Open Science"
  },
  {
    "objectID": "instructors/instructor-notes.html#licensing",
    "href": "instructors/instructor-notes.html#licensing",
    "title": "Version Control with Git",
    "section": "Licensing",
    "text": "Licensing\n                      We teach about licensing because questions about who owns what, or can use what, arise naturally once we start talking about using public services like GitHub to store files. Also, the discussion gives learners a chance to catch their breath after what is often a frustrating couple of hours.\n                      The Creative Commons family of licenses is recommended for many types of works (including software documentation and images used in software) but not software itself. Creative Commons recommends a software-specific license instead."
  },
  {
    "objectID": "instructors/instructor-notes.html#citation",
    "href": "instructors/instructor-notes.html#citation",
    "title": "Version Control with Git",
    "section": "Citation",
    "text": "Citation"
  },
  {
    "objectID": "instructors/instructor-notes.html#hosting",
    "href": "instructors/instructor-notes.html#hosting",
    "title": "Version Control with Git",
    "section": "Hosting",
    "text": "Hosting\n                      A common concern for learners is having their work publicly available on GitHub. While we encourage open science, sometimes private repos are the only choice. It’s always interesting to mention the options to have web-hosted private repositories."
  },
  {
    "objectID": "learners/reference.html",
    "href": "learners/reference.html",
    "title": "Version Control with Git",
    "section": "",
    "text": "Skip to main content\n          \n            \n              \n                \n                                              \n            \n            \n              \n                \n                  \n                    \n                      \n                    \n                    \n                  \n                  \n                    \n                      \n                        \n                          \n                        \n                        Light\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Dark\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Auto\n                        \n                          \n                        \n                      \n                    \n                  \n                \n              \n              \n              \n                        \n                   Instructor View \n                \n                \n                  Learner View"
  },
  {
    "objectID": "learners/reference.html#git-cheatsheets-for-quick-reference",
    "href": "learners/reference.html#git-cheatsheets-for-quick-reference",
    "title": "Version Control with Git",
    "section": "Git Cheatsheets for Quick Reference",
    "text": "Git Cheatsheets for Quick Reference\n                      \n                      Printable Git cheatsheets in several languages are available here (English version). More material is available from the GitHub training website.\n                      An interactive one-page visualisation about the relationships between workspace, staging area, local repository, upstream repository, and the commands associated with each (with explanations).\n                      Both resources are also available in other languages (e.g. Spanish, French, and more).\n                      “Happy Git and GitHub for the useR” is an accessible, free online book by Jenny Bryan on how to setup and use Git and GitHub with specific references on the integration of Git with RStudio and working with Git in R.\n                      Open Scientific Code using Git and GitHub - A collection of explanations and short practical exercises to help researchers learn more about version control and open source software."
  },
  {
    "objectID": "learners/reference.html#glossary",
    "href": "learners/reference.html#glossary",
    "title": "Version Control with Git",
    "section": "Glossary",
    "text": "Glossary\n                      \n                      branch\n                      \n                      A Git branch is a pointer to a commit. Branches are used to develop changes in parallel, isolated from each other.\n                      \n                      Centralised Version Control System\n                      \n                      In a Centralised Version Control System such as Subversion a single, centralised server contains the main copy of a repository. Working on code requires internet access to the centralised server.\n                      \n                      changeset\n                      \n                      A group of changes to one or more files that are or will be added to a single commit in a version control repository.\n                      \n                      commit\n                      \n                      To record the current state of a set of files (a changeset) in a version control repository. As a noun, the result of committing, i.e. a recorded changeset in a repository. If a commit contains changes to multiple files, all of the changes are recorded together.\n                      \n                      conflict\n                      \n                      A change made by one user of a version control system that is incompatible with changes made by other users. Helping users resolve conflicts is one of version control’s major tasks.\n                      \n                      Distributed Version Control System\n                      \n                      In a Distributed Version Control System such as Git each collaborator has a copy of the entire repository and its history. Working on code does not require internet access and there are multiple backups of the entire repository.\n                      \n                      Git\n                      \n                      Git is a free and open source Version Control System (VCS) capable of tracking the history of our files and recover previous versions. Git is an example of a Distributed Version Control System.\n                      \n                      GitHub\n                      \n                      GitHub is a cloud-based platform where you can store, share, and work together with others to write code. GitHub is built upon Git.\n                      \n                      HTTP\n                      \n                      The Hypertext Transfer Protocol used for sharing web pages and other data on the World Wide Web.\n                      \n                      merge\n                      \n                      (a repository): To reconcile two sets of changes to a repository.\n                      \n                      protocol\n                      \n                      A set of rules that define how one computer communicates with another. Common protocols on the Internet include HTTP and SSH.\n                      \n                      remote\n                      \n                      (of a repository) A version control repository connected to another, in such way that both can be kept in sync exchanging commits.\n                      \n                      repository\n                      \n                      A storage area where a version control system stores the full history of commits of a project and information about who changed what, when.\n                      \n                      resolve\n                      \n                      To eliminate the conflicts between two or more incompatible changes to a file or set of files being managed by a version control system.\n                      \n                      revision\n                      \n                      A synonym for commit.\n                      \n                      SHA-1\n                      \n                      SHA-1 hashes is what Git uses to compute identifiers, including for commits. To compute these, Git uses not only the actual change of a commit, but also its metadata (such as date, author, message), including the identifiers of all commits of preceding changes. This makes Git commit IDs virtually unique. I.e., the likelihood that two commits made independently, even of the same change, receive the same ID is exceedingly small.\n                      \n                      SSH\n                      \n                      The Secure Shell protocol used for secure communication between computers.\n                      \n                      timestamp\n                      \n                      A record of when a particular event occurred.\n                      \n                      Version Control System (VCS)\n                      \n                      A tool for managing changes to a set of files. Each set of changes creates a new commit of the files; the version control system allows users to recover old commits reliably, and helps manage conflicting changes made by different users."
  },
  {
    "objectID": "learners/discuss.html",
    "href": "learners/discuss.html",
    "title": "Version Control with Git",
    "section": "",
    "text": "Skip to main content\n          \n            \n              \n                \n                                              \n            \n            \n              \n                \n                  \n                    \n                      \n                    \n                    \n                  \n                  \n                    \n                      \n                        \n                          \n                        \n                        Light\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Dark\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Auto\n                        \n                          \n                        \n                      \n                    \n                  \n                \n              \n              \n              \n                        \n                   Instructor View \n                \n                \n                  Learner View"
  },
  {
    "objectID": "learners/discuss.html#frequently-asked-questions",
    "href": "learners/discuss.html#frequently-asked-questions",
    "title": "Version Control with Git",
    "section": "Frequently Asked Questions",
    "text": "Frequently Asked Questions\n                      People often have questions about Git beyond the scope of the core material. Students who have completed the rest of the lessons might find value in looking through the following topics.\n                      Note that since this material isn’t essential for basic Git usage, it won’t be covered by the instructor."
  },
  {
    "objectID": "learners/discuss.html#more-advanced-git-configuration",
    "href": "learners/discuss.html#more-advanced-git-configuration",
    "title": "Version Control with Git",
    "section": "More Advanced Git Configuration",
    "text": "More Advanced Git Configuration\n                      In Setting Up Git, we used git config --global to set some default options for Git. It turns out that these configuration options get stored in your home directory in a plain text file called .gitconfig.\n                      $ cat ~/.gitconfig\n                      [user]\n    name = Francis Beaufort\n    email = f.beaufort@weather.ie\n[color]\n    ui = true\n[core]\n    editor = nano\n                      This file can be opened in your preferred text editor. (Note that it is recommended to continue using the git config command, as this helps avoid introducing syntax errors.)\n                      Eventually, you will want to start customizing Git’s behaviour. This can be done by adding more entries to your .gitconfig. The available options are described in the manual:\n                      $ git config --help\n                      \n                      Recommended Settings\n                      We recommend setting the following:\n                      [merge]\n    ff = false\n    conflictStyle = diff3\n[mergetool]\n    keepBackup = false\n[fetch]\n    prune = true\n[pull]\n    ff = only\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Setting\n                      Value\n                      Justification\n                      \n                      \n                      \n                      \n                      merge.ff\n                      false\n                      Make git merge always a “true merge”\n                      \n                      \n                      merge.conflictStyle\n                      diff3\n                      Add common ancestor to conflict markers\n                      \n                      \n                      mergetool.keepBackup\n                      false\n                      Tidy *.orig files when mergetool finishes\n                      \n                      \n                      fetch.prune\n                      true\n                      Automatically delete references to deleted remote branches\n                      \n                      \n                      pull.ff\n                      only\n                      Make git pull only fast-forward\n                      \n                      \n                      \n                      These settings will be explained in later episodes and in the follow on Git & GitHub Working Practices training.\n                      Set them using:\n                      $ git config --global setting value\n$ git config --global merge.ff false\n                      \n                      Aliases\n                      In particular, you might find it useful to add aliases. These are like shortcuts for longer Git commands. For example, if you get sick of typing git checkout all the time, you could run the command:\n                      $ git config --global alias.co checkout\n                      Now if we return to the example from Exploring History where we ran:\n                      $ git checkout f22b25e forecast.md\n                      we could now instead type:\n                      $ git co f22b25e forecast.md\n                      The following are some aliases others have found useful. We recommend returning to these once you have learnt more Git commands and become more comfortable with Git in general.\n                      [alias]\n    st = status\n    ci = commit\n    ca = commit -a\n    br = branch\n    co = checkout\n    cb = checkout -b\n    lg = log --oneline\n    graph = log --oneline --graph\n    dog = log --decorate --oneline --graph\n    sdiff = diff --staged\n    unstage = restore --staged\n    amend = commit --amend --no-edit\n    reword = commit --amend --only --\n    ff = merge --ff-only\n    update = \"! git pull --ff-only && git push\"\n                      Set them using:\n                      $ git config --global alias.&lt;short&gt; \"&lt;command&gt;\"\n$ git config --global alias.st \"status\"\n                      \n                      \n                      \n                      Viewing Settings\n                      git config --list --show-origin  # Shows all configurations with their origins\ngit config --global --list       # Shows global configurations\ngit config --local --list        # Shows configurations for the current repository\n                      \n                      \n                      Removing Settings\n                      The following actions can NOT be undone. Be certain you wish to delete any settings. Simply add --unset before the key:\n                      $ git config --global --unset alias.st\n                      You may wish to completely clear your global settings:\n                      $ rm ~/.gitconfig\n                      Or your local settings:\n                      $ rm .git/config"
  },
  {
    "objectID": "learners/discuss.html#styling-gits-log",
    "href": "learners/discuss.html#styling-gits-log",
    "title": "Version Control with Git",
    "section": "Styling Git’s Log",
    "text": "Styling Git’s Log\n                      A good target for customization is output from the log. The default log is quite verbose but gives no graphical hints such as information about which commits were done locally and which were pulled from remotes.\n                      You can use git log --help and git config --help to look for different ways to change the log output. Try the following commands and see what effect they have:\n                      $ git config --global alias.lg \"log --graph\"\n$ git config --global log.abbrevCommit true\n$ git config --global format.pretty oneline\n$ git lg\n                      If you don’t like the effects, you can undo them with:\n                      $ git config --global --unset alias.lg\n$ git config --global --unset log.abbrevCommit\n$ git config --global --unset format.pretty\n                      \n                      \n                      \n                      \n                      \n                      \n                      Undoing Git Configuration Changes\n                      \n                      \n                      \n                      You can use the --unset flag to delete unwanted options from .gitconfig. Another way to roll back changes is to store your .gitconfig using Git.\n                      For hints on what you might want to configure, go to GitHub and search for “gitconfig”. You will find hundreds of repositories in which people have stored their own Git configuration files. Sort them by the number of stars and have a look at the top few. If you find some you like, please check that they’re covered by an open source license before you clone them."
  },
  {
    "objectID": "learners/discuss.html#non-text-files",
    "href": "learners/discuss.html#non-text-files",
    "title": "Version Control with Git",
    "section": "Non-text Files",
    "text": "Non-text Files\n                      Recall when we discussed Conflicts there was a challenge that asked, “What does Git do when there is a conflict in an image or some other non-textual file that is stored in version control?”\n                      We will now revisit this in more detail.\n                      Many people want to version control non-text files, such as images, PDFs and Microsoft Office or LibreOffice documents. It is true that Git can handle these filetypes (which fall under the banner of “binary” file types). However, just because it can be done doesn’t mean it should be done.\n                      Much of Git’s magic comes from being able to do line-by-line comparisons (“diffs”) between files. This is generally easy for programming source code and marked up text. For non-text files, a diff can usually only detect that the files have changed but can’t say how or where.\n                      This has various impacts on Git’s performance and will make it difficult to compare different versions of your project.\n                      For a basic example to show the difference it makes, we’re going to go see what would have happened if you had tried using outputs from a word processor instead of plain text.\n                      Create a new directory and go into it:\n                      $ mkdir weather-nontext\n$ cd weather-nontext\n                      Use a program such as Microsoft Word or LibreOffice Writer to create a new document. Enter the same text that we began with before:\n                      # Forecast\n## Today\nCloudy with a chance of pizza.\n                      Save the document into the weather-nontext directory with the name of forecast.doc. Back in the terminal, run the usual commands for setting up a new Git repository:\n                      $ git init\n$ git add forecast.doc\n$ git commit -m \"Create a Word file with the forecast\"\n                      Then make the same changes to forecast.doc that we previously made to forecast.md.\n                      # Forecast\n## Today\nCloudy with a chance of pizza.\n## Tomorrow\nMorning rainbows followed by light showers.\n                      Save and close the word processor. Now see what Git thinks of your changes:\n                      $ git diff\n                      diff --git a/forecast.doc b/forecast.doc\nindex 53a66fd..6e988e9 100644\nBinary files a/forecast.doc and b/forecast.doc differ\n                      Compare this to the earlier git diff obtained when using text files:\n                      diff --git a/forecast.md b/forecast.md\nindex df0654a..315bf3a 100644\n--- a/forecast.md\n+++ b/forecast.md\n@@ -1,3 +1,5 @@\n # Forecast\n ## Today\n Cloudy with a chance of pizza.\n+## Tomorrow\n+Morning rainbows followed by light showers.\n                      Notice how plain text files give a much more informative diff. You can see exactly which lines changed and what the changes were.\n                      An uninformative git diff is not the only consequence of using Git on binary files. However, most of the other problems boil down to whether or not a good diff is possible.\n                      This isn’t to say you should never use Git on binary files. A rule of thumb is that it’s OK if the binary file won’t change very often, and if it does change, you don’t care about merging in small differences between versions.\n                      We’ve already seen how a word processed report will fail this test. An example that passes the test is a logo for your organization or project. Even though a logo will be stored in a binary format such as jpg or png, you can expect it will remain fairly static through the lifetime of your repository. On the rare occasion that branding does change, you will probably just want to replace the logo completely rather than merge little differences in."
  },
  {
    "objectID": "learners/discuss.html#removing-a-file",
    "href": "learners/discuss.html#removing-a-file",
    "title": "Version Control with Git",
    "section": "Removing a File",
    "text": "Removing a File\n                      Adding and modifying files are not the only actions one might take when working on a project. It might be required to remove a file from the repository.\n                      Create a new file:\n                      $ echo \"This is where we store MEOP information\" &gt; MEOP.md\n                      Now add to the repository like you have learned earlier:\n                      $ git add MEOP.md\n$ git commit -m 'Add MEOP information'\n$ git status\n                      On branch main\nnothing to commit, working directory clean\n                      Adding MEOP data to the weather repository was not a good idea. Let us remove it from the disk and let Git know about it:\n                      $ git rm MEOP.md\n$ git status\n                      On branch main\nChanges to be committed:\n   (use \"git reset HEAD &lt;file&gt;...\" to unstage)\n\n   deleted:    MEOP.md\n\n                      The change has been staged. Now commit the removal, and remove the file from the repository itself. Note that the file will be removed in the new commit. The previous commit will still have the file, if you were to retrieve that specific commit.\n                      $ git commit -m 'Remove info on MEOP seals'"
  },
  {
    "objectID": "learners/discuss.html#removing-a-file-with-unix",
    "href": "learners/discuss.html#removing-a-file-with-unix",
    "title": "Version Control with Git",
    "section": "Removing a File with Unix",
    "text": "Removing a File with Unix\n                      Sometimes we might forget to remove the file through Git. If you removed the file with Unix rm instead of using git rm, no worries, Git is smart enough to notice the missing file. Let us recreate the file and commit it again.\n                      $ echo \"More MEOP info\" &gt; MEOP-info.md\n$ git add MEOP-info.md\n$ git commit -m 'Add MEOP info again'\n                      Now we remove the file with Unix rm:\n                      $ rm MEOP-info.md\n$ git status\n                      On branch main\nChanges not staged for commit:\n   (use \"git add/rm &lt;file&gt;...\" to update what will be committed)\n   (use \"git checkout -- &lt;file&gt;...\" to discard changes in working directory)\n\n    deleted:    MEOP-info.md\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n                      See how Git has noticed that the file MEOP-info.md has been removed from the disk. The next step is to “stage” the removal of the file from the repository. This is done with the command git rm just as before.\n                      $ git rm MEOP-info.md\n$ git status\n                      On branch main\nChanges to be committed:\n   (use \"git reset HEAD &lt;file&gt;...\" to unstage)\n\n   deleted:    MEOP-info.md\n\n                      The change that was made in Unix has now been staged and needs to be committed.\n                      $ git commit -m 'Remove info on MEOP seals, again!'"
  },
  {
    "objectID": "learners/discuss.html#renaming-a-file",
    "href": "learners/discuss.html#renaming-a-file",
    "title": "Version Control with Git",
    "section": "Renaming a File",
    "text": "Renaming a File\n                      Another common change when working on a project is to rename a file.\n                      Create a file for cirrus clouds:\n                      $ echo \"Very wispy\" &gt; cirrus.md\n                      Add it to the repository:\n                      $ git add cirrus.md\n$ git commit -m 'Add cirrus clouds file'\n                      You realise you identified the cloud incorrectly. Rename the file cirrus.md to cumulus.md with Git:\n                      $ git mv cirrus.md cumulus.md\n$ git status\n                      On branch main\nChanges to be committed:\n  (use \"git reset HEAD &lt;file&gt;...\" to unstage)\n\n    renamed:    cirrus.md -&gt;  cumulus.md\n                      The final step is commit our change to the repository:\n                      $ git commit -m 'Correct the cloud type'"
  },
  {
    "objectID": "learners/discuss.html#renaming-a-file-with-unix",
    "href": "learners/discuss.html#renaming-a-file-with-unix",
    "title": "Version Control with Git",
    "section": "Renaming a File with Unix",
    "text": "Renaming a File with Unix\n                      If you forgot to use Git and you used Unix mv instead of git mv, you will have a touch more work to do but Git will be able to deal with it. Let’s try again renaming the file, this time with Unix mv. First, we need to recreate the cirrus.md file:\n                      $ echo \"Very wispy\" &gt; cirrus.md\n$ git add cirrus.md\n$ git commit -m 'Add cirrus clouds file'\n                      Let us rename the file and see what Git can figured out by itself:\n                      $ mv cirrus.md cumulus.md\n$ git status\n                      On branch main\nChanges not staged for commit:\n  (use \"git add/rm &lt;file&gt;...\" to update what will be committed)\n  (use \"git checkout -- &lt;file&gt;...\" to discard changes in working directory)\n\n        deleted:    cirrus.md\n\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n\n    cumulus.md\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n                      Git has noticed that the file cirrus.md has disappeared from the file system and a new file cumulus.md has showed up.\n                      Add those changes to the staging area:\n                      $ git add cirrus.md cumulus.md\n$ git status\n                      On branch main\nChanges to be committed:\n  (use \"git reset HEAD &lt;file&gt;...\" to unstage)\n\n    renamed:    cirrus.md -&gt; cumulus.md\n\n                      Notice how Git has now figured out that the cirrus.md has not disappeared - it has simply been renamed.\n                      The final step, as before, is to commit our change to the repository:\n                      $ git commit -m 'Correct the cloud type'\n                      This works because Git can tell that the file was only re-named, they contain the same content. If you are renaming files add this change as a separate small commit before you make changes to the file contents."
  },
  {
    "objectID": "learners/discuss.html#further-.gitignore-concepts",
    "href": "learners/discuss.html#further-.gitignore-concepts",
    "title": "Version Control with Git",
    "section": "Further .gitignore concepts",
    "text": "Further .gitignore concepts\n                      For additional documentation on .gitignore, please reference the official Git documentation.\n                      In the ignore exercise, learners were presented with two variations of ignoring nested files. Depending on the organization of your repository, one may suit your needs over another. Keep in mind that the way that Git travels along directory paths can be confusing.\n                      Sometimes the ** pattern comes in handy, too, which matches multiple directory levels. E.g. **/results/plots/* would make Git ignore the results/plots directory in any root directory.\n                      \n                      \n                      \n                      \n                      \n                      Ignoring Nested Files: Challenge Problem\n                      \n                      Given a directory structure that looks like:\n                      results/data\nresults/plots\nresults/run001.log\nresults/run002.log\n                      And a .gitignore that looks like:\n                      *.csv\n                      How would you track all of the contents of results/data/, including *.csv files, but ignore the rest of results/?\n                      \n                      Solution (Solution). To do this, your .gitignore would look like this:\n                      *.csv                 # ignore the .csv files\nresults/*             # ignore the files in the results directory\n!results/data/        # do not ignore the files in results/data\n!results/data/*       # do not ignore the .csv files in reults/data"
  },
  {
    "objectID": "episodes/extract_all_images.html#automated-version-control-1",
    "href": "episodes/extract_all_images.html#automated-version-control-1",
    "title": "Version Control with Git",
    "section": "Automated Version Control-1",
    "text": "Automated Version Control-1"
  },
  {
    "objectID": "episodes/extract_all_images.html#automated-version-control-2",
    "href": "episodes/extract_all_images.html#automated-version-control-2",
    "title": "Version Control with Git",
    "section": "Automated Version Control-2",
    "text": "Automated Version Control-2"
  },
  {
    "objectID": "episodes/extract_all_images.html#automated-version-control-3",
    "href": "episodes/extract_all_images.html#automated-version-control-3",
    "title": "Version Control with Git",
    "section": "Automated Version Control-3",
    "text": "Automated Version Control-3"
  },
  {
    "objectID": "episodes/extract_all_images.html#automated-version-control-4",
    "href": "episodes/extract_all_images.html#automated-version-control-4",
    "title": "Version Control with Git",
    "section": "Automated Version Control-4",
    "text": "Automated Version Control-4"
  },
  {
    "objectID": "episodes/extract_all_images.html#terminology-1",
    "href": "episodes/extract_all_images.html#terminology-1",
    "title": "Version Control with Git",
    "section": "Terminology-1",
    "text": "Terminology-1"
  },
  {
    "objectID": "episodes/extract_all_images.html#terminology-2",
    "href": "episodes/extract_all_images.html#terminology-2",
    "title": "Version Control with Git",
    "section": "Terminology-2",
    "text": "Terminology-2"
  },
  {
    "objectID": "episodes/extract_all_images.html#branches-1",
    "href": "episodes/extract_all_images.html#branches-1",
    "title": "Version Control with Git",
    "section": "Branches-1",
    "text": "Branches-1\n\n\n\n\n\n\nA Git graph showing the root-commit on the main branch and a new forecast branch with one commit branched off the root-commit. This branch is then merged back into main via a merge commit on GitHub.\n\nmainforecast"
  },
  {
    "objectID": "episodes/extract_all_images.html#creating-branches-1",
    "href": "episodes/extract_all_images.html#creating-branches-1",
    "title": "Version Control with Git",
    "section": "Creating Branches-1",
    "text": "Creating Branches-1\n\n\n\n\n\n\nA Git graph showing one commit, the root-commit on the main branch.\n\nmain6f12a47"
  },
  {
    "objectID": "episodes/extract_all_images.html#creating-branches-2",
    "href": "episodes/extract_all_images.html#creating-branches-2",
    "title": "Version Control with Git",
    "section": "Creating Branches-2",
    "text": "Creating Branches-2\n\n\n\n\n\n\nA Git graph showing the root-commit on the main branch and a new forecast branch with no commits.\n\nmainforecast6f12a47"
  },
  {
    "objectID": "episodes/extract_all_images.html#tracking-changes-1",
    "href": "episodes/extract_all_images.html#tracking-changes-1",
    "title": "Version Control with Git",
    "section": "Tracking Changes-1",
    "text": "Tracking Changes-1\n\n\n\n\n\n\nA Git graph showing the root-commit on the main branch and a new forecast branch, branching off the root-commit, with one commit.\n\nmainforecastInitial commitCreate a md file with the forecast"
  },
  {
    "objectID": "episodes/extract_all_images.html#tracking-changes-2",
    "href": "episodes/extract_all_images.html#tracking-changes-2",
    "title": "Version Control with Git",
    "section": "Tracking Changes-2",
    "text": "Tracking Changes-2"
  },
  {
    "objectID": "episodes/extract_all_images.html#tracking-changes-3",
    "href": "episodes/extract_all_images.html#tracking-changes-3",
    "title": "Version Control with Git",
    "section": "Tracking Changes-3",
    "text": "Tracking Changes-3\n\n\n\n\n\n\nA Git graph showing the root-commit on the main branch and a new forecast branch, branching off the root-commit, with two commits.\n\nmainforecastInitial commitCreate a md file with the forecastAdd tomorrows forecast to forecast.md"
  },
  {
    "objectID": "episodes/extract_all_images.html#tracking-changes-4",
    "href": "episodes/extract_all_images.html#tracking-changes-4",
    "title": "Version Control with Git",
    "section": "Tracking Changes-4",
    "text": "Tracking Changes-4\n\n\n\n\n\n\nA Git graph showing the root-commit on the main branch and a new forecast branch, branching off the root-commit, with three commits.\n\nmainforecastInitial commitCreate a md file with the forecastAdd tomorrows forecast to forecast.mdModify the forecast to add a chance of Sun"
  },
  {
    "objectID": "episodes/extract_all_images.html#tracking-changes-5",
    "href": "episodes/extract_all_images.html#tracking-changes-5",
    "title": "Version Control with Git",
    "section": "Tracking Changes-5",
    "text": "Tracking Changes-5"
  },
  {
    "objectID": "episodes/extract_all_images.html#restoring-a-file-from-further-back-1",
    "href": "episodes/extract_all_images.html#restoring-a-file-from-further-back-1",
    "title": "Version Control with Git",
    "section": "Restoring a file from further back-1",
    "text": "Restoring a file from further back-1"
  },
  {
    "objectID": "episodes/extract_all_images.html#summary-1",
    "href": "episodes/extract_all_images.html#summary-1",
    "title": "Version Control with Git",
    "section": "Summary-1",
    "text": "Summary-1\n\n\n\n\n\n\nA Git graph showing the root-commit on the main branch and a new forecast branch with five commits.\n\nmainforecast"
  },
  {
    "objectID": "episodes/extract_all_images.html#create-a-remote-repository-1",
    "href": "episodes/extract_all_images.html#create-a-remote-repository-1",
    "title": "Version Control with Git",
    "section": "1. Create a remote repository-1",
    "text": "1. Create a remote repository-1"
  },
  {
    "objectID": "episodes/extract_all_images.html#create-a-remote-repository-2",
    "href": "episodes/extract_all_images.html#create-a-remote-repository-2",
    "title": "Version Control with Git",
    "section": "1. Create a remote repository-2",
    "text": "1. Create a remote repository-2"
  },
  {
    "objectID": "episodes/extract_all_images.html#create-a-remote-repository-3",
    "href": "episodes/extract_all_images.html#create-a-remote-repository-3",
    "title": "Version Control with Git",
    "section": "1. Create a remote repository-3",
    "text": "1. Create a remote repository-3"
  },
  {
    "objectID": "episodes/extract_all_images.html#create-a-remote-repository-4",
    "href": "episodes/extract_all_images.html#create-a-remote-repository-4",
    "title": "Version Control with Git",
    "section": "1. Create a remote repository-4",
    "text": "1. Create a remote repository-4"
  },
  {
    "objectID": "episodes/extract_all_images.html#create-a-remote-repository-5",
    "href": "episodes/extract_all_images.html#create-a-remote-repository-5",
    "title": "Version Control with Git",
    "section": "1. Create a remote repository-5",
    "text": "1. Create a remote repository-5"
  },
  {
    "objectID": "episodes/extract_all_images.html#connect-local-to-remote-repository-1",
    "href": "episodes/extract_all_images.html#connect-local-to-remote-repository-1",
    "title": "Version Control with Git",
    "section": "2. Connect local to remote repository-1",
    "text": "2. Connect local to remote repository-1"
  },
  {
    "objectID": "episodes/extract_all_images.html#push-local-changes-to-a-remote-1",
    "href": "episodes/extract_all_images.html#push-local-changes-to-a-remote-1",
    "title": "Version Control with Git",
    "section": "4. Push local changes to a remote-1",
    "text": "4. Push local changes to a remote-1"
  },
  {
    "objectID": "episodes/extract_all_images.html#exploring-github-1",
    "href": "episodes/extract_all_images.html#exploring-github-1",
    "title": "Version Control with Git",
    "section": "Exploring GitHub-1",
    "text": "Exploring GitHub-1"
  },
  {
    "objectID": "episodes/extract_all_images.html#exploring-github-2",
    "href": "episodes/extract_all_images.html#exploring-github-2",
    "title": "Version Control with Git",
    "section": "Exploring GitHub-2",
    "text": "Exploring GitHub-2"
  },
  {
    "objectID": "episodes/extract_all_images.html#exploring-github-3",
    "href": "episodes/extract_all_images.html#exploring-github-3",
    "title": "Version Control with Git",
    "section": "Exploring GitHub-3",
    "text": "Exploring GitHub-3"
  },
  {
    "objectID": "episodes/extract_all_images.html#exploring-github-4",
    "href": "episodes/extract_all_images.html#exploring-github-4",
    "title": "Version Control with Git",
    "section": "Exploring GitHub-4",
    "text": "Exploring GitHub-4"
  },
  {
    "objectID": "episodes/extract_all_images.html#exploring-github-5",
    "href": "episodes/extract_all_images.html#exploring-github-5",
    "title": "Version Control with Git",
    "section": "Exploring GitHub-5",
    "text": "Exploring GitHub-5"
  },
  {
    "objectID": "episodes/extract_all_images.html#viewing-the-history-of-a-repository-on-github-1",
    "href": "episodes/extract_all_images.html#viewing-the-history-of-a-repository-on-github-1",
    "title": "Version Control with Git",
    "section": "Viewing the History of a Repository on GitHub-1",
    "text": "Viewing the History of a Repository on GitHub-1"
  },
  {
    "objectID": "episodes/extract_all_images.html#viewing-the-history-of-a-repository-on-github-2",
    "href": "episodes/extract_all_images.html#viewing-the-history-of-a-repository-on-github-2",
    "title": "Version Control with Git",
    "section": "Viewing the History of a Repository on GitHub-2",
    "text": "Viewing the History of a Repository on GitHub-2"
  },
  {
    "objectID": "episodes/extract_all_images.html#viewing-the-history-of-a-repository-on-github-3",
    "href": "episodes/extract_all_images.html#viewing-the-history-of-a-repository-on-github-3",
    "title": "Version Control with Git",
    "section": "Viewing the History of a Repository on GitHub-3",
    "text": "Viewing the History of a Repository on GitHub-3"
  },
  {
    "objectID": "episodes/extract_all_images.html#viewing-the-history-of-a-repository-on-github-4",
    "href": "episodes/extract_all_images.html#viewing-the-history-of-a-repository-on-github-4",
    "title": "Version Control with Git",
    "section": "Viewing the History of a Repository on GitHub-4",
    "text": "Viewing the History of a Repository on GitHub-4"
  },
  {
    "objectID": "episodes/extract_all_images.html#viewing-differences-between-commits-1",
    "href": "episodes/extract_all_images.html#viewing-differences-between-commits-1",
    "title": "Version Control with Git",
    "section": "Viewing Differences Between Commits-1",
    "text": "Viewing Differences Between Commits-1"
  },
  {
    "objectID": "episodes/extract_all_images.html#viewing-differences-between-commits-2",
    "href": "episodes/extract_all_images.html#viewing-differences-between-commits-2",
    "title": "Version Control with Git",
    "section": "Viewing Differences Between Commits-2",
    "text": "Viewing Differences Between Commits-2"
  },
  {
    "objectID": "episodes/extract_all_images.html#creating-a-pull-request-1",
    "href": "episodes/extract_all_images.html#creating-a-pull-request-1",
    "title": "Version Control with Git",
    "section": "Creating a Pull Request-1",
    "text": "Creating a Pull Request-1"
  },
  {
    "objectID": "episodes/extract_all_images.html#creating-a-pull-request-2",
    "href": "episodes/extract_all_images.html#creating-a-pull-request-2",
    "title": "Version Control with Git",
    "section": "Creating a Pull Request-2",
    "text": "Creating a Pull Request-2"
  },
  {
    "objectID": "episodes/extract_all_images.html#creating-a-pull-request-3",
    "href": "episodes/extract_all_images.html#creating-a-pull-request-3",
    "title": "Version Control with Git",
    "section": "Creating a Pull Request-3",
    "text": "Creating a Pull Request-3"
  },
  {
    "objectID": "episodes/extract_all_images.html#creating-a-pull-request-4",
    "href": "episodes/extract_all_images.html#creating-a-pull-request-4",
    "title": "Version Control with Git",
    "section": "Creating a Pull Request-4",
    "text": "Creating a Pull Request-4"
  },
  {
    "objectID": "episodes/extract_all_images.html#rulesets-1",
    "href": "episodes/extract_all_images.html#rulesets-1",
    "title": "Version Control with Git",
    "section": "Rulesets-1",
    "text": "Rulesets-1"
  },
  {
    "objectID": "episodes/extract_all_images.html#merging-a-pull-request-1",
    "href": "episodes/extract_all_images.html#merging-a-pull-request-1",
    "title": "Version Control with Git",
    "section": "Merging a Pull Request-1",
    "text": "Merging a Pull Request-1"
  },
  {
    "objectID": "episodes/extract_all_images.html#merging-a-pull-request-2",
    "href": "episodes/extract_all_images.html#merging-a-pull-request-2",
    "title": "Version Control with Git",
    "section": "Merging a Pull Request-2",
    "text": "Merging a Pull Request-2"
  },
  {
    "objectID": "episodes/extract_all_images.html#profile-settings-1",
    "href": "episodes/extract_all_images.html#profile-settings-1",
    "title": "Version Control with Git",
    "section": "Profile Settings-1",
    "text": "Profile Settings-1"
  },
  {
    "objectID": "episodes/extract_all_images.html#configuring-notifications-1",
    "href": "episodes/extract_all_images.html#configuring-notifications-1",
    "title": "Version Control with Git",
    "section": "Configuring Notifications-1",
    "text": "Configuring Notifications-1"
  },
  {
    "objectID": "episodes/extract_all_images.html#organisation-membership-1",
    "href": "episodes/extract_all_images.html#organisation-membership-1",
    "title": "Version Control with Git",
    "section": "Organisation Membership-1",
    "text": "Organisation Membership-1"
  },
  {
    "objectID": "episodes/extract_all_images.html#summary-2",
    "href": "episodes/extract_all_images.html#summary-2",
    "title": "Version Control with Git",
    "section": "Summary-1",
    "text": "Summary-1"
  },
  {
    "objectID": "episodes/extract_all_images.html#using-git-from-rstudio-1",
    "href": "episodes/extract_all_images.html#using-git-from-rstudio-1",
    "title": "Version Control with Git",
    "section": "‘Using Git from RStudio’-1",
    "text": "‘Using Git from RStudio’-1"
  },
  {
    "objectID": "episodes/extract_all_images.html#using-git-from-rstudio-2",
    "href": "episodes/extract_all_images.html#using-git-from-rstudio-2",
    "title": "Version Control with Git",
    "section": "‘Using Git from RStudio’-2",
    "text": "‘Using Git from RStudio’-2"
  },
  {
    "objectID": "episodes/extract_all_images.html#using-git-from-rstudio-3",
    "href": "episodes/extract_all_images.html#using-git-from-rstudio-3",
    "title": "Version Control with Git",
    "section": "‘Using Git from RStudio’-3",
    "text": "‘Using Git from RStudio’-3"
  },
  {
    "objectID": "episodes/extract_all_images.html#using-git-from-rstudio-4",
    "href": "episodes/extract_all_images.html#using-git-from-rstudio-4",
    "title": "Version Control with Git",
    "section": "‘Using Git from RStudio’-4",
    "text": "‘Using Git from RStudio’-4"
  },
  {
    "objectID": "episodes/extract_all_images.html#using-git-from-rstudio-5",
    "href": "episodes/extract_all_images.html#using-git-from-rstudio-5",
    "title": "Version Control with Git",
    "section": "‘Using Git from RStudio’-5",
    "text": "‘Using Git from RStudio’-5"
  },
  {
    "objectID": "episodes/extract_all_images.html#using-git-from-rstudio-6",
    "href": "episodes/extract_all_images.html#using-git-from-rstudio-6",
    "title": "Version Control with Git",
    "section": "‘Using Git from RStudio’-6",
    "text": "‘Using Git from RStudio’-6"
  },
  {
    "objectID": "episodes/extract_all_images.html#using-git-from-rstudio-7",
    "href": "episodes/extract_all_images.html#using-git-from-rstudio-7",
    "title": "Version Control with Git",
    "section": "‘Using Git from RStudio’-7",
    "text": "‘Using Git from RStudio’-7"
  },
  {
    "objectID": "episodes/extract_all_images.html#using-git-from-rstudio-8",
    "href": "episodes/extract_all_images.html#using-git-from-rstudio-8",
    "title": "Version Control with Git",
    "section": "‘Using Git from RStudio’-8",
    "text": "‘Using Git from RStudio’-8"
  },
  {
    "objectID": "episodes/extract_all_images.html#using-git-from-rstudio-9",
    "href": "episodes/extract_all_images.html#using-git-from-rstudio-9",
    "title": "Version Control with Git",
    "section": "‘Using Git from RStudio’-9",
    "text": "‘Using Git from RStudio’-9"
  },
  {
    "objectID": "episodes/extract_all_images.html#using-git-from-rstudio-10",
    "href": "episodes/extract_all_images.html#using-git-from-rstudio-10",
    "title": "Version Control with Git",
    "section": "‘Using Git from RStudio’-10",
    "text": "‘Using Git from RStudio’-10"
  },
  {
    "objectID": "episodes/End.html",
    "href": "episodes/End.html",
    "title": "Version Control with Git",
    "section": "",
    "text": "Skip to main content\n          \n            \n              \n                \n                                              \n            \n            \n              \n                \n                  \n                    \n                      \n                    \n                    \n                  \n                  \n                    \n                      \n                        \n                          \n                        \n                        Light\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Dark\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Auto\n                        \n                          \n                        \n                      \n                    \n                  \n                \n              \n              \n              \n                        \n                   Instructor View \n                \n                \n                  Learner View"
  },
  {
    "objectID": "episodes/End.html#where-to-next",
    "href": "episodes/End.html#where-to-next",
    "title": "Version Control with Git",
    "section": "Where to next?",
    "text": "Where to next?\n                      The Git & GitHub Working Practices lesson teaches you how to work collaboratively with others using Git and GitHub. It explores more complex workflows and topics, building on from this lesson.\n                      There are also a number of optional episodes after this page which focus on open science and code which you can read in your own time.\n                      You can revisit this training anytime. Useful page links:\n                      \n                      Glossary\n                      Key Points\n                      Discussion page with extra information on some episodes\n                      FCM to Git cheat sheet\n                      Git cheatsheets\n                      \n                      You can keep your weather repositories around to practice with for as long as you like and when you are ready to delete them use the instructions at the end of this page."
  },
  {
    "objectID": "episodes/End.html#summary",
    "href": "episodes/End.html#summary",
    "title": "Version Control with Git",
    "section": "Summary",
    "text": "Summary\n                      You’ve now created a repository both locally on your computer and remotely on GitHub. You’ve developed changes on a feature branch, reviewed the changes on GitHub and merged them into main. The diagram below outlines the workflow you used during the course:\n                      \n                      A summary page outlining the steps we’ve taken to create a new repository locally and connect it to a GitHub remote can be found in the extra Quick Start Repository Guide."
  },
  {
    "objectID": "episodes/End.html#deleting-a-repository",
    "href": "episodes/End.html#deleting-a-repository",
    "title": "Version Control with Git",
    "section": "Deleting a Repository",
    "text": "Deleting a Repository\n                      Make sure you are certain you want to delete the repository. If you delete both the local and GitHub repositories you won’t be able to recover your files!\n                      \n                      Deleting a Local Repository\n                      $ cd ~/Desktop\n$ rm -rf weather\n                      \n                      \n                      Deleting a GitHub Repository\n                      \n                      Navigate to https://github.com/&lt;your-username&gt;/weather/settings\n                      Scroll down to the last setting in the Danger Zone\n                      Click on Delete this repository\n                      \n                      You will be asked to confirm twice that you understand the effects of deleting the repository. You will also be asked to type out &lt;your-username&gt;/weather to confirm the deletion and you may have to confirm the deletion using MFA or your passkey."
  },
  {
    "objectID": "episodes/14-supplemental-rstudio.html",
    "href": "episodes/14-supplemental-rstudio.html",
    "title": "Version Control with Git",
    "section": "",
    "text": "Skip to main content\n          \n            \n              \n                \n                                              \n            \n            \n              \n                \n                  \n                    \n                      \n                    \n                    \n                  \n                  \n                    \n                      \n                        \n                          \n                        \n                        Light\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Dark\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Auto\n                        \n                          \n                        \n                      \n                    \n                  \n                \n              \n              \n              \n                        \n                   Instructor View \n                \n                \n                  Learner View\n                \n                      \n            \n          \n          \n        \n        \n          \n            \n              \n              Menu\n            \n            \n              \n            \n            \n              Version Control with Git\n            \n            \n              \n            \n            \n              \n                \n                  \n                    Version Control with Git\n                  \n                \n                \n                \n                  \n                  Setup\n                \n                        \n                  Key Points\n                \n                \n                  Instructor Notes\n                \n                \n                  Extract All Images\n                \n                                  \n                    \n                      More \n                    \n                    \n                      \n\n                      Git Cheatsheets for Quick Reference\n                      Discussion\n                      FCM vs Git Cheat Sheet\n                      Quick Start Repository Guide            \n                  \n                      \n            \n            \n            \n            \n              \n                \n                \n              \n              \n                \n              \n            \n          \n        \n\n        \n          Version Control with Git\n        \n\n        \n          \n            0%\n          \n          \n            \n            \n          \n            \n      \n        \n          \n            \n              \n                \n              \n              \n                \n                  \n                    \n                      \n                        \n                          \n                        \n                        Toggle Theme\n                      \n                      \n                        \n                          \n                            \n                              \n                            \n                            Light\n                            \n                              \n                            \n                          \n                        \n                        \n                          \n                            \n                              \n                            \n                            Dark\n                            \n                              \n                            \n                          \n                        \n                        \n                          \n                            \n                              \n                            \n                            Auto\n                            \n                              \n                            \n                          \n                        \n                      \n                    \n                  \n                \n                \n                  \n                    \n                      \n                        \n                                            \n                            \n                               Learner View\n                            \n                          \n                          \n                            \n                              Instructor View\n                            \n                          \n                                          \n                      \n                    \n                  \n                  \n                  \n                \n\n                \n                  \n\n                    \n                      ../EPISODES\n                    \n                    \n\n                      \n                        \n\n                                \n                                  \n                                    \n                                      Summary and Setup\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      1. Automated Version Control\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      2. Setting Up Git\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      3. Creating a Repository\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      4. Branches\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      5. Tracking Changes\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      6. Exploring History\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      7. Reverting Changes\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      8. Ignoring Things\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      9. Break\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      10. Remotes in GitHub\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      11. Exploring GitHub\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      12. Exploring History on GitHub\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      13. Pull Requests\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      14. Configuring GitHub\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      15. End\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      16. Open Science\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      17. Licensing\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      18. Citation\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      19. Hosting\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      20. 'Using Git from RStudio'\n                                    \n                                  \n                                              \n                    \n                  \n                \n                \n\n                \n                          \n                    \n                      \n                        \n                          RESOURCES\n                        \n                      \n                      \n                        \n                          \n                            \n                            \n                              \n                              Setup\n                            \n                                                \n                              Key Points\n                            \n                            \n                              Instructor Notes\n                            \n                            \n                              Extract All Images\n                            \n                                                \n                          \n                        \n                      \n                    \n                  \n                  \n                  \n                  \n                  \n\n                  \n                              \n                \n              \n            \n          \n                        Version control can be very useful when developing data analysis scripts. For that reason, the popular development environment RStudio for the R programming language has built-in integration with Git. While some advanced Git features still require the command-line, RStudio has a nice interface for many common Git operations.\n                                               RStudio allows us to create a project associated with a given directory to keep track of various related files. To be able to track the development of the project over time, to be able to revert to previous versions, and to collaborate with others, we version control the Rstudio project with Git. To get started using Git in RStudio, we create a new project:\n                                               \n                                               This opens a dialog asking us how we want to create the project. We have some options here. Let’s say that we want to use RStudio with the weather repository that we already made. Since that repository lives in a directory on our computer, we choose the option “Existing Directory”:\n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               Do You See a “Version Control” Option?\n                                               \n                                               \n                                               \n                                               Although we’re not going to use it here, there should be a “version control” option on this menu. That is what you would click on if you wanted to create a project on your computer by cloning a repository from GitHub. If that option is not present, it probably means that RStudio doesn’t know where your Git executable is, and you won’t be able to progress further in this lesson until you tell RStudio where it is.\n                                               \n                                               Find your Git Executable\n                                               First let’s make sure that Git is installed on your computer. Open your shell on Mac or Linux, or on Windows open the command prompt and then type:\n                                               \n                                               which git (macOS, Linux)\n                                               where git (Windows)\n                                               \n                                               If there is no version of Git on your computer, please follow the Git installation instructions in the setup of this lesson to install Git now. Next open your shell or command prompt and type which git (macOS, Linux), or where git (Windows). Copy the path to the Git executable.\n                                               On one Windows computer which had GitHub Desktop installed on it, the path was: C:/Users/UserName/AppData/Local/GitHubDesktop/app-1.1.1/resources/app/git/cmd/git.exe\n                                               NOTE: The path on your computer will be somewhat different.\n                                               \n                                               \n                                               Tell RStudio where to find GitHub\n                                               In RStudio, go to the Tools menu &gt; Global Options &gt; Git/SVN and then browse to the Git executable you found in the command prompt or shell. Now restart RStudio. Note: Even if you have Git installed, you may need to accept the Xcode license if you are using macOS.\n                                               \n                                               \n                                               \n                                               Next, RStudio will ask which existing directory we want to use. Click “Browse…” and navigate to the correct directory, then click “Create Project”:\n                                               \n                                               Ta-da! We have created a new project in RStudio within the existing weather repository. Notice the vertical “Git” menu in the menu bar. RStudio has recognized that the current directory is a Git repository, and gives us a number of tools to use Git:\n                                               \n                                               To edit the existing files in the repository, we can click on them in the “Files” panel on the lower right. Now let’s add some additional information about Hummus:\n                                               \n                                               Once we have saved our edited files, we can use RStudio to commit the changes by clicking on “Commit…” in the Git menu:\n                                               \n                                               This will open a dialogue where we can select which files to commit (by checking the appropriate boxes in the “Staged” column), and enter a commit message (in the upper right panel). The icons in the “Status” column indicate the current status of each file. Clicking on a file shows information about changes in the lower panel (using output of git diff). Once everything is the way we want it, we click “Commit”:\n                                               \n                                               The changes can be pushed by selecting “Push Branch” from the Git menu. There are also options to pull from the remote repository, and to view the commit history:\n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               Are the Push/Pull Commands Grayed Out?\n                                               \n                                               \n                                               \n                                               Grayed out Push/Pull commands generally mean that RStudio doesn’t know the location of your remote repository (e.g. on GitHub). To fix this, open a terminal to the repository and enter the command: git push -u origin main. Then restart RStudio.\n                                               \n                                               \n                                               If we click on “History”, we can see a graphical version of what git log would tell us:\n                                               \n                                               RStudio creates a number of files that it uses to keep track of a project. We often don’t want to track these, in which case we add them to our .gitignore file:\n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               Tip: versioning disposable output\n                                               \n                                               \n                                               \n                                               Generally you do not want to version control disposable output (or read-only data). You should modify the .gitignore file to tell Git to ignore these files and directories.\n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               Challenge\n                                               \n                                               \n                                               Create a new directory within your project called graphs.\n                                               Modify the .gitignore so that the graphs directory is not version controlled.\n                                               \n                                               \n                                               Solution (Solution to Challenge). This can be done in Rstudio:\n                                               dir.create(\"./graphs\")\n                                               Then open up the .gitignore file from the right-hand panel of Rstudio and add graphs/ to the list of files to ignore.\n                                               \n                                               \n                                               \n                                               \n                                               There are many more features in the RStudio Git menu, but these should be enough to get you started!\n                                               \n                                               \n                                               \n                                               \n                                               \n                                               Keypoints\n                                               \n                                               \n                                               Using RStudio’s Git integration allows you to version control a project over time.\n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n      \n      \t\t\n      \t\t\t\n      \t\t\t\n              This lesson is subject to the &lt;(Code of Conduct)&gt;\n              Edit on GitHub\n              | Contributing\n              | Source\n      \t\t\t\tCite | Contact | About\n      \t\t\t\n      \t\t\t\n                      Materials licensed under &lt;({license})&gt; by the authors\n                      Template licensed under &lt;(CC-BY 4.0)&gt; by {template_authors}\n              Built with Quarto"
  },
  {
    "objectID": "episodes/12-citation.html",
    "href": "episodes/12-citation.html",
    "title": "Version Control with Git",
    "section": "",
    "text": "Skip to main content\n          \n            \n              \n                \n                                              \n            \n            \n              \n                \n                  \n                    \n                      \n                    \n                    \n                  \n                  \n                    \n                      \n                        \n                          \n                        \n                        Light\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Dark\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Auto\n                        \n                          \n                        \n                      \n                    \n                  \n                \n              \n              \n              \n                        \n                   Instructor View \n                \n                \n                  Learner View\n                \n                      \n            \n          \n          \n        \n        \n          \n            \n              \n              Menu\n            \n            \n              \n            \n            \n              Version Control with Git\n            \n            \n              \n            \n            \n              \n                \n                  \n                    Version Control with Git\n                  \n                \n                \n                \n                  \n                  Setup\n                \n                        \n                  Key Points\n                \n                \n                  Instructor Notes\n                \n                \n                  Extract All Images\n                \n                                  \n                    \n                      More \n                    \n                    \n                      \n\n                      Git Cheatsheets for Quick Reference\n                      Discussion\n                      FCM vs Git Cheat Sheet\n                      Quick Start Repository Guide            \n                  \n                      \n            \n            \n            \n            \n              \n                \n                \n              \n              \n                \n              \n            \n          \n        \n\n        \n          Version Control with Git\n        \n\n        \n          \n            0%\n          \n          \n            \n            \n          \n            \n      \n        \n          \n            \n              \n                \n              \n              \n                \n                  \n                    \n                      \n                        \n                          \n                        \n                        Toggle Theme\n                      \n                      \n                        \n                          \n                            \n                              \n                            \n                            Light\n                            \n                              \n                            \n                          \n                        \n                        \n                          \n                            \n                              \n                            \n                            Dark\n                            \n                              \n                            \n                          \n                        \n                        \n                          \n                            \n                              \n                            \n                            Auto\n                            \n                              \n                            \n                          \n                        \n                      \n                    \n                  \n                \n                \n                  \n                    \n                      \n                        \n                                            \n                            \n                               Learner View\n                            \n                          \n                          \n                            \n                              Instructor View\n                            \n                          \n                                          \n                      \n                    \n                  \n                  \n                  \n                \n\n                \n                  \n\n                    \n                      ../EPISODES\n                    \n                    \n\n                      \n                        \n\n                                \n                                  \n                                    \n                                      Summary and Setup\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      1. Automated Version Control\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      2. Setting Up Git\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      3. Creating a Repository\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      4. Branches\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      5. Tracking Changes\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      6. Exploring History\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      7. Reverting Changes\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      8. Ignoring Things\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      9. Break\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      10. Remotes in GitHub\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      11. Exploring GitHub\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      12. Exploring History on GitHub\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      13. Pull Requests\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      14. Configuring GitHub\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      15. End\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      16. Open Science\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      17. Licensing\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      18. Citation\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      19. Hosting\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      20. 'Using Git from RStudio'\n                                    \n                                  \n                                              \n                    \n                  \n                \n                \n\n                \n                          \n                    \n                      \n                        \n                          RESOURCES\n                        \n                      \n                      \n                        \n                          \n                            \n                            \n                              \n                              Setup\n                            \n                                                \n                              Key Points\n                            \n                            \n                              Instructor Notes\n                            \n                            \n                              Extract All Images\n                            \n                                                \n                          \n                        \n                      \n                    \n                  \n                  \n                  \n                  \n                  \n\n                  \n                              \n                \n              \n            \n          \n                        You may want to include a file called CITATION or CITATION.txt that describes how to reference your project; the one for Software Carpentry states:\n                                               To reference Software Carpentry in publications, please cite:\n\nGreg Wilson: \"Software Carpentry: Lessons Learned\". F1000Research,\n2016, 3:62 (doi: 10.12688/f1000research.3-62.v2).\n\n@online{wilson-software-carpentry-2016,\n  author      = {Greg Wilson},\n  title       = {Software Carpentry: Lessons Learned},\n  version     = {2},\n  date        = {2016-01-28},\n  url         = {http://f1000research.com/articles/3-62/v2},\n  doi         = {10.12688/f1000research.3-62.v2}\n}\n                                               More detailed advice, and other ways to make your code citable can be found at the Software Sustainability Institute blog and in:\n                                               Smith AM, Katz DS, Niemeyer KE, FORCE11 Software Citation Working Group. (2016) Software citation\nprinciples. [PeerJ Computer Science 2:e86](https://peerj.com/articles/cs-86/)\nhttps://doi.org/10.7717/peerj-cs.8\n                                               There is also an @software{... BibTeX entry type in case no “umbrella” citation like a paper or book exists for the project you want to make citable.\n                                               \n                                               \n                                               \n                                               \n                                               \n                                               Keypoints\n                                               \n                                               \n                                               Add a CITATION file to a repository to explain how you want your work cited.\n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n      \n      \t\t\n      \t\t\t\n      \t\t\t\n              This lesson is subject to the &lt;(Code of Conduct)&gt;\n              Edit on GitHub\n              | Contributing\n              | Source\n      \t\t\t\tCite | Contact | About\n      \t\t\t\n      \t\t\t\n                      Materials licensed under &lt;({license})&gt; by the authors\n                      Template licensed under &lt;(CC-BY 4.0)&gt; by {template_authors}\n              Built with Quarto"
  },
  {
    "objectID": "episodes/11-configuring-github.html",
    "href": "episodes/11-configuring-github.html",
    "title": "Version Control with Git",
    "section": "",
    "text": "Skip to main content\n          \n            \n              \n                \n                                              \n            \n            \n              \n                \n                  \n                    \n                      \n                    \n                    \n                  \n                  \n                    \n                      \n                        \n                          \n                        \n                        Light\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Dark\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Auto\n                        \n                          \n                        \n                      \n                    \n                  \n                \n              \n              \n              \n                        \n                   Instructor View \n                \n                \n                  Learner View"
  },
  {
    "objectID": "episodes/11-configuring-github.html#profile-settings",
    "href": "episodes/11-configuring-github.html#profile-settings",
    "title": "Version Control with Git",
    "section": "Profile Settings",
    "text": "Profile Settings\n                      You access your profile settings by navigating to: https://github.com/settings/profile\n                      Working down the page:\n                      \n                      Set your preferred name. This helps collaborators find you on GitHub.\n                      Set a public email, this also helps collaborators find your profile. To keep your email address private click on email settings, then tick the Keep my email addresses private checkbox.\n                      Set your pronouns.\n                      If you have a professional website you can add a link to the URL section.\n                      If you have an ORCID you can link your GitHub profile to your ID.\n                      If you would like to display your organisational affiliation add @&lt;organisation-name&gt; to the Company section.\n                      \n                      You can also set a profile picture on this page. Click on the green Update profile button when you have finished making changes.\n                      \n                      You can also make profile changes directly from your profile by clicking on the Edit profile button."
  },
  {
    "objectID": "episodes/11-configuring-github.html#configuring-notifications",
    "href": "episodes/11-configuring-github.html#configuring-notifications",
    "title": "Version Control with Git",
    "section": "Configuring Notifications",
    "text": "Configuring Notifications\n                      To configure general notification settings navigate to: https://github.com/settings/notifications\n                      Here you can choose a default email for notifications, and set up Custom routing. Custom routing allows you to specify different emails for each organisation you are a member of.\n                      In the Subscriptions section you can decide whether to receive notifications via GitHub, email, or both.\n                      \n                      Repository Notifications\n                      You can customise notifications on a repository level. Since you created the weather repository you are automatically watching All Activity. Click on the Unwatch dropdown to change your notification settings.\n                      \n                      The same dropdown will display Watch on repositories that do not belong to you."
  },
  {
    "objectID": "episodes/11-configuring-github.html#organisation-membership",
    "href": "episodes/11-configuring-github.html#organisation-membership",
    "title": "Version Control with Git",
    "section": "Organisation Membership",
    "text": "Organisation Membership\n                      If you are a member of an organisation you can make your membership of the organisation public or private by navigating to: https://github.com/orgs/&lt;organisation-name&gt;/people\n                      Search for your name and click on the right hand dropdown to change your organisation visibility.\n                      \n                      The default visibility setting will depend on your organisation. If you set the visibility to public your membership will appear on your profile, https://github.com/&lt;your-username&gt;/, near the bottom left of the screen."
  },
  {
    "objectID": "episodes/11-configuring-github.html#teams-membership",
    "href": "episodes/11-configuring-github.html#teams-membership",
    "title": "Version Control with Git",
    "section": "Teams Membership",
    "text": "Teams Membership\n                      One across from the People settings are the Teams settings: https://github.com/orgs/&lt;organisation-name&gt;/teams. You can leave, request to join, or if you are an admin add members to your GitHub team here. Teams let you manage access to repositories for a group of people all at once. Some organisations restrict the creation of GitHub teams to central admins.\n                      \n                      \n                      \n                      \n                      \n                      Keypoints\n                      \n                      \n                      You access your GitHub profile settings by navigating to: https://github.com/settings/profile.\n                      To configure general GitHub notification settings navigate to: https://github.com/settings/notifications.\n                      Click on the Watch or Unwatch repository dropdown button to change notifications for specific repositories."
  },
  {
    "objectID": "episodes/10-open.html",
    "href": "episodes/10-open.html",
    "title": "Version Control with Git",
    "section": "",
    "text": "Skip to main content\n          \n            \n              \n                \n                                              \n            \n            \n              \n                \n                  \n                    \n                      \n                    \n                    \n                  \n                  \n                    \n                      \n                        \n                          \n                        \n                        Light\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Dark\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Auto\n                        \n                          \n                        \n                      \n                    \n                  \n                \n              \n              \n              \n                        \n                   Instructor View \n                \n                \n                  Learner View\n                \n                      \n            \n          \n          \n        \n        \n          \n            \n              \n              Menu\n            \n            \n              \n            \n            \n              Version Control with Git\n            \n            \n              \n            \n            \n              \n                \n                  \n                    Version Control with Git\n                  \n                \n                \n                \n                  \n                  Setup\n                \n                        \n                  Key Points\n                \n                \n                  Instructor Notes\n                \n                \n                  Extract All Images\n                \n                                  \n                    \n                      More \n                    \n                    \n                      \n\n                      Git Cheatsheets for Quick Reference\n                      Discussion\n                      FCM vs Git Cheat Sheet\n                      Quick Start Repository Guide            \n                  \n                      \n            \n            \n            \n            \n              \n                \n                \n              \n              \n                \n              \n            \n          \n        \n\n        \n          Version Control with Git\n        \n\n        \n          \n            0%\n          \n          \n            \n            \n          \n            \n      \n        \n          \n            \n              \n                \n              \n              \n                \n                  \n                    \n                      \n                        \n                          \n                        \n                        Toggle Theme\n                      \n                      \n                        \n                          \n                            \n                              \n                            \n                            Light\n                            \n                              \n                            \n                          \n                        \n                        \n                          \n                            \n                              \n                            \n                            Dark\n                            \n                              \n                            \n                          \n                        \n                        \n                          \n                            \n                              \n                            \n                            Auto\n                            \n                              \n                            \n                          \n                        \n                      \n                    \n                  \n                \n                \n                  \n                    \n                      \n                        \n                                            \n                            \n                               Learner View\n                            \n                          \n                          \n                            \n                              Instructor View\n                            \n                          \n                                          \n                      \n                    \n                  \n                  \n                  \n                \n\n                \n                  \n\n                    \n                      ../EPISODES\n                    \n                    \n\n                      \n                        \n\n                                \n                                  \n                                    \n                                      Summary and Setup\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      1. Automated Version Control\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      2. Setting Up Git\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      3. Creating a Repository\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      4. Branches\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      5. Tracking Changes\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      6. Exploring History\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      7. Reverting Changes\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      8. Ignoring Things\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      9. Break\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      10. Remotes in GitHub\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      11. Exploring GitHub\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      12. Exploring History on GitHub\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      13. Pull Requests\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      14. Configuring GitHub\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      15. End\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      16. Open Science\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      17. Licensing\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      18. Citation\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      19. Hosting\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      20. 'Using Git from RStudio'\n                                    \n                                  \n                                              \n                    \n                  \n                \n                \n\n                \n                          \n                    \n                      \n                        \n                          RESOURCES\n                        \n                      \n                      \n                        \n                          \n                            \n                            \n                              \n                              Setup\n                            \n                                                \n                              Key Points\n                            \n                            \n                              Instructor Notes\n                            \n                            \n                              Extract All Images\n                            \n                                                \n                          \n                        \n                      \n                    \n                  \n                  \n                  \n                  \n                  \n\n                  \n                              \n                \n              \n            \n          \n                                        \n                      Check your Organisation’s Policy\n                      Your organisation most likely has policies governing their intellectual property. The guidelines below are general. You should consult your organisational policy on publishing and open source before making any decisions.\n                      \n                      \n                      The opposite of “open” isn’t “closed”. The opposite of “open” is “broken”.\n                      -– John Wilbanks\n                      \n                      Free sharing of information might be the ideal in science, but the reality is often more complicated. Normal practice today looks something like this:\n                      \n                      A scientist collects some data and stores it on a machine that is occasionally backed up by their department.\n                      They then write or modify a few small programs (which also reside on the machine) to analyze that data.\n                      Once they have some results, they write them up and submit a paper. The scientist might include their data – a growing number of journals require this – but they probably don’t include the code.\n                      Time passes.\n                      The journal sends the scientist reviews written anonymously by a handful of other people in their field. The scientist revises the paper to satisfy the reviewers, during which time they might also modify the scripts they wrote earlier, and resubmits.\n                      More time passes.\n                      The paper is eventually published. It might include a link to an online copy of the data, but the paper itself will be behind a paywall: only people who have personal or institutional access will be able to read it.\n                      \n                      For a growing number of scientists, though, the process looks like this:\n                      \n                      The data that the scientist collects is stored in an open access repository like figshare or Zenodo, possibly as soon as it’s collected, and given its own Digital Object Identifier (DOI). Or the data was already published and is stored in Dryad.\n                      The scientist creates a new repository on GitHub to hold their work.\n                      During analysis, they push changes to their scripts (and possibly some output files) to that repository. The scientist also uses the repository for their paper; that repository is then the hub for collaboration with colleagues.\n                      When they are happy with the state of the paper, the scientist posts a version to arXiv or some other preprint server to invite feedback from peers.\n                      Based on that feedback, they may post several revisions before finally submitting the paper to a journal.\n                      The published paper includes links to the preprint and to the code and data repositories, which makes it much easier for other scientists to use their work as starting point for their own research.\n                      \n                      This open model accelerates discovery: the more open work is, the more widely it is cited and re-used. However, people who want to work this way need to make some decisions about what exactly “open” means and how to do it. You can find more on the different aspects of Open Science in this book.\n                      This is one of the (many) reasons we teach version control. When used diligently, it answers the “how” question by acting as a shareable electronic lab notebook for computational work:\n                      \n                      The conceptual stages of your work are documented, including who did what and when. Every step is stamped with an identifier (the commit ID) that is for most intents and purposes unique.\n                      You can tie documentation of rationale, ideas, and other intellectual work directly to the changes that spring from them.\n                      You can refer to what you used in your research to obtain your computational results in a way that is unique and recoverable.\n                      With a version control system such as Git, the entire history of the repository is easy to archive for perpetuity.\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Making Code Citable\n                      \n                      \n                      \n                      Anything that is hosted in a version control repository (data, code, papers, etc.) can be turned into a citable object. You’ll learn how to do this in the later episode on Citation.\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      How Reproducible Is My Work?\n                      \n                      Ask one of your labmates to reproduce a result you recently obtained using only what they can find in your papers or on the web. Try to do the same for one of their results, then try to do it for a result from a lab you work with.\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      How to Find an Appropriate Data Repository?\n                      \n                      Surf the internet for a couple of minutes and check out the data repositories mentioned above: Figshare, Zenodo, Dryad. Depending on your field of research, you might find community-recognized repositories that are well-known in your field. You might also find useful these data repositories recommended by Nature. Discuss with your neighbor which data repository you might want to approach for your current project and explain why.\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      How to Track Large Data or Image Files using Git?\n                      \n                      Large data or image files such as .md5 or .psd file types can be tracked within a GitHub repository using the Git Large File Storage open source extension tool. This tool automatically uploads large file contents to a remote server and replaces the file with a text pointer within the GitHub repository.\n                      Try downloading and installing the Git Large File Storage extension tool, then add tracking of a large file to your GitHub repository. Ask a colleague to clone your repository and describe what they see when they access that large file.\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Keypoints\n                      \n                      \n                      Open scientific work is more useful and more highly cited than closed.\n                      \n                      \n                      \n                      \n                      \n                      \n      \n      \t\t\n      \t\t\t\n      \t\t\t\n              This lesson is subject to the &lt;(Code of Conduct)&gt;\n              Edit on GitHub\n              | Contributing\n              | Source\n      \t\t\t\tCite | Contact | About\n      \t\t\t\n      \t\t\t\n                      Materials licensed under &lt;({license})&gt; by the authors\n                      Template licensed under &lt;(CC-BY 4.0)&gt; by {template_authors}\n              Built with Quarto"
  },
  {
    "objectID": "episodes/09-conflict.html",
    "href": "episodes/09-conflict.html",
    "title": "Version Control with Git",
    "section": "",
    "text": "Skip to main content\n          \n            \n              \n                \n                                              \n            \n            \n              \n                \n                  \n                    \n                      \n                    \n                    \n                  \n                  \n                    \n                      \n                        \n                          \n                        \n                        Light\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Dark\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Auto\n                        \n                          \n                        \n                      \n                    \n                  \n                \n              \n              \n              \n                        \n                   Instructor View \n                \n                \n                  Learner View\n                \n                      \n            \n          \n          \n        \n        \n          \n            \n              \n              Menu\n            \n            \n              \n            \n            \n              Version Control with Git\n            \n            \n              \n            \n            \n              \n                \n                  \n                    Version Control with Git\n                  \n                \n                \n                \n                  \n                  Setup\n                \n                        \n                  Key Points\n                \n                \n                  Instructor Notes\n                \n                \n                  Extract All Images\n                \n                                  \n                    \n                      More \n                    \n                    \n                      \n\n                      Git Cheatsheets for Quick Reference\n                      Discussion\n                      FCM vs Git Cheat Sheet\n                      Quick Start Repository Guide            \n                  \n                      \n            \n            \n            \n            \n              \n                \n                \n              \n              \n                \n              \n            \n          \n        \n\n        \n          Version Control with Git\n        \n\n        \n          \n            0%\n          \n          \n            \n            \n          \n            \n      \n        \n          \n            \n              \n                \n              \n              \n                \n                  \n                    \n                      \n                        \n                          \n                        \n                        Toggle Theme\n                      \n                      \n                        \n                          \n                            \n                              \n                            \n                            Light\n                            \n                              \n                            \n                          \n                        \n                        \n                          \n                            \n                              \n                            \n                            Dark\n                            \n                              \n                            \n                          \n                        \n                        \n                          \n                            \n                              \n                            \n                            Auto\n                            \n                              \n                            \n                          \n                        \n                      \n                    \n                  \n                \n                \n                  \n                    \n                      \n                        \n                                            \n                            \n                               Learner View\n                            \n                          \n                          \n                            \n                              Instructor View\n                            \n                          \n                                          \n                      \n                    \n                  \n                  \n                  \n                \n\n                \n                  \n\n                    \n                      ../EPISODES\n                    \n                    \n\n                      \n                        \n\n                                \n                                  \n                                    \n                                      Summary and Setup\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      1. Automated Version Control\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      2. Setting Up Git\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      3. Creating a Repository\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      4. Branches\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      5. Tracking Changes\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      6. Exploring History\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      7. Reverting Changes\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      8. Ignoring Things\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      9. Break\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      10. Remotes in GitHub\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      11. Exploring GitHub\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      12. Exploring History on GitHub\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      13. Pull Requests\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      14. Configuring GitHub\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      15. End\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      16. Open Science\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      17. Licensing\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      18. Citation\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      19. Hosting\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      20. 'Using Git from RStudio'\n                                    \n                                  \n                                              \n                    \n                  \n                \n                \n\n                \n                          \n                    \n                      \n                        \n                          RESOURCES\n                        \n                      \n                      \n                        \n                          \n                            \n                            \n                              \n                              Setup\n                            \n                                                \n                              Key Points\n                            \n                            \n                              Instructor Notes\n                            \n                            \n                              Extract All Images\n                            \n                                                \n                          \n                        \n                      \n                    \n                  \n                  \n                  \n                  \n                  \n\n                  \n                              \n                \n              \n            \n          \n                        As soon as people can work in parallel, they’ll likely step on each other’s toes. This will even happen with a single person: if we are working on a piece of software on both our laptop and a server in the lab, we could make different changes to each copy. Version control helps us manage these conflicts by giving us tools to resolve overlapping changes.\n                                               To see how we can resolve conflicts, we must first create one. The file forecast.md currently looks like this in both partners’ copies of our weather repository:\n                                               $ cat forecast.md\n                                               # Forecast\n## Today\nCloudy with a chance of sun.\nMild temperatures around 16 °C.\n## Tomorrow\nMorning rainbows followed by light showers.\n                                               Let’s add a line to the collaborator’s copy only:\n                                               $ nano forecast.md\n$ cat forecast.md\n                                               # Forecast\n## Today\nCloudy with a chance of sun.\nMild temperatures around 16 °C.\n## Tomorrow\nMorning rainbows followed by light showers.\nIce forming overnight.\n                                               and then push the change to GitHub:\n                                               $ git add forecast.md\n$ git commit -m \"Add ice forecast for tomorrow evening\"\n                                               [main 5ae9631] Add ice forecast for tomorrow evening\n 1 file changed, 1 insertion(+)\n                                               $ git push origin main\n                                               Enumerating objects: 5, done.\nCounting objects: 100% (5/5), done.\nDelta compression using up to 8 threads\nCompressing objects: 100% (3/3), done.\nWriting objects: 100% (3/3), 331 bytes | 331.00 KiB/s, done.\nTotal 3 (delta 2), reused 0 (delta 0)\nremote: Resolving deltas: 100% (2/2), completed with 2 local objects.\nTo https://github.com/mo-eormerod/weather.git\n   29aba7c..dabb4c8  main -&gt; main\n                                               Now let’s have the owner make a different change to their copy without updating from GitHub:\n                                               $ nano forecast.md\n$ cat forecast.md\n                                               # Forecast\n## Today\nCloudy with a chance of sun.\nMild temperatures around 16 °C.\n## Tomorrow\nMorning rainbows followed by light showers.\nSnow forming overnight.\n                                               We can commit the change locally:\n                                               $ git add forecast.md\n$ git commit -m \"Add snow forecast for tomorrow evening\"\n                                               [main 07ebc69] Add snow forecast for tomorrow evening\n 1 file changed, 1 insertion(+)\n                                               but Git won’t let us push it to GitHub:\n                                               $ git push origin main\n                                               To https://github.com/mo-eormerod/weather.git\n ! [rejected]        main -&gt; main (fetch first)\nerror: failed to push some refs to 'https://github.com/mo-eormerod/weather.git'\nhint: Updates were rejected because the remote contains work that you do\nhint: not have locally. This is usually caused by another repository pushing\nhint: to the same ref. You may want to first integrate the remote changes\nhint: (e.g., 'git pull ...') before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details.\n                                               \n                                               Git rejects the push because it detects that the remote repository has new updates that have not been incorporated into the local branch. What we have to do is pull the changes from GitHub, merge them into the copy we’re currently working in, and then push that. Let’s start by pulling:\n                                               $ git pull origin main\n                                               remote: Enumerating objects: 5, done.\nremote: Counting objects: 100% (5/5), done.\nremote: Compressing objects: 100% (1/1), done.\nremote: Total 3 (delta 2), reused 3 (delta 2), pack-reused 0\nUnpacking objects: 100% (3/3), done.\nFrom https://github.com/mo-eormerod/weather\n * branch            main     -&gt; FETCH_HEAD\n    29aba7c..dabb4c8  main     -&gt; origin/main\nAuto-merging forecast.md\nCONFLICT (content): Merge conflict in forecast.md\nAutomatic merge failed; fix conflicts and then commit the result.\n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               You may need to tell Git what to do\n                                               \n                                               \n                                               \n                                               If you see the below in your output, Git is asking what it should do.\n                                               hint: You have divergent branches and need to specify how to reconcile them.\nhint: You can do so by running one of the following commands sometime before\nhint: your next pull:\nhint:\nhint:   git config pull.rebase false  # merge (the default strategy)\nhint:   git config pull.rebase true   # rebase\nhint:   git config pull.ff only       # fast-forward only\nhint:\nhint: You can replace \"git config\" with \"git config --global\" to set a default\nhint: preference for all repositories. You can also pass --rebase, --no-rebase,\nhint: or --ff-only on the command line to override the configured default per\nhint: invocation.\n                                               In newer versions of Git it gives you the option of specifying different behaviours when a pull would merge divergent branches. In our case we want ‘the default strategy’. To use this strategy run the following command to select it as the default thing git should do.\n                                               $ git config pull.rebase false\n                                               Then attempt the pull again.\n                                               $ git pull origin main\n                                               \n                                               \n                                               The git pull command updates the local repository to include those changes already included in the remote repository. After the changes from remote branch have been fetched, Git detects that changes made to the local copy overlap with those made to the remote repository, and therefore refuses to merge the two versions to stop us from trampling on our previous work. The conflict is marked in in the affected file:\n                                               $ cat forecast.md\n                                               # Forecast\n## Today\nCloudy with a chance of sun.\nMild temperatures around 16 °C.\n## Tomorrow\nMorning rainbows followed by light showers.\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\nSnow forming overnight.\n=======\nIce forming overnight.\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; dabb4c8c450e8475aee9b14b4383acc99f42af1d\n                                               Our change is preceded by &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD. Git has then inserted ======= as a separator between the conflicting changes and marked the end of the content downloaded from GitHub with &gt;&gt;&gt;&gt;&gt;&gt;&gt;. (The string of letters and digits after that marker identifies the commit we’ve just downloaded.)\n                                               It is now up to us to edit this file to remove these markers and reconcile the changes. We can do anything we want: keep the change made in the local repository, keep the change made in the remote repository, write something new to replace both, or get rid of the change entirely. Let’s replace both so that the file looks like this:\n                                               $ cat forecast.md\n                                               # Forecast\n## Today\nCloudy with a chance of sun.\nMild temperatures around 16 °C.\n## Tomorrow\nMorning rainbows followed by light showers.\nSnow forming overnight with a chance of icy patches.\n                                               To finish merging, we add forecast.md to the changes being made by the merge and then commit:\n                                               $ git add forecast.md\n$ git status\n                                               On branch main\nAll conflicts fixed but you are still merging.\n  (use \"git commit\" to conclude merge)\n\nChanges to be committed:\n\n    modified:   forecast.md\n\n                                               $ git commit -m \"Merge changes from GitHub\"\n                                               [main 2abf2b1] Merge changes from GitHub\n                                               Now we can push our changes to GitHub:\n                                               $ git push origin main\n                                               Enumerating objects: 10, done.\nCounting objects: 100% (10/10), done.\nDelta compression using up to 8 threads\nCompressing objects: 100% (6/6), done.\nWriting objects: 100% (6/6), 645 bytes | 645.00 KiB/s, done.\nTotal 6 (delta 4), reused 0 (delta 0)\nremote: Resolving deltas: 100% (4/4), completed with 2 local objects.\nTo https://github.com/mo-eormerod/weather.git\n   dabb4c8..2abf2b1  main -&gt; main\n                                               Git keeps track of what we’ve merged with what, so we don’t have to fix things by hand again when the collaborator who made the first change pulls again:\n                                               $ git pull origin main\n                                               remote: Enumerating objects: 10, done.\nremote: Counting objects: 100% (10/10), done.\nremote: Compressing objects: 100% (2/2), done.\nremote: Total 6 (delta 4), reused 6 (delta 4), pack-reused 0\nUnpacking objects: 100% (6/6), done.\nFrom https://github.com/mo-eormerod/weather\n * branch            main     -&gt; FETCH_HEAD\n    dabb4c8..2abf2b1  main     -&gt; origin/main\nUpdating dabb4c8..2abf2b1\nFast-forward\n forecast.md | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n                                               We get the merged file:\n                                               $ cat forecast.md\n                                               # Forecast\n## Today\nCloudy with a chance of sun.\nMild temperatures around 16 °C.\n## Tomorrow\nMorning rainbows followed by light showers.\nSnow forming overnight with a chance of icy patches.\n                                               We don’t need to merge again because Git knows someone has already done that.\n                                               Git’s ability to resolve conflicts is very useful, but conflict resolution costs time and effort, and can introduce errors if conflicts are not resolved correctly. If you find yourself resolving a lot of conflicts in a project, consider these technical approaches to reducing them:\n                                               \n                                               Pull from upstream more frequently, especially before starting new work\n                                               Use topic branches to segregate work, merging to main when complete\n                                               Make smaller more atomic commits\n                                               Push your work when it is done and encourage your team to do the same to reduce work in progress and, by extension, the chance of having conflicts\n                                               Where logically appropriate, break large files into smaller ones so that it is less likely that two authors will alter the same file simultaneously\n                                               \n                                               Conflicts can also be minimized with project management strategies:\n                                               \n                                               Clarify who is responsible for what areas with your collaborators\n                                               Discuss what order tasks should be carried out in with your collaborators so that tasks expected to change the same lines won’t be worked on simultaneously\n                                               If the conflicts are stylistic churn (e.g. tabs vs. spaces), establish a project convention that is governing and use code style tools (e.g. htmltidy, perltidy, rubocop, etc.) to enforce, if necessary\n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               Solving Conflicts that You Create\n                                               \n                                               Clone the repository created by your instructor. Add a new file to it, and modify an existing file (your instructor will tell you which one). When asked by your instructor, pull her changes from the repository to create a conflict, then resolve it.\n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               Conflicts on Non-textual files\n                                               \n                                               What does Git do when there is a conflict in an image or some other non-textual file that is stored in version control?\n                                               \n                                               Solution (Solution). Let’s try it. Suppose you take a picture of the television forecast and call it forecast.jpg.\n                                               If you do not have an image file of forecast available, you can create a dummy binary file like this:\n                                               $ head --bytes 1024 /dev/urandom &gt; forecast.jpg\n$ ls -lh forecast.jpg\n                                               -rw-r--r-- 1 mo-eormerod 57095 1.0K Mar  8 20:24 forecast.jpg\n                                               ls shows us that this created a 1-kilobyte file. It is full of random bytes read from the special file, /dev/urandom.\n                                               Now, suppose you add forecast.jpg to your repository:\n                                               $ git add forecast.jpg\n$ git commit -m \"Add picture of forecast\"\n                                               [main 8e4115c] Add picture of forecast\n 1 file changed, 0 insertions(+), 0 deletions(-)\n create mode 100644 forecast.jpg\n                                               Suppose that Jimmy has added a similar picture in the meantime. His is a picture of a forecast from Chile, but it is also called forecast.jpg. When you try to push, you get a familiar message:\n                                               $ git push origin main\n                                               To https://github.com/mo-eormerod/weather.git\n ! [rejected]        main -&gt; main (fetch first)\nerror: failed to push some refs to 'https://github.com/mo-eormerod/weather.git'\nhint: Updates were rejected because the remote contains work that you do\nhint: not have locally. This is usually caused by another repository pushing\nhint: to the same ref. You may want to first integrate the remote changes\nhint: (e.g., 'git pull ...') before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details.\n                                               We’ve learned that we must pull first and resolve any conflicts:\n                                               $ git pull origin main\n                                               When there is a conflict on an image or other binary file, git prints a message like this:\n                                               $ git pull origin main\nremote: Counting objects: 3, done.\nremote: Compressing objects: 100% (3/3), done.\nremote: Total 3 (delta 0), reused 0 (delta 0)\nUnpacking objects: 100% (3/3), done.\nFrom https://github.com/mo-eormerod/weather.git\n * branch            main     -&gt; FETCH_HEAD\n   6a67967..439dc8c  main     -&gt; origin/main\nwarning: Cannot merge binary files: forecast.jpg (HEAD vs. 439dc8c08869c342438f6dc4a2b615b05b93c76e)\nAuto-merging forecast.jpg\nCONFLICT (add/add): Merge conflict in forecast.jpg\nAutomatic merge failed; fix conflicts and then commit the result.\n                                               The conflict message here is mostly the same as it was for forecast.md, but there is one key additional line:\n                                               warning: Cannot merge binary files: forecast.jpg (HEAD vs. 439dc8c08869c342438f6dc4a2b615b05b93c76e)\n                                               Git cannot automatically insert conflict markers into an image as it does for text files. So, instead of editing the image file, we must check out the version we want to keep. Then we can add and commit this version.\n                                               On the key line above, Git has conveniently given us commit identifiers for the two versions of forecast.jpg. Our version is HEAD, and Jimmy’s version is 439dc8c0.... If we want to use our version, we can use git checkout:\n                                               $ git checkout HEAD forecast.jpg\n$ git add forecast.jpg\n$ git commit -m \"Use image of just the local forecast\"\n                                               [main 21032c3] Use image of just the local forecast\n                                               If instead we want to use Jimmy’s version, we can use git checkout with Jimmy’s commit identifier, 439dc8c0:\n                                               $ git checkout 439dc8c0 forecast.jpg\n$ git add forecast.jpg\n$ git commit -m \"Use image of just the local forecast\"\n                                               [main da21b34] Use image of forecast with nachos instead of just forecast\n                                               We can also keep both images. The catch is that we cannot keep them under the same name. But, we can check out each version in succession and rename it, then add the renamed versions. First, check out each image and rename it:\n                                               $ git checkout HEAD forecast.jpg\n$ git mv forecast.jpg forecast-only.jpg\n$ git checkout 439dc8c0 forecast.jpg\n$ mv forecast.jpg forecast-chile.jpg\n                                               Then, remove the old forecast.jpg and add the two new files:\n                                               $ git rm forecast.jpg\n$ git add forecast-only.jpg\n$ git add forecast-chile.jpg\n$ git commit -m \"Use two images: local forecast and Chile forecast\"\n                                               [main 94ae08c] Use two images: local forecast and Chile forecast\n 2 files changed, 0 insertions(+), 0 deletions(-)\n create mode 100644 forecast-chile.jpg\n rename forecast.jpg =&gt; forecast-only.jpg (100%)\n                                               Now both images of forecast are checked into the repository, and forecast.jpg no longer exists.\n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               A Typical Work Session\n                                               \n                                               You sit down at your computer to work on a shared project that is tracked in a remote Git repository. During your work session, you take the following actions, but not in this order:\n                                               \n                                               Make changes by appending the number 100 to a text file numbers.txt\n                                               Update remote repository to match the local repository\n                                               Celebrate your success with some fancy beverage(s)\n                                               Update local repository to match the remote repository\n                                               Stage changes to be committed\n                                               Commit changes to the local repository\n                                               \n                                               In what order should you perform these actions to minimize the chances of conflicts? Put the commands above in order in the action column of the table below. When you have the order right, see if you can write the corresponding commands in the command column. A few steps are populated to get you started.\n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               order\n                                               action . . . . . . . . . .\n                                               command . . . . . . . . . .\n                                               \n                                               \n                                               \n                                               \n                                               1\n                                               \n                                               \n                                               \n                                               \n                                               2\n                                               \n                                               echo 100 &gt;&gt; numbers.txt\n                                               \n                                               \n                                               3\n                                               \n                                               \n                                               \n                                               \n                                               4\n                                               \n                                               \n                                               \n                                               \n                                               5\n                                               \n                                               \n                                               \n                                               \n                                               6\n                                               Celebrate!\n                                               \n                                               \n                                               \n                                               \n                                               \n                                               Solution (Solution). \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               order\n                                               action . . . . . .\n                                               command . . . . . . . . . . . . . . . . . . .\n                                               \n                                               \n                                               \n                                               \n                                               1\n                                               Update local\n                                               git pull origin main\n                                               \n                                               \n                                               2\n                                               Make changes\n                                               echo 100 &gt;&gt; numbers.txt\n                                               \n                                               \n                                               3\n                                               Stage changes\n                                               git add numbers.txt\n                                               \n                                               \n                                               4\n                                               Commit changes\n                                               git commit -m \"Add 100 to numbers.txt\"\n                                               \n                                               \n                                               5\n                                               Update remote\n                                               git push origin main\n                                               \n                                               \n                                               6\n                                               Celebrate!\n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               Keypoints\n                                               \n                                               \n                                               Conflicts occur when two or more people change the same lines of the same file.\n                                               The version control system does not allow people to overwrite each other’s changes blindly, but highlights conflicts so that they can be resolved.\n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n      \n      \t\t\n      \t\t\t\n      \t\t\t\n              This lesson is subject to the &lt;(Code of Conduct)&gt;\n              Edit on GitHub\n              | Contributing\n              | Source\n      \t\t\t\tCite | Contact | About\n      \t\t\t\n      \t\t\t\n                      Materials licensed under &lt;({license})&gt; by the authors\n                      Template licensed under &lt;(CC-BY 4.0)&gt; by {template_authors}\n              Built with Quarto"
  },
  {
    "objectID": "episodes/08-github-interface.html",
    "href": "episodes/08-github-interface.html",
    "title": "Version Control with Git",
    "section": "",
    "text": "Skip to main content\n          \n            \n              \n                \n                                              \n            \n            \n              \n                \n                  \n                    \n                      \n                    \n                    \n                  \n                  \n                    \n                      \n                        \n                          \n                        \n                        Light\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Dark\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Auto\n                        \n                          \n                        \n                      \n                    \n                  \n                \n              \n              \n              \n                        \n                   Instructor View \n                \n                \n                  Learner View\n                \n                      \n            \n          \n          \n        \n        \n          \n            \n              \n              Menu\n            \n            \n              \n            \n            \n              Version Control with Git\n            \n            \n              \n            \n            \n              \n                \n                  \n                    Version Control with Git\n                  \n                \n                \n                \n                  \n                  Setup\n                \n                        \n                  Key Points\n                \n                \n                  Instructor Notes\n                \n                \n                  Extract All Images\n                \n                                  \n                    \n                      More \n                    \n                    \n                      \n\n                      Git Cheatsheets for Quick Reference\n                      Discussion\n                      FCM vs Git Cheat Sheet\n                      Quick Start Repository Guide            \n                  \n                      \n            \n            \n            \n            \n              \n                \n                \n              \n              \n                \n              \n            \n          \n        \n\n        \n          Version Control with Git\n        \n\n        \n          \n            0%\n          \n          \n            \n            \n          \n            \n      \n        \n          \n            \n              \n                \n              \n              \n                \n                  \n                    \n                      \n                        \n                          \n                        \n                        Toggle Theme\n                      \n                      \n                        \n                          \n                            \n                              \n                            \n                            Light\n                            \n                              \n                            \n                          \n                        \n                        \n                          \n                            \n                              \n                            \n                            Dark\n                            \n                              \n                            \n                          \n                        \n                        \n                          \n                            \n                              \n                            \n                            Auto\n                            \n                              \n                            \n                          \n                        \n                      \n                    \n                  \n                \n                \n                  \n                    \n                      \n                        \n                                            \n                            \n                               Learner View\n                            \n                          \n                          \n                            \n                              Instructor View\n                            \n                          \n                                          \n                      \n                    \n                  \n                  \n                  \n                \n\n                \n                  \n\n                    \n                      ../EPISODES\n                    \n                    \n\n                      \n                        \n\n                                \n                                  \n                                    \n                                      Summary and Setup\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      1. Automated Version Control\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      2. Setting Up Git\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      3. Creating a Repository\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      4. Branches\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      5. Tracking Changes\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      6. Exploring History\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      7. Reverting Changes\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      8. Ignoring Things\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      9. Break\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      10. Remotes in GitHub\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      11. Exploring GitHub\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      12. Exploring History on GitHub\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      13. Pull Requests\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      14. Configuring GitHub\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      15. End\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      16. Open Science\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      17. Licensing\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      18. Citation\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      19. Hosting\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      20. 'Using Git from RStudio'\n                                    \n                                  \n                                              \n                    \n                  \n                \n                \n\n                \n                          \n                    \n                      \n                        \n                          RESOURCES\n                        \n                      \n                      \n                        \n                          \n                            \n                            \n                              \n                              Setup\n                            \n                                                \n                              Key Points\n                            \n                            \n                              Instructor Notes\n                            \n                            \n                              Extract All Images\n                            \n                                                \n                          \n                        \n                      \n                    \n                  \n                  \n                  \n                  \n                  \n\n                  \n                              \n                \n              \n            \n          \n                                        GitHub has a lot of features so we’ll take some time to learn how to navigate the interface. Your instructor will guide you through navigating each section.\n                      \n                      This is the GitHub homepage. On the left you can quickly navigate to a repository or use the green New button to create a new repository. If you are in an organisation that requires single sign on to see organisational repositories you will be prompted with a large green button at the top of this page to sign in.\n                      To access your settings click on your round profile icon in the top right hand corner and select the Settings option.\n                      \n                      1 Exploring the interface for a repository\n                      The following image shows an example repository. In fact it is the repository containing the material for this lesson. Link to the git-novice repository.\n                      \n                      Let’s break it down into parts:\n                      \n                      When you navigate to a repository the top nav will display the organisation the repository belongs to, swcarpentry, and the name of the repository, git-novice, in the top left. In the top right you have access to GitHubs powerful search, buttons to open Issues and Pull requests (which will be explained later), and the notifications and profile icon on the far right.\n                      \n                      This next section displays tabs to navigate around your repository and various buttons which allow you to watch for changes to a repository and star a project. Starring a repo makes it easier to find from your homepage and helps repository owners gauge usage of their code.\n                      \n                      This section displays the code contained on the default branch, in this case main. It also displays useful stats about the repository on the right. The green &lt;&gt; Code button lets you check out a local copy of the repository.\n                      \n                      \n                      \n                      \n                      \n                      Keypoints\n                      \n                      \n                      Quickly navigate to a repository in your browser using the url pattern: https://github.com/&lt;username or organisation&gt;/&lt;repo name&gt;\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n      \n      \t\t\n      \t\t\t\n      \t\t\t\n              This lesson is subject to the &lt;(Code of Conduct)&gt;\n              Edit on GitHub\n              | Contributing\n              | Source\n      \t\t\t\tCite | Contact | About\n      \t\t\t\n      \t\t\t\n                      Materials licensed under &lt;({license})&gt; by the authors\n                      Template licensed under &lt;(CC-BY 4.0)&gt; by {template_authors}\n              Built with Quarto"
  },
  {
    "objectID": "episodes/07-github.html",
    "href": "episodes/07-github.html",
    "title": "Version Control with Git",
    "section": "",
    "text": "Skip to main content\n          \n            \n              \n                \n                                              \n            \n            \n              \n                \n                  \n                    \n                      \n                    \n                    \n                  \n                  \n                    \n                      \n                        \n                          \n                        \n                        Light\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Dark\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Auto\n                        \n                          \n                        \n                      \n                    \n                  \n                \n              \n              \n              \n                        \n                   Instructor View \n                \n                \n                  Learner View"
  },
  {
    "objectID": "episodes/07-github.html#create-a-remote-repository",
    "href": "episodes/07-github.html#create-a-remote-repository",
    "title": "Version Control with Git",
    "section": "1. Create a remote repository",
    "text": "1. Create a remote repository\n                      Log in to GitHub, then click on the icon in the top right corner to create a new repository called weather:\n                      \n                      Name your repository “weather” and then click “Create Repository”.\n                      Note: Since this repository will be connected to a local repository, it needs to be empty. Leave “Initialize this repository with a README” unchecked, and keep “None” as options for both “Add .gitignore” and “Add a license.” See the “GitHub License and README files” exercise below for a full explanation of why the repository needs to be empty.\n                      \n                      \n                      \n                      \n                        \n                        \n                        Repository Visibility\n                        \n                      \n                      \n                      \n                      Here we have chosen to make our repository public. The visibility of your repository depends on which option you choose:\n                      \n                      Private: only you\n                      Internal (organisations only): read permissions to anyone in the organisation\n                      Public: read permissions to anyone\n                      \n                      Some organisations will restrict the creation of public repositories so you may find their default is internal. If your project deals with sensitive material then create a private repository.\n                      \n                      \n                      \n                      \n                      As soon as the repository is created, GitHub displays a page with a URL and some information on how to configure your local repository. Ignore the suggested commands for now as we will run these later.\n                      \n                      This effectively does the following on GitHub’s servers:\n                      $ mkdir weather\n$ cd weather\n$ git init\n                      If you remember back to the earlier episode where we added and committed our earlier work on forecast.md, we had a diagram of the local repository which looked like this:\n                      \n                      Now that we have two repositories, we need a diagram like this:\n                      \n                      Note that our local repository still contains our earlier work on forecast.md, but the remote repository on GitHub appears empty as it doesn’t contain any files yet."
  },
  {
    "objectID": "episodes/07-github.html#connect-local-to-remote-repository",
    "href": "episodes/07-github.html#connect-local-to-remote-repository",
    "title": "Version Control with Git",
    "section": "2. Connect local to remote repository",
    "text": "2. Connect local to remote repository\n                      Now we connect the two repositories. We do this by making the GitHub repository a remote for the local repository. The home page of the repository on GitHub includes the URL string we need to identify it:\n                      \n                      Click on the ‘SSH’ link to change the protocol from HTTPS to SSH.\n                      \n                      \n                      \n                      \n                      \n                      \n                      HTTPS vs. SSH\n                      \n                      \n                      \n                      We use SSH here because, while it requires some additional configuration, it is a security protocol widely used by many applications. The steps below describe SSH at a minimum level for GitHub.\n                      \n                      \n                      Copy that URL from the browser, go into the local weather repository, and run this command:\n                      $ git remote add origin git@github.com:mo-eormerod/weather.git\n                      Make sure to use the URL for your repository: the only difference should be your username instead of mo-eormerod.\n                      origin is a local name used to refer to the remote repository. It could be called anything, but origin is a convention that is often used by default in Git and GitHub, so it’s helpful to stick with this unless there’s a reason not to.\n                      We can check that the command has worked by running git remote -v:\n                      $ git remote -v\n                      origin   git@github.com:mo-eormerod/weather.git (fetch)\norigin   git@github.com:mo-eormerod/weather.git (push)\n                      We’ll discuss remotes in more detail in the next episode, while talking about how they might be used for collaboration."
  },
  {
    "objectID": "episodes/07-github.html#ssh-background-and-setup",
    "href": "episodes/07-github.html#ssh-background-and-setup",
    "title": "Version Control with Git",
    "section": "3. SSH Background and Setup",
    "text": "3. SSH Background and Setup\n                      \n                      \n                      \n                        \n                        \n                        Instructor Note\n                        \n                      \n                      \n                      \n                      Some learners may have set up an ssh key already. If they have a key with this name: ~/.ssh/id_ed25519_github and can successfully authenticate with ssh -T git@github.com they can skip this section.\n                      If their ssh key name does not match the one above we strongly recommend they follow the instructions below.\n                      Those who are skipping this section can revisit the challenges in earlier episodes (yellow callouts with a lightning bolt) or read through the discussion notes.\n                      \n                      \n                      \n                      \n                      Before you can connect to a remote repository, you need to set up a way for your computer to authenticate with GitHub so it knows it’s you trying to connect to the remote repository.\n                      We are going to set up the method that is commonly used by many different services to authenticate access on the command line. This method is called Secure Shell Protocol (SSH). SSH is a cryptographic network protocol that allows secure communication between computers using an otherwise insecure network.\n                      SSH uses what is called a key pair. This is two keys that work together to validate access. One key is publicly known and called the public key, and the other key called the private key is kept private. Very descriptive names.\n                      You can think of the public key as a padlock, and only you have the key (the private key) to open it. You use the public key where you want a secure method of communication, such as your GitHub account. You give this padlock, or public key, to GitHub and say “lock the communications to my account with this so that only computers that have my private key can unlock communications and send git commands as my GitHub account.”\n                      What we will do now is the minimum required to set up the SSH keys and add the public key to a GitHub account. The first thing we are going to do is check if this has already been done on the computer you’re on. Because generally speaking, this setup only needs to happen once and then you can forget about it.\n                      \n                      \n                      \n                      \n                      \n                      \n                      Keeping your keys secure\n                      \n                      \n                      \n                      You shouldn’t really forget about your SSH keys, since they keep your account secure. It’s good practice to audit your secure shell keys every so often. Especially if you are using multiple computers to access your account.\n                      \n                      \n                      We will run the list command to check what key pairs already exist on your computer.\n                      ls -al ~/.ssh\n                      Your output is going to look a little different depending on whether or not SSH has ever been set up on the computer you are using.\n                      If you have not set up SSH on your computer, you will see\n                      ls: cannot access '~/.ssh': No such file or directory\n                      If SSH has been set up on the computer you’re using, the public and private key pairs will be listed. The file names are either id_ed25519/id_ed25519.pub or id_rsa/id_rsa.pub depending on how the key pairs were set up.\n                      \n                      3.1 Create an SSH key pair\n                      To create an SSH key pair use the following command, where the -t option specifies which type of algorithm to use:\n                      $ ssh-keygen -t ed25519 -C \"e.ormerod@mo-weather.uk\"\n                      The -C flag attaches a comment to the key. The comment has no effect on your key, you may place anything here to help you remember what the key is for. It makes no difference whether you use a public email or your no-reply private GitHub email in the comment.\n                      If you are using a legacy system that doesn’t support the Ed25519 algorithm, use: $ ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"\n                      Generating public/private ed25519 key pair.\nEnter file in which to save the key (~/.ssh/id_ed25519):\n                      We want to store our key in the file ~/.ssh/id_ed25519_github.\n                      Created directory '~/.ssh'.\nEnter passphrase (empty for no passphrase):\n                      Now you will be prompted for a passphrase. If the computer you work on is shared between multiple users you should set a passphrase. Be sure to use something memorable or save your passphrase somewhere, as there is no “reset my password” option. If you do not share your computer there is no need to set a passphrase so just press Enter.\n                      Note that, when typing a passphrase on a terminal, there won’t be any visual feedback of your typing. This is normal: your passphrase will be recorded even if you see nothing changing on your screen.\n                      Enter same passphrase again:\n                      After entering the same passphrase a second time, we receive the confirmation\n                      Your identification has been saved in ~/.ssh/id_ed25519_github\nYour public key has been saved in ~/.ssh/id_ed25519_github.pub\nThe key fingerprint is:\nSHA256:SMSPIStNyA00KPxuYu94KpZgRAYjgt9g4BA4kFy3g1o e.ormerod@mo-weather.uk\nThe key's randomart image is:\n+--[ED25519 256]--+\n|^B== o.          |\n|%*=.*.+          |\n|+=.E =.+         |\n| .=.+.o..        |\n|....  . S        |\n|.+ o             |\n|+ =              |\n|.o.o             |\n|oo+.             |\n+----[SHA256]-----+\n                      The “identification” is actually the private key. You should never share it. The public key is appropriately named. The “key fingerprint” is a shorter version of a public key.\n                      Now that we have generated the SSH keys, we will find the SSH files when we check.\n                      ls -al ~/.ssh\n                      drwxr-xr-x 1 Eleanor   197121   0 Jul 16 14:48 ./\ndrwxr-xr-x 1 Eleanor   197121   0 Jul 16 14:48 ../\n-rw-r--r-- 1 Eleanor   197121 419 Jul 16 14:48 id_ed25519_github\n-rw-r--r-- 1 Eleanor   197121 106 Jul 16 14:48 id_ed25519_github.pub\n                      \n                      \n                      3.2 Copy the public key to GitHub\n                      Now we have a SSH key pair and we can run this command to check if GitHub can read our authentication.\n                      ssh -T git@github.com\n                      The authenticity of host 'github.com (192.30.255.112)' can't be established.\nRSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.\nThis key is not known by any other names\nAre you sure you want to continue connecting (yes/no/[fingerprint])? y\nPlease type 'yes', 'no' or the fingerprint: yes\nWarning: Permanently added 'github.com' (RSA) to the list of known hosts.\ngit@github.com: Permission denied (publickey).\n                      Right, we forgot that we need to give GitHub our public key!\n                      \n                      \n                      \n                        \n                        \n                        Checking the GitHub RSA Key\n                        \n                      \n                      \n                      \n                      Ideally before connecting to a new host, like github.com in the output above, you would check the RSA key fingerprint matches the expected value. GitHub publishes their public SSH key fingerprints for you to check against.\n                      \n                      \n                      \n                      \n                      First, we need to copy the public key. Be sure to include the .pub at the end, otherwise you’re looking at the private key.\n                      cat ~/.ssh/id_ed25519_github.pub\n                      ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIDmRA3d51X0uu9wXek559gfn6UFNF69yZjChyBIU2qKI e.ormerod@mo-weather.uk\n                      Now, going to GitHub.com, click on your profile icon in the top right corner to get the drop-down menu. Click “Settings”, then on the settings page, click “SSH and GPG keys”, on the left side “Access” menu. Click the “New SSH key” button on the right side. Now, you can add the title (normally an ID for the computer storing the keys such as “Work Linux”), paste your SSH key into the field, and click the “Add SSH key” to complete the setup.\n                      \n                      \n                      \n                      \n                      \n                      \n                      Single sign-on (SSO)\n                      \n                      \n                      \n                      If you are part of an organisation that requires single sign-on (SSO) to access their GitHub organisation you will need to authorise the key for use in the organisation.\n                      Next to the newly created SSH key in the GitHub settings click on “Configure SSO”. Find the organisation in the list and click on “Authorise”.\n                      \n                      \n                      Now that we’ve set that up, let’s check our authentication again from the command line.\n                      $ ssh -T git@github.com\n                      Hi Eleanor! You've successfully authenticated, but GitHub does not provide shell access.\n                      Good! This output confirms that the SSH key works as intended. We are now ready to push our work to the remote repository.\n                      \n                      \n                      \n                        \n                        \n                        Troubleshooting SSH Setup\n                        \n                      \n                      \n                      \n                      If your new key failed to connect you may need to alter your ssh config.\n                      \n                      Create the ~/.ssh/config file if it doesn’t exist\n                      Add the following to the file:\n                      \n                      Host github.com\n  IdentityFile ~/.ssh/id_ed25519_github\n                      This explicitly states which key to use for github.com and is needed if you have many SSH keys already for other hosts."
  },
  {
    "objectID": "episodes/07-github.html#push-local-changes-to-a-remote",
    "href": "episodes/07-github.html#push-local-changes-to-a-remote",
    "title": "Version Control with Git",
    "section": "4. Push local changes to a remote",
    "text": "4. Push local changes to a remote\n                      Now that authentication is setup, we can return to the local repository. Ensure you are on the main branch:\n                      $ git switch main\n                      This command will push our main branch on our local repository to the repository on GitHub:\n                      $ git push\n                      fatal: The current branch main has no upstream branch.\nTo push the current branch and set the remote as upstream, use\n\n    git push --set-upstream origin main\n\n                      Git is telling us it doesn’t know what branch we want to push our local main branch to on GitHub. We can tell Git this by setting the upstream origin branch to also be named main.\n                      If you entered a passphrase when creating an shh key you will be prompted for it.\n                      Enumerating objects: 16, done.\nCounting objects: 100% (16/16), done.\nDelta compression using up to 4 threads\nCompressing objects: 100% (13/13), done.\nWriting objects: 100% (16/16), 1.69 KiB | 216.00 KiB/s, done.\nTotal 16 (delta 1), reused 0 (delta 0), pack-reused 0\nremote: Resolving deltas: 100% (1/1), done.\nTo github.com:mo-eormerod/weather.git\n * [new branch]      main -&gt; main\nbranch 'main' set up to track 'origin/main'.\n                      \n                      \n                      \n                      \n                      \n                      \n                      Automatically set the upstream branch\n                      \n                      \n                      \n                      You can get git to automatically set the upstream branch. This avoids having to run git push with the --set-upstream flag the first time you push from a new branch.\n                      Change your git config using:\n                      $ git config --global push.autoSetupRemote true\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Proxy\n                      \n                      \n                      \n                      If the network you are connected to uses a proxy, there is a chance that your last command failed with “Could not resolve hostname” as the error message. To solve this issue, you need to tell Git about the proxy:\n                      $ git config --global http.proxy http://user:password@proxy.url\n$ git config --global https.proxy https://user:password@proxy.url\n                      When you connect to another network that doesn’t use a proxy, you will need to tell Git to disable the proxy using:\n                      $ git config --global --unset http.proxy\n$ git config --global --unset https.proxy\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Password Managers\n                      \n                      \n                      \n                      If your operating system has a password manager configured, git push will try to use it when it needs your username and password. For example, this is the default behavior for Git Bash on Windows. If you want to type your username and password at the terminal instead of using a password manager, type:\n                      $ unset SSH_ASKPASS\n                      in the terminal, before you run git push. Despite the name, Git uses SSH_ASKPASS for all credential entry, so you may want to unset SSH_ASKPASS whether you are using Git via SSH or https.\n                      You may also want to add unset SSH_ASKPASS at the end of your ~/.bashrc to make Git default to using the terminal for usernames and passwords.\n                      \n                      \n                      Our local and remote repositories are now in this state:\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      The ‘-u’ Flag\n                      \n                      \n                      \n                      You may see a -u option used with git push in some documentation. This option is synonymous with the --set-upstream-to option for the git branch command, and is used to associate the current branch with a remote branch so that the git push command can be used without any arguments. To do this, simply use git push -u origin main once the remote has been set up.\n                      Here, we are telling Git to push the branch to the origin (GitHub) repositories main branch.\n                      \n                      \n                      We can pull changes from the remote repository to the local one as well:\n                      $ git pull\n                      Already up-to-date.\n                      Pulling has no effect in this case because the two repositories are already synchronized. If someone else had pushed some changes to the repository on GitHub, though, this command would download them to our local repository.\n                      \n                      \n                      \n                      \n                      \n                      GitHub GUI\n                      \n                      Browse to your weather repository on GitHub. Under the Code tab, find and click on the text that says “XX commits” (where “XX” is some number). Hover over, and click on, the three buttons to the right of each commit. What information can you gather/explore from these buttons? How would you get that same information in the shell?\n                      \n                      Solution (Solution). The left-most button (with the picture of a clipboard) copies the full identifier of the commit to the clipboard. In the shell, git log will show you the full commit identifier for each commit.\n                      When you click on the middle button, you’ll see all of the changes that were made in that particular commit. Green shaded lines indicate additions and red ones removals. In the shell we can do the same thing with git diff. In particular, git diff ID1..ID2 where ID1 and ID2 are commit identifiers (e.g. git diff a3bf1e5..041e637) will show the differences between those two commits.\n                      The right-most button lets you view all of the files in the repository at the time of that commit. To do this in the shell, we’d need to checkout the repository at that particular time. We can do this with git checkout ID where ID is the identifier of the commit we want to look at. If we do this, we need to remember to put the repository back to the right state afterwards!\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Uploading files directly in GitHub browser\n                      \n                      \n                      \n                      Github also allows you to skip the command line and upload files directly to your repository without having to leave the browser. There are two options. First you can click the “Upload files” button in the toolbar at the top of the file tree. Or, you can drag and drop files from your desktop onto the file tree. You can read more about this on this GitHub page.\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      GitHub Timestamp\n                      \n                      Create a remote repository on GitHub. Push the contents of your local repository to the remote. Make changes to your local repository and push these changes. Go to the repo you just created on GitHub and check the timestamps of the files. How does GitHub record times, and why?\n                      \n                      Solution (Solution). GitHub displays timestamps in a human readable relative format (i.e. “22 hours ago” or “three weeks ago”). However, if you hover over the timestamp, you can see the exact time at which the last change to the file occurred.\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Push vs. Commit\n                      \n                      In this episode, we introduced the “git push” command. How is “git push” different from “git commit”?\n                      \n                      Solution (Solution). When we push changes, we’re interacting with a remote repository to update it with the changes we’ve made locally (often this corresponds to sharing the changes we’ve made with others). Commit only updates your local repository.\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      GitHub License and README files\n                      \n                      In this episode we learned about creating a remote repository on GitHub, but when you initialized your GitHub repo, you didn’t add a README.md or a license file. If you had, what do you think would have happened when you tried to link your local and remote repositories?\n                      \n                      Solution (Solution). In this case, we’d see a merge conflict due to unrelated histories. When GitHub creates a README.md file, it performs a commit in the remote repository. When you try to pull the remote repository to your local repository, Git detects that they have histories that do not share a common origin and refuses to merge.\n                      $ git pull origin main\n                      warning: no common commits\nremote: Enumerating objects: 3, done.\nremote: Counting objects: 100% (3/3), done.\nremote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0\nUnpacking objects: 100% (3/3), done.\nFrom https://github.com/mo-eormerod/weather\n * branch            main     -&gt; FETCH_HEAD\n * [new branch]      main     -&gt; origin/main\nfatal: refusing to merge unrelated histories\n                      You can force git to merge the two repositories with the option --allow-unrelated-histories. Be careful when you use this option and carefully examine the contents of local and remote repositories before merging.\n                      $ git pull --allow-unrelated-histories origin main\n                      From https://github.com/mo-eormerod/weather\n * branch            main     -&gt; FETCH_HEAD\nMerge made by the 'recursive' strategy.\nREADME.md | 1 +\n1 file changed, 1 insertion(+)\ncreate mode 100644 README.md\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Keypoints\n                      \n                      \n                      A local Git repository can be connected to one or more remote repositories.\n                      Use the SSH protocol to connect to remote repositories.\n                      git push copies changes from a local repository to a remote repository.\n                      git pull copies changes from a remote repository to a local repository."
  },
  {
    "objectID": "episodes/06-ignore.html",
    "href": "episodes/06-ignore.html",
    "title": "Version Control with Git",
    "section": "",
    "text": "Skip to main content\n          \n            \n              \n                \n                                              \n            \n            \n              \n                \n                  \n                    \n                      \n                    \n                    \n                  \n                  \n                    \n                      \n                        \n                          \n                        \n                        Light\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Dark\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Auto\n                        \n                          \n                        \n                      \n                    \n                  \n                \n              \n              \n              \n                        \n                   Instructor View \n                \n                \n                  Learner View\n                \n                      \n            \n          \n          \n        \n        \n          \n            \n              \n              Menu\n            \n            \n              \n            \n            \n              Version Control with Git\n            \n            \n              \n            \n            \n              \n                \n                  \n                    Version Control with Git\n                  \n                \n                \n                \n                  \n                  Setup\n                \n                        \n                  Key Points\n                \n                \n                  Instructor Notes\n                \n                \n                  Extract All Images\n                \n                                  \n                    \n                      More \n                    \n                    \n                      \n\n                      Git Cheatsheets for Quick Reference\n                      Discussion\n                      FCM vs Git Cheat Sheet\n                      Quick Start Repository Guide            \n                  \n                      \n            \n            \n            \n            \n              \n                \n                \n              \n              \n                \n              \n            \n          \n        \n\n        \n          Version Control with Git\n        \n\n        \n          \n            0%\n          \n          \n            \n            \n          \n            \n      \n        \n          \n            \n              \n                \n              \n              \n                \n                  \n                    \n                      \n                        \n                          \n                        \n                        Toggle Theme\n                      \n                      \n                        \n                          \n                            \n                              \n                            \n                            Light\n                            \n                              \n                            \n                          \n                        \n                        \n                          \n                            \n                              \n                            \n                            Dark\n                            \n                              \n                            \n                          \n                        \n                        \n                          \n                            \n                              \n                            \n                            Auto\n                            \n                              \n                            \n                          \n                        \n                      \n                    \n                  \n                \n                \n                  \n                    \n                      \n                        \n                                            \n                            \n                               Learner View\n                            \n                          \n                          \n                            \n                              Instructor View\n                            \n                          \n                                          \n                      \n                    \n                  \n                  \n                  \n                \n\n                \n                  \n\n                    \n                      ../EPISODES\n                    \n                    \n\n                      \n                        \n\n                                \n                                  \n                                    \n                                      Summary and Setup\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      1. Automated Version Control\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      2. Setting Up Git\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      3. Creating a Repository\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      4. Branches\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      5. Tracking Changes\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      6. Exploring History\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      7. Reverting Changes\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      8. Ignoring Things\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      9. Break\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      10. Remotes in GitHub\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      11. Exploring GitHub\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      12. Exploring History on GitHub\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      13. Pull Requests\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      14. Configuring GitHub\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      15. End\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      16. Open Science\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      17. Licensing\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      18. Citation\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      19. Hosting\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      20. 'Using Git from RStudio'\n                                    \n                                  \n                                              \n                    \n                  \n                \n                \n\n                \n                          \n                    \n                      \n                        \n                          RESOURCES\n                        \n                      \n                      \n                        \n                          \n                            \n                            \n                              \n                              Setup\n                            \n                                                \n                              Key Points\n                            \n                            \n                              Instructor Notes\n                            \n                            \n                              Extract All Images\n                            \n                                                \n                          \n                        \n                      \n                    \n                  \n                  \n                  \n                  \n                  \n\n                  \n                              \n                \n              \n            \n          \n                        What if we have files that we do not want Git to track for us, like backup files created by our editor or intermediate files created during data analysis? Let’s create a few dummy files:\n                                               $ mkdir data\n$ touch a.png b.png c.png data/a.csv data/b.nc\n                                               and see what Git says:\n                                               $ git status\n                                               On branch forecast\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n\n    a.png\n    b.png\n    c.png\n    data/\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n                                               Putting these files under version control would be a waste of disk space. What’s worse, having them all listed could distract us from changes that actually matter, so let’s tell Git to ignore them.\n                                               We do this by creating a file in the root directory of our project called .gitignore:\n                                               $ nano .gitignore\n$ cat .gitignore\n                                               *.png\ndata/\n                                               These patterns tell Git to ignore any file whose name ends in .png and everything in the data directory. (If any of these files were already being tracked, Git would continue to track them.)\n                                               Once we have created this file, the output of git status is much cleaner:\n                                               $ git status\n                                               On branch forecast\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n\n    .gitignore\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n                                               The only thing Git notices now is the newly-created .gitignore file. You might think we wouldn’t want to track it, but everyone we’re sharing our repository with will probably want to ignore the same things that we’re ignoring. Let’s add and commit .gitignore:\n                                               $ git add .gitignore\n$ git commit -m \"Ignore png files and the data folder\"\n$ git status\n                                               On branch forecast\nnothing to commit, working tree clean\n                                               As a bonus, using .gitignore helps us avoid accidentally adding files to the repository that we don’t want to track:\n                                               $ git add a.png\n                                               The following paths are ignored by one of your .gitignore files:\na.png\nUse -f if you really want to add them.\n                                               If we really want to override our ignore settings, we can use git add -f to force Git to add something. For example, git add -f a.csv. We can also always see the status of ignored files if we want:\n                                               $ git status --ignored\n                                               On branch forecast\nIgnored files:\n (use \"git add -f &lt;file&gt;...\" to include in what will be committed)\n\n        a.png\n        b.png\n        c.png\n        data/\n\nnothing to commit, working tree clean\n                                               \n                                               \n                                               \n                                               \n                                               \n                                               Ignoring Nested Files\n                                               \n                                               Given a directory structure that looks like:\n                                               data/csv\ndata/plots\n                                               How would you ignore only data/plots and not data/csv?\n                                               \n                                               Solution (Solution). If you only want to ignore the contents of data/plots, you can change your .gitignore to ignore only the /plots/ subfolder by adding the following line to your .gitignore:\n                                               data/plots/\n                                               This line will ensure only the contents of data/plots is ignored, and not the contents of data/csv.\n                                               As with most programming issues, there are a few alternative ways that one may ensure this ignore rule is followed. The “Ignoring Nested Files: Variation” exercise has a slightly different directory structure that presents an alternative solution. Further, the discussion page has more detail on ignore rules.\n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               Including Specific Files\n                                               \n                                               How would you ignore all .png files in your root directory except for final.png? Hint: Find out what ! (the exclamation point operator) does\n                                               \n                                               Solution (Solution). You would add the following two lines to your .gitignore:\n                                               *.png           # ignore all png files\n!final.png      # except final.png\n                                               The exclamation point operator will include a previously excluded entry.\n                                               Note if you’ve previously committed .png files they will not be ignored with this new rule. Only future additions of .png files added to the root directory will be ignored.\n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               Ignoring Nested Files: Variation\n                                               \n                                               Given a directory structure that looks similar to the earlier Nested Files exercise, but with a slightly different directory structure:\n                                               data/csv\ndata/images\ndata/plots\ndata/analysis\n                                               How would you ignore all of the contents in the data folder, but not data/csv?\n                                               Hint: think a bit about how you created an exception with the ! operator before.\n                                               \n                                               Solution (Solution). If you want to ignore the contents of data/ but not those of data/csv/, you can change your .gitignore to ignore the contents of data folder, but create an exception for the contents of the data/csv subfolder. Your .gitignore would look like this:\n                                               data/*               # ignore everything in data folder\n!data/csv/          # do not ignore data/csv/ contents\n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               Ignoring all data Files in a Directory\n                                               \n                                               Assuming you have an empty .gitignore file, and given a directory structure that looks like:\n                                               data/csv/global/temperature/a.dat\ndata/csv/global/temperature/b.dat\ndata/csv/global/temperature/c.dat\ndata/csv/global/temperature/info.txt\ndata/plots\n                                               What’s the shortest .gitignore rule you could write to ignore all .dat files in data/csv/global/temperature? Do not ignore the info.txt.\n                                               \n                                               Solution (Solution). Appending data/csv/global/temperature/*.dat will match every file in data/csv/global/temperature that ends with .dat. The file data/csv/global/temperature/info.txt will not be ignored.\n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               Ignoring all data Files in the repository\n                                               \n                                               Let us assume you have many .csv files in different subdirectories of your repository. For example, you might have:\n                                               results/a.csv\ndata/experiment_1/b.csv\ndata/experiment_2/c.csv\ndata/experiment_2/variation_1/d.csv\n                                               How do you ignore all the .csv files, without explicitly listing the names of the corresponding folders?\n                                               \n                                               Solution (Solution). In the .gitignore file, write:\n                                               **/*.csv\n                                               This will ignore all the .csv files, regardless of their position in the directory tree. You can still include some specific exception with the exclamation point operator.\n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               The Order of Rules\n                                               \n                                               Given a .gitignore file with the following contents:\n                                               *.csv\n!*.csv\n                                               What will be the result?\n                                               \n                                               Solution (Solution). The ! modifier will negate an entry from a previously defined ignore pattern. Because the !*.csv entry negates all of the previous .csv files in the .gitignore, none of them will be ignored, and all .csv files will be tracked.\n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               Log Files\n                                               \n                                               You wrote a script that creates many intermediate log-files of the form log_01, log_02, log_03, etc. You want to keep them but you do not want to track them through Git.\n                                               \n                                               Write one .gitignore entry that excludes files of the form log_01, log_02, etc.\n                                               Test your “ignore pattern” by creating some dummy files of the form log_01, etc.\n                                               You find that the file log_01 is very important after all, add it to the tracked files without changing the .gitignore again.\n                                               Discuss with your neighbor what other types of files could reside in your directory that you do not want to track and thus would exclude via .gitignore.\n                                               \n                                               \n                                               Solution (Solution). \n                                               \n                                               append either log_* or log* as a new entry in your .gitignore\n                                               track log_01 using git add -f log_01\n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               Keypoints\n                                               \n                                               \n                                               The .gitignore file tells Git what files to ignore.\n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n      \n      \t\t\n      \t\t\t\n      \t\t\t\n              This lesson is subject to the &lt;(Code of Conduct)&gt;\n              Edit on GitHub\n              | Contributing\n              | Source\n      \t\t\t\tCite | Contact | About\n      \t\t\t\n      \t\t\t\n                      Materials licensed under &lt;({license})&gt; by the authors\n                      Template licensed under &lt;(CC-BY 4.0)&gt; by {template_authors}\n              Built with Quarto"
  },
  {
    "objectID": "episodes/04-changes.html",
    "href": "episodes/04-changes.html",
    "title": "Version Control with Git",
    "section": "",
    "text": "Skip to main content\n          \n            \n              \n                \n                                              \n            \n            \n              \n                \n                  \n                    \n                      \n                    \n                    \n                  \n                  \n                    \n                      \n                        \n                          \n                        \n                        Light\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Dark\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Auto\n                        \n                          \n                        \n                      \n                    \n                  \n                \n              \n              \n              \n                        \n                   Instructor View \n                \n                \n                  Learner View\n                \n                      \n            \n          \n          \n        \n        \n          \n            \n              \n              Menu\n            \n            \n              \n            \n            \n              Version Control with Git\n            \n            \n              \n            \n            \n              \n                \n                  \n                    Version Control with Git\n                  \n                \n                \n                \n                  \n                  Setup\n                \n                        \n                  Key Points\n                \n                \n                  Instructor Notes\n                \n                \n                  Extract All Images\n                \n                                  \n                    \n                      More \n                    \n                    \n                      \n\n                      Git Cheatsheets for Quick Reference\n                      Discussion\n                      FCM vs Git Cheat Sheet\n                      Quick Start Repository Guide            \n                  \n                      \n            \n            \n            \n            \n              \n                \n                \n              \n              \n                \n              \n            \n          \n        \n\n        \n          Version Control with Git\n        \n\n        \n          \n            0%\n          \n          \n            \n            \n          \n            \n      \n        \n          \n            \n              \n                \n              \n              \n                \n                  \n                    \n                      \n                        \n                          \n                        \n                        Toggle Theme\n                      \n                      \n                        \n                          \n                            \n                              \n                            \n                            Light\n                            \n                              \n                            \n                          \n                        \n                        \n                          \n                            \n                              \n                            \n                            Dark\n                            \n                              \n                            \n                          \n                        \n                        \n                          \n                            \n                              \n                            \n                            Auto\n                            \n                              \n                            \n                          \n                        \n                      \n                    \n                  \n                \n                \n                  \n                    \n                      \n                        \n                                            \n                            \n                               Learner View\n                            \n                          \n                          \n                            \n                              Instructor View\n                            \n                          \n                                          \n                      \n                    \n                  \n                  \n                  \n                \n\n                \n                  \n\n                    \n                      ../EPISODES\n                    \n                    \n\n                      \n                        \n\n                                \n                                  \n                                    \n                                      Summary and Setup\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      1. Automated Version Control\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      2. Setting Up Git\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      3. Creating a Repository\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      4. Branches\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      5. Tracking Changes\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      6. Exploring History\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      7. Reverting Changes\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      8. Ignoring Things\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      9. Break\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      10. Remotes in GitHub\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      11. Exploring GitHub\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      12. Exploring History on GitHub\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      13. Pull Requests\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      14. Configuring GitHub\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      15. End\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      16. Open Science\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      17. Licensing\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      18. Citation\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      19. Hosting\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      20. 'Using Git from RStudio'\n                                    \n                                  \n                                              \n                    \n                  \n                \n                \n\n                \n                          \n                    \n                      \n                        \n                          RESOURCES\n                        \n                      \n                      \n                        \n                          \n                            \n                            \n                              \n                              Setup\n                            \n                                                \n                              Key Points\n                            \n                            \n                              Instructor Notes\n                            \n                            \n                              Extract All Images\n                            \n                                                \n                          \n                        \n                      \n                    \n                  \n                  \n                  \n                  \n                  \n\n                  \n                              \n                \n              \n            \n          \n                                        First let’s make sure we’re still on the right branch. You should be on the forecast branch:\n                      $ git switch forecast\n                      Let’s create a file called forecast.md that contains a basic weather forecast. We’ll use nano to edit the file; you can use whatever editor you like. In particular, this does not have to be the core.editor you set globally earlier. But remember, the steps to create create or edit a new file will depend on the editor you choose (it might not be nano). For a refresher on text editors, check out “Which Editor?” in The Unix Shell lesson.\n                      $ nano forecast.md\n                      Type the text below into the forecast.md file:\n                      # Forecast\n\n## Today\n\nCloudy with a chance of pizza.\n                      Save the file and exit your editor. Next, let’s verify that the file was properly created by running the list command (ls):\n                      $ ls\n                      forecast.md\n                      forecast.md contains three lines, which we can see by running:\n                      $ cat forecast.md\n                      # Forecast\n\n## Today\n\nCloudy with a chance of pizza.\n                      If we check the status of our project again, Git tells us that it’s noticed the new file:\n                      $ git status\n                      On branch forecast\n\nNo commits yet\n\nUntracked files:\n   (use \"git add &lt;file&gt;...\" to include in what will be committed)\n\n    forecast.md\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n                      The “untracked files” message means that there’s a file in the directory that Git isn’t keeping track of. We can tell Git to track a file using git add:\n                      $ git add forecast.md\n                      and then check that the right thing happened:\n                      $ git status\n                      On branch forecast\n\nNo commits yet\n\nChanges to be committed:\n  (use \"git rm --cached &lt;file&gt;...\" to unstage)\n\n    new file:   forecast.md\n                      Git now knows that it’s supposed to keep track of forecast.md, but it hasn’t recorded these changes as a commit yet. To get it to do that, we need to run one more command:\n                      $ git commit -m \"Create a md file with the forecast\"\n                      [forecast f22b25e] Create a md file with the forecast\n 1 file changed, 5 insertions(+)\n create mode 100644 forecast.md\n                      When we run git commit, Git takes everything we have told it to save by using git add and stores a copy permanently inside the special .git directory. This permanent copy is called a commit (or revision) and its short identifier is f22b25e. Your commit may have another identifier.\n                      We use the -m flag (for “message”) to record a short, descriptive, and specific comment that will help us remember later on what we did and why. If we just run git commit without the -m option, Git will launch nano (or whatever other editor we configured as core.editor) so that we can write a longer message.\n                      Good commit messages start with a brief (&lt;50 characters) statement about the changes made in the commit. Generally, the message should complete the sentence “If applied, this commit will” . If you want to go into more detail, add a blank line between the summary line and your additional notes. Use this additional space to explain why you made changes and/or what their impact will be.\n                      \n                      \n                      \n                        \n                        \n                        Instructor Note\n                        \n                      \n                      \n                      \n                      The whatthecommit site can be used to show example commit messages, good and bad, pulled from public repos on GitHub. You should note that there is no safe for work filter. Some of the commit messages may include inappropriate language.\n                      \n                      \n                      \n                      \n                      \n                      Using git add .\n                      Using git add . or the -a flag with git commit will add all your unstaged changes in your repository.\n                      This might include things you didn’t mean to add. Always use git status to check your changes before adding them. We recommend you avoid using git add . and git commit -a.\n                      \n                      \n                      \n                      \n                        \n                        \n                        FCM Comparison\n                        \n                      \n                      \n                      \n                      Running git add followed by git commit is equivalent to:\n                      $ fcm commit\n                      \n                      \n                      \n                      \n                      Our repository now looks like this:\n                      \n                      \n                      \n                      \n                      \n                          gitGraph\n                              accDescr {A Git graph showing the root-commit on the main branch and a new forecast branch, branching off the root-commit, with one commit.}\n                              commit id: 'Initial commit'\n                              branch forecast\n                              commit id: 'Create a md file with the forecast'\n                      \n                      \n                      \n                      \n                      \n                      \n                      If we run git status now:\n                      $ git status\n                      On branch forecast\nnothing to commit, working tree clean\n                      it tells us everything is up to date.\n                      \n                      \n                      \n                      \n                      \n                      \n                      Where Are My Changes?\n                      \n                      \n                      \n                      If we run ls at this point, we will still see just our two files, README.md and forecast.md. That’s because Git saves information about files’ history in the special .git directory mentioned earlier so that our filesystem doesn’t become cluttered (and so that we can’t accidentally edit or delete an old version).\n                      \n                      \n                      Now suppose you want to more information to the file. (Again, we’ll edit with nano and then cat the file to show its contents; you may use a different editor, and don’t need to cat.)\n                      $ nano forecast.md\n$ cat forecast.md\n                      # Forecast\n\n## Today\n\nCloudy with a chance of pizza.\n\n## Tomorrow\n\nMorning rainbows followed by light showers.\n                      When we run git status now, it tells us that a file it already knows about has been modified:\n                      $ git status\n                      On branch forecast\nChanges not staged for commit:\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\n  (use \"git restore &lt;file&gt;...\" to discard changes in working directory)\n\n    modified:   forecast.md\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n                      The last line is the key phrase: “no changes added to commit”. We have changed this file, but we haven’t told Git we will want to save those changes (which we do with git add) nor have we saved them (which we do with git commit). So let’s do that now. It is good practice to always review our changes before saving them. We do this using git diff. This shows us the differences between the current state of the file and the most recently saved version:\n                      $ git diff\n                      diff --git a/forecast.md b/forecast.md\nindex df0654a..315bf3a 100644\n--- a/forecast.md\n+++ b/forecast.md\n@@ -3,3 +3,7 @@\n ## Today\n \n Cloudy with a chance of pizza.\n+\n+## Tomorrow\n+\n+Morning rainbows followed by light showers.\n                      The output is cryptic because it is actually a series of commands for tools like editors and patch telling them how to reconstruct one file given the other. If we break it down into pieces:\n                      \n                      The first line tells us that Git is producing output similar to the Unix diff command comparing the old and new versions of the file.\n                      The second line tells exactly which versions of the file Git is comparing; df0654a and 315bf3a are unique computer-generated labels for those versions.\n                      The third and fourth lines once again show the name of the file being changed.\n                      The remaining lines are the most interesting, they show us the actual differences and the lines on which they occur. In particular, the + marker in the first column shows where we added a line.\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      git difftool\n                      \n                      \n                      \n                      git-difftool lets you compare and edit files using your preferred diff tool.\n                      $ git difftool -g\n                      The -g flag launches the default gui diff tool. To change defaults:\n                      git config --global diff.tool &lt;tool&gt;\ngit config --global diff.guitool &lt;gui-tool&gt;\ngit config --global difftool.prompt false\ngit config --global difftool.guiDefault auto\n                      Where &lt;tool&gt; is a diffing tool such as Vim, &lt;gui-tool&gt; is your preferred graphical user interface diffing tool such as meld. The third line disables the Git prompt which asks you to confirm whether to launch the diff for every changed file. The last line automatically detects support for launching the gui based tool and launches &lt;gui-tool&gt; preferentially over &lt;tool&gt;. With this set to auto there is no need to add the -g flag when running git difftool.\n                      To see a list of available tools run:\n                      $ git difftool --tool-help\n                      \n                      \n                      After reviewing our change, it’s time to commit it:\n                      $ git commit -m \"Add tomorrows forecast to forecast.md\"\n                      On branch forecast\nChanges not staged for commit:\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\n  (use \"git restore &lt;file&gt;...\" to discard changes in working directory)\n\n    modified:   forecast.md\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n                      Whoops: Git won’t commit because we didn’t use git add first. Let’s fix that:\n                      $ git add forecast.md\n$ git commit -m \"Add tomorrows forecast to forecast.md\"\n                      [forecast 34961b1] Add tomorrows forecast to forecast.md\n 1 file changed, 4 insertions(+)\n                      Git insists that we add files to the set we want to commit before actually committing anything. This allows us to commit our changes in stages and capture changes in logical portions rather than only large batches. For example, suppose we’re adding a few citations to relevant research to our thesis. We might want to commit those additions, and the corresponding bibliography entries, but not commit some of our work drafting the conclusion (which we haven’t finished yet).\n                      To allow for this, Git has a special staging area where it keeps track of things that have been added to the current changeset but not yet committed.\n                      \n                      \n                      \n                      \n                      \n                      \n                      Staging Area\n                      \n                      \n                      \n                      If you think of Git as taking snapshots of changes over the life of a project, git add specifies what will go in a snapshot (putting things in the staging area), and git commit then actually takes the snapshot, and makes a permanent record of it (as a commit). If you don’t have anything staged when you type git commit, Git will prompt you to use git commit -a or git commit --all, which is kind of like gathering everyone to take a group photo! However, it’s almost always better to explicitly add things to the staging area, because you might commit changes you forgot you made. (Going back to the group photo simile, you might get an extra with incomplete makeup walking on the stage for the picture because you used -a!) Try to stage things manually, or you might find yourself searching for “git undo commit” more than you would like!\n                      \n                      \n                      \n                      \n                      \n                      \n                        \n                        \n                        FCM Comparison\n                        \n                      \n                      \n                      \n                      In FCM there is no concept of a staging area. FCM will commit all file modifications at once. This can lead to rather large commits. In Git remember to break down commits into small logical chunks.\n                      $ git add &lt;file&gt;\n$ git commit\n                      is equivalent to:\n                      $ fcm commit\n                      \n                      \n                      \n                      \n                      Our repository now looks like this:\n                      \n                      \n                      \n                      \n                      \n                          gitGraph\n                              accDescr {A Git graph showing the root-commit on the main branch and a new forecast branch, branching off the root-commit, with two commits.}\n                              commit id: 'Initial commit'\n                              branch forecast\n                              commit id: 'Create a md file with the forecast'\n                              commit id: 'Add tomorrows forecast to forecast.md'\n                      \n                      \n                      \n                      \n                      \n                      \n                      Let’s watch as our changes to a file move from our editor to the staging area and into long-term storage. First, we’ll improve our forecast by changing ‘pizza’ to ‘Sun’:\n                      $ nano forecast.md\n$ cat forecast.md\n                      # Forecast\n\n## Today\n\nCloudy with a chance of Sun.\n\n## Tomorrow\n\nMorning rainbows followed by light showers.\n                      $ git diff\n                      diff --git a/forecast.md b/forecast.md\nindex 315bf3a..b36abfd 100644\n--- a/forecast.md\n+++ b/forecast.md\n@@ -2,7 +2,7 @@\n \n ## Today\n \n-Cloudy with a chance of pizza.\n+Cloudy with a chance of Sun.\n \n ## Tomorrow\n\n                      So far, so good: we’ve replaced one line (shown with a - in the first column) with a new line (shown with a + in the first column). Now let’s put that change in the staging area and see what git diff reports:\n                      $ git add forecast.md\n$ git diff\n                      There is no output: as far as Git can tell, there’s no difference between what it’s been asked to save permanently and what’s currently in the directory. However, if we do this:\n                      $ git diff --staged\n                      diff --git a/forecast.md b/forecast.md\nindex 315bf3a..b36abfd 100644\n--- a/forecast.md\n+++ b/forecast.md\n@@ -2,7 +2,7 @@\n \n ## Today\n \n-Cloudy with a chance of pizza.\n+Cloudy with a chance of Sun.\n \n ## Tomorrow\n\n                      it shows us the difference between the last committed change and what’s in the staging area. Let’s save our changes:\n                      $ git commit -m \"Modify the forecast to add a chance of Sun\"\n                      [forecast 005937f] Modify the forecast to add a chance of Sun\n 1 file changed, 1 insertion(+), 1 deletion(-)\n                      check our status:\n                      $ git status\n                      On branch forecast\nnothing to commit, working tree clean\n                      Our repository now looks like this:\n                      \n                      \n                      \n                      \n                      \n                          gitGraph\n                              accDescr {A Git graph showing the root-commit on the main branch and a new forecast branch, branching off the root-commit, with three commits.}\n                              commit id: 'Initial commit'\n                              branch forecast\n                              commit id: 'Create a md file with the forecast'\n                              commit id: 'Add tomorrows forecast to forecast.md'\n                              commit id: 'Modify the forecast to add a chance of Sun'\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Word-based diffing\n                      \n                      \n                      \n                      Sometimes, e.g. in the case of the text documents a line-wise diff is too coarse. That is where the --color-words option of git diff comes in very useful as it highlights the changed words using colors.\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Directories\n                      \n                      \n                      \n                      Two important facts you should know about directories in Git.\n                      \n                      Git does not track directories on their own, only files within them. Try it for yourself:\n                      \n                      $ mkdir symbols\n$ git status\n$ git add symbols\n$ git status\n                      Note, our newly created empty directory symbols does not appear in the list of untracked files even if we explicitly add it (via git add) to our repository. This is the reason why you will sometimes see .gitkeep files in otherwise empty directories. Unlike .gitignore, these files are not special and their sole purpose is to populate a directory so that Git adds it to the repository. In fact, you can name such files anything you like.\n                      \n                      If you create a directory in your Git repository and populate it with files, you can add all files in the directory at once by:\n                      \n                      $ git add &lt;directory-with-files&gt;\n                      Try it for yourself:\n                      $ touch symbols/pressure.md symbols/pollen.md\n$ git status\n$ git add symbols\n$ git status\n                      Before moving on, we will commit these changes.\n                      $ git commit -m \"Add some initial weather symbols\"\n                      \n                      \n                      To recap, when we want to add changes to our repository, we first need to add the changed files to the staging area (git add) and then commit the staged changes to the repository (git commit):\n                      \n                      \n                      \n                      \n                      \n                      \n                      Choosing a Commit Message\n                      \n                      Which of the following commit messages would be most appropriate for the last commit made to forecast.md?\n                      \n                      “Changes”\n                      “Modify the forecast”\n                      “Modify the forecast to add a chance of Sun”\n                      \n                      \n                      Solution (Solution). Answer 1 is not descriptive enough, and the purpose of the commit is unclear; and answer 2 is redundant to using “git diff” to see what changed in this commit; but answer 3 is good: short, descriptive, and imperative.\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Committing Changes to Git\n                      \n                      Which command(s) below would save the changes of myfile.txt to my local Git repository?\n                      \n                         $ git commit -m \"my recent changes\"\n                         $ git init myfile.txt\n   $ git commit -m \"my recent changes\"\n                         $ git add myfile.txt\n   $ git commit -m \"my recent changes\"\n                         $ git commit -m myfile.txt \"my recent changes\"\n                      \n                      \n                      Solution (Solution). \n                      \n                      Would only create a commit if files have already been staged.\n                      Would try to create a new repository.\n                      Is correct: first add the file to the staging area, then commit.\n                      Would try to commit a file “my recent changes” with the message myfile.txt.\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Committing Multiple Files\n                      \n                      The staging area can hold changes from any number of files that you want to commit as a single snapshot.\n                      \n                      Add some text to forecast.md noting the expected temperature.\n                      Create a new file atlas.md with a list of common weather such as rain, sunshine, fog etc.\n                      Add changes from both files to the staging area, and commit those changes.\n                      \n                      \n                      Solution (Solution). First we make our changes to the forecast.md and atlas.md files:\n                      $ nano forecast.md\n$ cat forecast.md\n                      # Forecast\n\n## Today\n\nCloudy with a chance of sun.\nMild temperatures around 16 °C.\n\n## Tomorrow\n\nMorning rainbows followed by light showers.\n                      $ nano atlas.md\n$ cat atlas.md\n                      # Weather Atlas\n\n- rain\n- sunshine\n- fog\n                      Now you can add both files to the staging area. We can do that in one line:\n                      $ git add forecast.md atlas.md\n                      Or with multiple commands:\n                      $ git add forecast.md\n$ git add atlas.md\n                      Now the files are ready to commit. You can check that using git status. If you are ready to commit use:\n                      $ git commit -m \"Add in the temperature to the forecast and create the weather atlas file\"\n                      [forecast cc127c2] Add in the temperature to the forecast and create the weather atlas file\n 2 files changed, 6 insertions(+)\n create mode 100644 atlas.md\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      bio Repository\n                      \n                      \n                      Create a new Git repository on your computer called bio.\n                      Write a three-line biography for yourself in a file called me.txt, commit your changes.\n                      Modify one line, add a fourth line\n                      Display the differences. between its updated state and its original state.\n                      \n                      \n                      Solution (Solution). If needed, move out of the weather folder:\n                      $ cd ..\n                      Create a new folder called bio and ‘move’ into it:\n                      $ mkdir bio\n$ cd bio\n                      Initialise the repository:\n                      $ git init\n                      Create your biography file me.txt using nano or another text editor. Once in place, add and commit it to the repository:\n                      $ git add me.txt\n$ git commit -m \"Add biography file\"\n                      Modify the file as described (modify one line, add a fourth line). To display the differences between its updated state and its original state, use git diff:\n                      $ git diff me.txt\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Keypoints\n                      \n                      \n                      git status shows the status of a repository.\n                      Files can be stored in a project’s working directory (which users see), the staging area (where the next commit is being built up) and the local repository (where commits are permanently recorded).\n                      git add puts files in the staging area.\n                      git commit saves the staged content as a new commit in the local repository.\n                      Write a commit message that accurately describes your changes.\n                      \n                      \n                      \n                      \n                      \n                      \n      \n      \t\t\n      \t\t\t\n      \t\t\t\n              This lesson is subject to the &lt;(Code of Conduct)&gt;\n              Edit on GitHub\n              | Contributing\n              | Source\n      \t\t\t\tCite | Contact | About\n      \t\t\t\n      \t\t\t\n                      Materials licensed under &lt;({license})&gt; by the authors\n                      Template licensed under &lt;(CC-BY 4.0)&gt; by {template_authors}\n              Built with Quarto"
  },
  {
    "objectID": "episodes/02-setup.html",
    "href": "episodes/02-setup.html",
    "title": "Version Control with Git",
    "section": "",
    "text": "Skip to main content\n          \n            \n              \n                \n                                              \n            \n            \n              \n                \n                  \n                    \n                      \n                    \n                    \n                  \n                  \n                    \n                      \n                        \n                          \n                        \n                        Light\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Dark\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Auto\n                        \n                          \n                        \n                      \n                    \n                  \n                \n              \n              \n              \n                        \n                   Instructor View \n                \n                \n                  Learner View"
  },
  {
    "objectID": "episodes/02-setup.html#command-line-git-setup",
    "href": "episodes/02-setup.html#command-line-git-setup",
    "title": "Version Control with Git",
    "section": "Command Line Git Setup",
    "text": "Command Line Git Setup\n                      On a command line, Git commands are written as git verb options, where verb is what we actually want to do and options is additional optional information which may be needed for the verb.\n                      \n                      Authorship\n                      To set up a new computer:\n                      $ git config --global user.name \"Joanne Simpson\"\n$ git config --global user.email \"j.simpson@mo-weather.uk\"\n                      Please use your own name and email address. This user name and email will be associated with your subsequent Git activity, which means that any changes pushed to GitHub, BitBucket, GitLab or another Git host server after this lesson will include this information.\n                      For this lesson, we will be interacting with GitHub and so the email address used should be the same as the one used when setting up your GitHub account. If you are concerned about privacy, please review GitHub’s instructions for keeping your email address private.\n                      \n                      \n                      \n                      \n                      \n                      \n                      Keeping your email private\n                      \n                      \n                      \n                      If you elect to use a private email address with GitHub, then use GitHub’s no-reply email address for the user.email value. It looks like ID+username@users.noreply.github.com. You can look up your own address in your GitHub email settings. Check with your instructor whether your organisation has a policy on keeping emails private. At the Met Office it is up to you whether to keep your email address private.\n                      \n                      \n                      \n                      \n                      Line Endings\n                      As with other keys, when you press Enter or ↵ or on Macs, Return on your keyboard, your computer encodes this input as a character. Different operating systems use different character(s) to represent the end of a line. (You may also hear these referred to as newlines or line breaks.) Because Git uses these characters to compare files, it may cause unexpected issues when editing a file on different machines. Though it is beyond the scope of this lesson, you can read more about this issue in the Pro Git book.\n                      You can change the way Git recognizes and encodes line endings using the core.autocrlf command to git config. The following settings are recommended:\n                      \n                      \n                      \n                      Linux and MacOS\n                      $ git config --global core.autocrlf input\n                      \n                      \n                      Windows\n                      $ git config --global core.autocrlf true\n                      \n                      \n                      \n                      Text Editor\n                      To set your preferred text editor, find the correct configuration command from this table:\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Editor\n                      Configuration command\n                      \n                      \n                      \n                      \n                      Atom\n                      $ git config --global core.editor \"atom --wait\"\n                      \n                      \n                      nano\n                      $ git config --global core.editor \"nano -w\"\n                      \n                      \n                      BBEdit (Mac, with command line tools)\n                      $ git config --global core.editor \"bbedit -w\"\n                      \n                      \n                      Sublime Text (Mac)\n                      $ git config --global core.editor \"/Applications/Sublime\\ Text.app/Contents/SharedSupport/bin/subl -n -w\"\n                      \n                      \n                      Sublime Text (Win, 32-bit install)\n                      $ git config --global core.editor \"'c:/program files (x86)/sublime text 3/sublime_text.exe' -w\"\n                      \n                      \n                      Sublime Text (Win, 64-bit install)\n                      $ git config --global core.editor \"'c:/program files/sublime text 3/sublime_text.exe' -w\"\n                      \n                      \n                      Notepad (Win)\n                      $ git config --global core.editor \"c:/Windows/System32/notepad.exe\"\n                      \n                      \n                      Notepad++ (Win, 32-bit install)\n                      $ git config --global core.editor \"'c:/program files (x86)/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin\"\n                      \n                      \n                      Notepad++ (Win, 64-bit install)\n                      $ git config --global core.editor \"'c:/program files/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin\"\n                      \n                      \n                      Kate (Linux)\n                      $ git config --global core.editor \"kate\"\n                      \n                      \n                      Gedit (Linux)\n                      $ git config --global core.editor \"gedit --wait --new-window\"\n                      \n                      \n                      Scratch (Linux)\n                      $ git config --global core.editor \"scratch-text-editor\"\n                      \n                      \n                      Emacs\n                      $ git config --global core.editor \"emacs\"\n                      \n                      \n                      Vim\n                      $ git config --global core.editor \"vim\"\n                      \n                      \n                      VS Code\n                      $ git config --global core.editor \"code --wait\"\n                      \n                      \n                      \n                      It is possible to reconfigure the text editor for Git whenever you want to change it.\n                      \n                      \n                      \n                      \n                      \n                      \n                      Exiting Vim\n                      \n                      \n                      \n                      Note that Vim is the default editor for many programs. If you haven’t used Vim before and wish to exit a session without saving your changes, press Esc then type :q! and press Enter or ↵ or on Macs, Return. If you want to save your changes and quit, press Esc then type :wq and press Enter or ↵ or on Macs, Return.\n                      \n                      \n                      \n                      \n                      Default Branch Name\n                      Git (2.28+) allows configuration of the name of the branch created when you initialize any new repository. We want to set this to main so it matches the cloud service we will eventually use.\n                      $ git config --global init.defaultBranch main\n                      \n                      \n                      \n                      \n                      \n                      \n                      History of main\n                      \n                      \n                      \n                      Source file changes are associated with a “branch”. By default, Git will create a branch called master when you create a new repository with git init (as explained in the next Episode). This term evokes the racist practice of human slavery and the software development community has moved to adopt more inclusive language.\n                      In 2020, most Git code hosting services transitioned to using main as the default branch. As an example, any new repository that is opened in GitHub and GitLab default to main. However, Git has not yet made the same change. As a result, local repositories must be manually configured have the same main branch name as most cloud services.\n                      For versions of Git prior to 2.28, the change can be made on an individual repository level. The command for this is in the next episode. Note that if this value is unset in your local Git configuration, the init.defaultBranch value defaults to master.\n                      \n                      \n                      The five commands we just ran above only need to be run once: the flag --global tells Git to use the settings for every project, in your user account, on this computer."
  },
  {
    "objectID": "episodes/02-setup.html#text-editor-git-setup",
    "href": "episodes/02-setup.html#text-editor-git-setup",
    "title": "Version Control with Git",
    "section": "Text Editor Git Setup",
    "text": "Text Editor Git Setup\n                      Let’s review those settings and test our core.editor right away:\n                      $ git config --global --edit\n                      Let’s close the file without making any additional changes. Since typos in the config file will cause issues, it’s safer to view the configuration with:\n                      $ git config --list\n                      And alter the configuration via the command line. You can re-run the commands above as many times as you want to change your configuration. The discussion page has details on more recommended settings.\n                      \n                      \n                      \n                      \n                      \n                      \n                      Proxy\n                      \n                      \n                      \n                      In some networks you need to use a proxy. If this is the case, you may also need to tell Git about the proxy:\n                      $ git config --global http.proxy proxy-url\n$ git config --global https.proxy proxy-url\n                      To disable the proxy, use\n                      $ git config --global --unset http.proxy\n$ git config --global --unset https.proxy\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Git Help and Manual\n                      \n                      \n                      \n                      If you forget the subcommands or options of a git command, you can access the relevant list of options typing git &lt;command&gt; -h or access the corresponding Git manual by typing git &lt;command&gt; --help, e.g.:\n                      $ git config -h\n$ git config --help\n                      While viewing the manual, remember the : is a prompt waiting for commands and you can press Q to exit the manual.\n                      More generally, you can get the list of available git commands and further resources of the Git manual typing:\n                      $ git help\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Keypoints\n                      \n                      \n                      Use git config with the --global option to configure a user name, email address, editor, and other preferences once per machine."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Version Control with Git",
    "section": "",
    "text": "Skip to main content\n          \n            \n              \n                \n                                              \n            \n            \n              \n                \n                  \n                    \n                      \n                    \n                    \n                  \n                  \n                    \n                      \n                        \n                          \n                        \n                        Light\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Dark\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Auto\n                        \n                          \n                        \n                      \n                    \n                  \n                \n              \n              \n              \n                        \n                   Instructor View \n                \n                \n                  Learner View"
  },
  {
    "objectID": "index.html#pre-workshop-survey",
    "href": "index.html#pre-workshop-survey",
    "title": "Version Control with Git",
    "section": "Pre-workshop Survey",
    "text": "Pre-workshop Survey\n                      Please remember to fill out the pre-workshop survey prior to the start of the workshop. This information is vital for us to keep improving the lesson for other learners."
  },
  {
    "objectID": "index.html#installing-git",
    "href": "index.html#installing-git",
    "title": "Version Control with Git",
    "section": "Installing Git",
    "text": "Installing Git\n                      Since several Carpentries lessons rely on Git, please see this section of the workshop template for instructions on installing Git for various operating systems.\n                      \n                      Git installation on Windows\n                      Git installation on MacOS\n                      Git installation on Linux\n                      \n                      Your institution may have already installed Git on your work computer. Ask your instructor if this step is necessary or simply type:\n                      $ git --version\ngit version 2.47.0\n                      If a version number is printed like the output above Git is installed and ready to use."
  },
  {
    "objectID": "index.html#creating-a-github-account",
    "href": "index.html#creating-a-github-account",
    "title": "Version Control with Git",
    "section": "Creating a GitHub Account",
    "text": "Creating a GitHub Account\n                      You will need an account for GitHub to follow episodes 7 & 8 in this lesson.\n                      \n                      Go to https://github.com and follow the “Sign up” link at the top-right of the window.\n                      Follow the instructions to create an account.\n                      Verify your email address with GitHub.\n                      Configure multifactor authentication and or a passkey (see below).\n                      \n                      There is no fixed guidance for choosing your GitHub username however you should ensure it is suitable for work. At the Met Office a common pattern for usernames is: mo-{first name initial}{surname}. So if your name is Eleanor Ormerod your username would be: mo-eormerod\n                      \n                      Multi-factor Authentication\n                      In 2023, GitHub introduced a requirement for all accounts to have multi-factor authentication (2FA) configured for extra security. Several options exist for setting up 2FA, which are summarised here:\n                      \n                      If you already use an authenticator app, like Google Authenticator or Duo Mobile on your smartphone for example, add GitHub to that app.\n                      If you have access to a smartphone but do not already use an authenticator app, install one and add GitHub to the app.\n                      If you do not have access to a smartphone or do not want to install an authenticator app, you have two options:\n                      \n                      set up 2FA via text message (list of countries where authentication by SMS is supported), or\n                      use a hardware security key like YubiKey or the Google Titan key.\n                      \n                      \n                      The GitHub documentation provides more details about configuring 2FA.\n                      \n                      \n                      Passkeys\n                      To completely avoid having authentication for work purposes on a personal device you may choose to set up a passkey. Your instructor and organisation will be able to provide guidance on suitable passkey providers and password managers."
  },
  {
    "objectID": "index.html#optional-git-autocomplete",
    "href": "index.html#optional-git-autocomplete",
    "title": "Version Control with Git",
    "section": "Optional: Git Autocomplete",
    "text": "Optional: Git Autocomplete\n                      Git provides a script which lets us display the version control status in your terminal prompt. The following instructions have been tested on Linux. If you are using MacOS or Windows please consult the Git autocomplete instructions at the top of the linked file. Your instructor may point you to another online resource for your OS. To enable this script add the following to a new ~/.bashrc.d/git.bash file:\n                      if [[ $- =~ i ]]; then\n    GIT_PROMPT_PATH=/usr/share/doc/git/contrib/completion/git-prompt.sh\n    if [[ -r \"${GIT_PROMPT_PATH}\" ]]; then    \n        source \"${GIT_PROMPT_PATH}\" &gt;&2\n    else\n        if [[ \"$-\" == *i* ]]; then\n            echo \"${GIT_PROMPT_PATH} - not found\" &gt;&2\n        fi\n    fi\n    export GIT_PS1_SHOWDIRTYSTATE=1\n    export GIT_PS1_SHOWSTASHSTATE=1\n    export GIT_PS1_SHOWUPSTREAM=\"auto\"\n    export GIT_PS1_SHOWCOLORHINTS=1\n    export GIT_PS1_SHOWUNTRACKEDFILES=1\n\n    export PS1='[\\u@\\h:\\w]$(__git_ps1 \"(%s)\"):\\$ '\n\nfi\n                      And make sure your ~/.bashrc file includes:\n                      # User specific aliases and functions\n\nif [ -d ~/.bashrc.d ]; then\n    for rc in ~/.bashrc.d/*; do\n        if [ -f \"$rc\" ]; then\n            . \"$rc\"\n        fi\n    done\nfi\n\nunset rc\n                      \n                      GIT_PROMPT_PATH\n                      Your instructor will let you know if the value of GIT_PROMPT_PATH is different from the path in the example above. The following paths are for Met Office colleagues. If you are external to the Met Office please consult your institutions IT services or download your own copy of the git-prompt.sh script. Download the latest version from the Git repository contrib directory. Ensure the GIT_PROMPT_PATH matches where you decide to store the git-prompt.sh file.\n                      For Azure Spice, the path in the snippet above is correct:\n                      GIT_PROMPT_PATH=/usr/share/doc/git/contrib/completion/git-prompt.sh\n                      For old Spice:\n                      GIT_PROMPT_PATH=/usr/share/doc/git236-2.36.6/contrib/completion/git-prompt.sh\n                      \n                      To see the changes to your terminal prompt run:\n                      source ~/.bashrc\n                      \n                      \n                      \n                      \n                      \n                      \n                      If you have already modified your PS1\n                      \n                      \n                      \n                      If your ~/.bashrc file, or any file in the ~/.bashrc.d/ directory, already modifies your PS1 command you can export PROMPT_COMMAND instead or seek help from your instructor on how to merge your current PS1 command with the one above.\n                      Replace the export PS1 line with:\n                      export PROMPT_COMMAND=(\"${PROMPT_COMMAND[@]}\" '__git_ps1 \"${CONDA_PROMPT_MODIFIER}[\\u@\\h:\\w]:\" \"\\$ \" \"(%s)\"')\n                      If your version of Bash is less than 5.1 or you are using MacOS you might need to use:\n                      export PROMPT_COMMAND=${PROMPT_COMMAND:+\"$PROMPT_COMMAND; \"}'__git_ps1 \"${CONDA_PROMPT_MODIFIER}[\\w]:\" \"\\$ \" \"(%s)\"'\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      How to get help\n                      \n                      \n                      \n                      Your instructor will be able to help you with this setup. At the Met Office please email the Science Git Migration Project and come to a Git & GitHub surgery to receive help. Details of surgeries can be found on the Science Git Migration Project SharePoint homepage and MetNets homepage.\n                      \n                      \n                      \n                      Long Terminal Prompts\n                      You might find that with long paths and usernames your prompt takes up the entire width of the terminal; there are several ways to reduce the prompt length:\n                      \n                      Removing \\u and \\h\n                      If adding in your username, \\u, and hostname, \\h, makes the terminal prompt too long you can remove the \\u and or \\h from the PROMPT_COMMAND or PS1 lines.\n                      \n                      \n                      Add in PROMPT_DIRTRIM\n                      Just before the final fi line you may add:\n                      PROMPT_DIRTRIM=3\n                      This trims long directory paths to only show the current and two parent directories. You can change this value to show more or fewer directories.\n                      /Desktop/A/Really/Long/Path $ # without PROMPT_DIRTRIM\n.../Really/Long/Path $        # with PROMPT_DIRTRIM\n                      \n                      \n                      Add in a newline\n                      Just before the \\$ symbol in the PS1 or PROMPT_COMMAND lines you may add \\n. This will add in a newline before the $ symbol, separating your prompt from your terminal commands.\n                      Before:\n                      (conda_env) [~/Documents/git-novice]:(branch_name) $ _\n                      After:\n                      (conda_env) [~/Documents/git-novice]:(branch_name)\n$ _\n                      To see the changes to your terminal prompt run:\n                      source ~/.bashrc"
  },
  {
    "objectID": "episodes/01-basics.html",
    "href": "episodes/01-basics.html",
    "title": "Version Control with Git",
    "section": "",
    "text": "Skip to main content\n          \n            \n              \n                \n                                              \n            \n            \n              \n                \n                  \n                    \n                      \n                    \n                    \n                  \n                  \n                    \n                      \n                        \n                          \n                        \n                        Light\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Dark\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Auto\n                        \n                          \n                        \n                      \n                    \n                  \n                \n              \n              \n              \n                        \n                   Instructor View \n                \n                \n                  Learner View"
  },
  {
    "objectID": "episodes/01-basics.html#terminology",
    "href": "episodes/01-basics.html#terminology",
    "title": "Version Control with Git",
    "section": "Terminology",
    "text": "Terminology\n                      This workshop may contain language that is new to you. The Glossary section outlines key Git & GitHub terminology for your reference.\n                      \n                      \n                      \n                        \n                        \n                        Explain Key Terminology\n                        \n                      \n                      \n                      \n                      Take this opportunity to show the learners where the glossary can be found. Explain the difference between Git & GitHub using the glossary! Or if there is time to spare, the first challenge on this page gets the learners to use the glossary to explain the difference to a partner or write it down in their own words.\n                      \n                      \n                      \n                      \n                      \n                      Distributed Version Control\n                      Git is an example of a distributed version control system. This means that each collaborator has a copy of the entire repository.\n                      \n                      \n                      Centralised (FCM)\n                      FCM and SVN are examples of centralised version control systems. Here there is only one repository on a central server.\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      The Long History of Version Control Systems\n                      \n                      \n                      \n                      Automated version control systems are nothing new. Tools like RCS, CVS, or Subversion have been around since the early 1980s and are used by many large companies. However, many of these are now considered legacy systems (i.e., outdated) due to various limitations in their capabilities. More modern systems, such as Git and Mercurial, are distributed, meaning that they do not need a centralized server to host the repository. These modern systems also include powerful merging tools that make it possible for multiple authors to work on the same files concurrently.\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Migrating to Git from FCM\n                      \n                      \n                      \n                      If you currently use FCM (a wrapper around Subversion, SVN) then look out for the following dropdowns. They contain the FCM equivalent for Git commands.\n                      \n                      \n                      \n                        \n                        \n                        FCM Comparison\n                        \n                      \n                      \n                      \n                      Running the git ... command is equivalent to:\n                      fcm ...\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Challenge\n                      \n                      Use the Glossary to describe the difference between Git & GitHub in your own words.\n                      Share your description with other learners if you are comfortable doing so.\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Paper Writing\n                      \n                      \n                      Imagine you drafted an excellent paragraph for a paper you are writing, but later ruin it. How would you retrieve the excellent version of your conclusion? Is it even possible?\n                      Imagine you have 5 co-authors. How would you manage the changes and comments they make to your paper? If you use LibreOffice Writer or Microsoft Word, what happens if you accept changes made using the Track Changes option? Do you have a history of those changes?\n                      \n                      \n                      Solution (Solution). \n                      \n                      Recovering the excellent version is only possible if you created a copy of the old version of the paper. The danger of losing good versions often leads to the problematic workflow illustrated in the PhD Comics cartoon at the top of this page.\n                      Collaborative writing with traditional word processors is cumbersome. Either every collaborator has to work on a document sequentially (slowing down the process of writing), or you have to send out a version to all collaborators and manually merge their comments into your document. The ‘track changes’ or ‘record changes’ option can highlight changes for you and simplifies merging, but as soon as you accept changes you will lose their history. You will then no longer know who suggested that change, why it was suggested, or when it was merged into the rest of the document. Even online word processors like Google Docs or Microsoft Office Online do not fully resolve these problems.\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Keypoints\n                      \n                      \n                      Version control is like an unlimited ‘undo’.\n                      Version control also allows many people to work in parallel."
  },
  {
    "objectID": "episodes/03-create.html",
    "href": "episodes/03-create.html",
    "title": "Version Control with Git",
    "section": "",
    "text": "Skip to main content\n          \n            \n              \n                \n                                              \n            \n            \n              \n                \n                  \n                    \n                      \n                    \n                    \n                  \n                  \n                    \n                      \n                        \n                          \n                        \n                        Light\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Dark\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Auto\n                        \n                          \n                        \n                      \n                    \n                  \n                \n              \n              \n              \n                        \n                   Instructor View \n                \n                \n                  Learner View"
  },
  {
    "objectID": "episodes/03-create.html#initial-commit",
    "href": "episodes/03-create.html#initial-commit",
    "title": "Version Control with Git",
    "section": "Initial Commit",
    "text": "Initial Commit\n                      As soon as you initialise your repository you should make an initial commit. All repositories should have a README file which outlines the purpose of the repository and other useful information. For now we will create the file with just the repository name, Weather as the title:\n                      $ echo \"# Weather\" &gt; README.md\n$ cat README.md\n                      # Weather\n                      Now add and commit the README.md file using the git add and git commit commands:\n                      $ git add README.md\n$ git commit -m \"Initial commit\"\n                      [main (root-commit) 6f12a47] Initial commit\n 1 file changed, 1 insertion(+)\n create mode 100644 README.md\n                      You’ve just added your first file to be version controlled with Git! This first commit is the special root-commit. It is the start of your version control history and like all commits has been given a unique alphanumeric hash (6f12a47). In the next few episodes you will explore tracking changes with git add and git commit in detail, and learn how to inspect your repositories history.\n                      \n                      \n                      \n                      \n                      \n                      \n                      README Files\n                      \n                      \n                      \n                      All repositories should have a README file. The README file describes what is in your repository. The makeareadme website is a great resource for README templates and inspiration.\n                      The README.md file we added is a Markdown file. Markdown is a simple markup language and GitHub can render Markdown files natively. The GitHub documentation pages on Writing on GitHub have more info on writing in Markdown for GitHub.\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Places to Create Git Repositories\n                      \n                      Along with tracking information about weather (the project we have already created), you might also want to track information about clouds specifically. Imagine you create a clouds project inside your weather project with the following sequence of commands:\n                      $ cd ~/Desktop    # return to Desktop directory\n$ cd weather      # go into weather directory, which is already a Git repository\n$ ls -a           # ensure the .git subdirectory is still present in the weather directory\n$ mkdir clouds    # make a sub-directory weather/clouds\n$ cd clouds       # go into clouds subdirectory\n$ git init        # make the clouds subdirectory a Git repository\n$ ls -a           # ensure the .git subdirectory is present indicating we have created a new Git repository\n                      Is the git init command, run inside the clouds subdirectory, required for tracking files stored in the clouds subdirectory?\n                      \n                      Solution (Solution). No. You do not need to make the clouds subdirectory a Git repository because the weather repository will track all files, sub-directories, and subdirectory files under the weather directory. Thus, in order to track all information about clouds, you only needed to add the clouds subdirectory to the weather directory.\n                      Additionally, Git repositories can interfere with each other if they are “nested”: the outer repository will try to version-control the inner repository. Therefore, it’s best to create each new Git repository in a separate directory. To be sure that there is no conflicting repository in the directory, check the output of git status. If it looks like the following, you are good to go to create a new repository as shown above:\n                      $ git status\n                      fatal: Not a git repository (or any of the parent directories): .git\n                      \n                      \n                      Correcting git init Mistakes\n                      A colleague explains to you how a nested repository is redundant and may cause confusion down the road. You would like to go back to a single Git repository. How can you undo the last git init in the clouds subdirectory?\n                      \n                      Solution (Solution – USE WITH CAUTION!). \n                      \n                      Background\n                      Removing files from a Git repository needs to be done with caution. But we have not learned yet how to tell Git to track a particular file; we will learn this in the next episode. Files that are not tracked by Git can easily be removed like any other “ordinary” files with\n                      $ rm filename\n                      Similarly a directory can be removed using rm -r dirname. If the files or folder being removed in this fashion are tracked by Git, then their removal becomes another change that we will need to track, as we will see in the next episode.\n                      \n                      \n                      Solution\n                      Git keeps all of its files in the .git directory. To recover from this little mistake, you can remove the .git folder in the clouds subdirectory by running the following command from inside the weather directory:\n                      $ rm -rf clouds/.git\n                      But be careful! Running this command in the wrong directory will remove the entire Git history of a project you might want to keep. In general, deleting files and directories using rm from the command line cannot be reversed. Therefore, always check your current directory using the command pwd.\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Keypoints\n                      \n                      \n                      git init initializes a repository.\n                      Git stores all of its repository data in the .git directory."
  },
  {
    "objectID": "episodes/03-create.html#correcting-git-init-mistakes",
    "href": "episodes/03-create.html#correcting-git-init-mistakes",
    "title": "Version Control with Git",
    "section": "Correcting git init Mistakes",
    "text": "Correcting git init Mistakes\n                      A colleague explains to you how a nested repository is redundant and may cause confusion down the road. You would like to go back to a single Git repository. How can you undo the last git init in the clouds subdirectory?\n                      \n                      Solution (Solution – USE WITH CAUTION!). \n                      \n                      Background\n                      Removing files from a Git repository needs to be done with caution. But we have not learned yet how to tell Git to track a particular file; we will learn this in the next episode. Files that are not tracked by Git can easily be removed like any other “ordinary” files with\n                      $ rm filename\n                      Similarly a directory can be removed using rm -r dirname. If the files or folder being removed in this fashion are tracked by Git, then their removal becomes another change that we will need to track, as we will see in the next episode.\n                      \n                      \n                      Solution\n                      Git keeps all of its files in the .git directory. To recover from this little mistake, you can remove the .git folder in the clouds subdirectory by running the following command from inside the weather directory:\n                      $ rm -rf clouds/.git\n                      But be careful! Running this command in the wrong directory will remove the entire Git history of a project you might want to keep. In general, deleting files and directories using rm from the command line cannot be reversed. Therefore, always check your current directory using the command pwd."
  },
  {
    "objectID": "episodes/05-history.html",
    "href": "episodes/05-history.html",
    "title": "Version Control with Git",
    "section": "",
    "text": "Skip to main content\n          \n            \n              \n                \n                                              \n            \n            \n              \n                \n                  \n                    \n                      \n                    \n                    \n                  \n                  \n                    \n                      \n                        \n                          \n                        \n                        Light\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Dark\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Auto\n                        \n                          \n                        \n                      \n                    \n                  \n                \n              \n              \n              \n                        \n                   Instructor View \n                \n                \n                  Learner View"
  },
  {
    "objectID": "episodes/05-history.html#viewing-a-repositories-history",
    "href": "episodes/05-history.html#viewing-a-repositories-history",
    "title": "Version Control with Git",
    "section": "Viewing a Repositories History",
    "text": "Viewing a Repositories History\n                      If we want to know what we’ve done recently, we can ask Git to show us the project’s history using git log:\n                      $ git log\n                      commit cdb7fa654c3f5aee731a655e57f2ba74d9c74582 (HEAD -&gt; forecast)\nAuthor: Joanne Simpson &lt;j.simpson@mo-weather.uk&gt;\nDate:   Mon Nov 4 18:35:21 2024 +0000\n\n    Add in the temperature to the forecast and create the weather atlas file\n                      git log lists all commits made to a repository in reverse chronological order. The listing for each commit includes the commit’s full identifier (which starts with the same characters as the short identifier printed by the git commit command earlier), the commit’s author, when it was created, and the log message Git was given when the commit was created. The output above only shows the latest commit in the log for brevity, you should see all your commits!\n                      \n                      \n                      \n                        \n                        \n                        FCM Comparison\n                        \n                      \n                      \n                      \n                      git log is equivalent to:\n                      $ fcm log\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Paging the Log\n                      \n                      \n                      \n                      When the output of git log is too long to fit in your screen, git uses a program to split it into pages of the size of your screen. When this “pager” is called, you will notice that the last line in your screen is a :, instead of your usual prompt.\n                      \n                      To get out of the pager, press Q.\n                      To move to the next page, press Spacebar.\n                      To search for some_word in all pages, press / and type some_word. Navigate through matches pressing N.\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Limit Log Size\n                      \n                      \n                      \n                      To avoid having git log cover your entire terminal screen, you can limit the number of commits that Git lists by using -N, where N is the number of commits that you want to view. For example, if you only want information from the last commit you can use:\n                      $ git log -1\n                      commit cdb7fa654c3f5aee731a655e57f2ba74d9c74582 (HEAD -&gt; forecast)\nAuthor: Joanne Simpson &lt;j.simpson@mo-weather.uk&gt;\nDate:   Mon Nov 4 18:35:21 2024 +0000\n\n    Add in the temperature to the forecast and create the weather atlas file\n                      You can also reduce the quantity of information using the --oneline option:\n                      $ git log --oneline\n                      cdb7fa6 (HEAD -&gt; forecast) Add in the temperature to the forecast and create the weather atlas file\n62a9457 Modify the forecast to add a chance of Sun\nd3e4637 Add tomorrows forecast to forecast.md\n590c40c Create a md file with the forecast\n                      You can also combine the --oneline option with others. One useful combination adds --graph to display the commit history as a text-based graph and to indicate which commits are associated with the current HEAD, the current branch main, or [other Git references][git-references]:\n                      $ git log --oneline --graph\n                      * cdb7fa6 (HEAD -&gt; forecast) Add in the temperature to the forecast and create the weather atlas file\n* 62a9457 Modify the forecast to add a chance of Sun\n* d3e4637 Add tomorrows forecast to forecast.md\n* 590c40c Create a md file with the forecast\n                      \n                      \n                      \n                      A common alias for git log\n                      It is often useful to use the --decorate, --oneline, and --graph flags all at once. To avoid us having to write out the three flags each time we can set an alias:\n                      $ git config --global alias.dog \"log --decorate --oneline --graph\"\n                      This alias makes these two commands equivalent:\n                      $ git dog\n$ git log --decorate --oneline --graph\n                      --decorate ensures commits with reference names1 are displayed when using older versions of Git.\n                      \n                      \n                      git show\n                      The git show command lets you view information for specific commits. By default git show will show information for the latest commit on the current branch.\n                      $ git show\n                      commit cdb7fa654c3f5aee731a655e57f2ba74d9c74582 (HEAD -&gt; forecast)\nAuthor: Joanne Simpson &lt;j.simpson@mo-weather.uk&gt;\nDate:   Mon Nov 4 18:35:21 2024 +0000\n\n    Add in the temperature to the forecast and create the weather atlas file\n\ndiff --git a/atlas.md b/atlas.md\nnew file mode 100644\nindex 0000000..18fac28\n--- /dev/null\n+++ b/atlas.md\n@@ -0,0 +1,5 @@\n+# Weather Atlas\n+\n+- rain\n+- sunshine\n+- fog\n:"
  },
  {
    "objectID": "episodes/05-history.html#identifying-commits",
    "href": "episodes/05-history.html#identifying-commits",
    "title": "Version Control with Git",
    "section": "Identifying Commits",
    "text": "Identifying Commits\n                      As we saw in the previous episode, we can refer to commits by their identifiers. You can refer to the most recent commit of the working directory by using the reference name HEAD.\n                      We’ve been adding small changes at a time to forecast.md, so it’s easy to track our progress by looking, so let’s do that using our HEADs. Before we start, let’s make a change to forecast.md, adding yet another line with an ill-considered change.\n                      $ nano forecast.md\n$ cat forecast.md\n                      # Forecast\n\n## Today\n\nCloudy with a chance of sun.\nMild temperatures around 16 °C.\n\n## Tomorrow\n\nMorning rainbows followed by light showers.\nAn ill-considered change.\n                      Now, let’s see what we get.\n                      $ git diff HEAD forecast.md\n                      diff --git a/forecast.md b/forecast.md\nindex b36abfd..0848c8d 100644\n--- a/forecast.md\n+++ b/forecast.md\n@@ -8,3 +8,4 @@\n Mild temperatures around 16 °C.\n \n ## Tomorrow\n \n Morning rainbows followed by light showers.\n+An ill-considered change.\n                      which is the same as what you would get if you leave out HEAD (try it). The real goodness in all this is when you can refer to previous commits. We do that by adding ~1 (where “~” is “tilde”, pronounced [til-duh]) to refer to the commit one before HEAD.\n                      $ git diff HEAD~1 forecast.md\n                      If we want to see the differences between older commits we can use git diff again, but with the notation HEAD~1, HEAD~2, and so on, to refer to them:\n                      $ git diff HEAD~2 forecast.md\n                      diff --git a/forecast.md b/forecast.md\nindex df0654a..b36abfd 100644\n--- a/forecast.md\n+++ b/forecast.md\n@@ -2,8 +2,10 @@\n \n ## Today\n\n-Cloudy with a chance of pizza.\n+Cloudy with a chance of sun.\n+Mild temperatures around 16 °C.\n \n ## Tomorrow\n \n Morning rainbows followed by light showers.\n+An ill-considered change.\n                      We can also use identifiers with git show.\n                      $ git show HEAD~2 forecast.md\n                      Author: Joanne Simpson &lt;j.simpson@mo-weather.uk&gt;\nDate:   Mon Nov 4 18:16:29 2024 +0000\n\n    Add tomorrows forecast to forecast.md\n\ndiff --git a/forecast.md b/forecast.md\nindex d8bc6ce..5b5d97e 100644\n--- a/forecast.md\n+++ b/forecast.md\n@@ -3,3 +3,7 @@\n ## Today\n \n Cloudy with a chance of pizza.\n+\n+## Tomorrow\n+\n+Morning rainbows followed by light showers.\n                      In this way, we can build up a chain of commits. The most recent end of the chain is referred to as HEAD; we can refer to previous commits using the ~ notation, so HEAD~1 means “the previous commit”, while HEAD~123 goes back 123 commits from where we are now.\n                      We can also refer to commits using those long strings of digits and letters that both git log and git show display. These are unique IDs for the changes, and “unique” really does mean unique: every change to any set of files on any computer has a unique 40-character identifier. Our first commit on the forecast branch was given the ID f22b25e3233b4645dabd0d81e651fe074bd8e73b, so let’s try this:\n                      $ git diff f22b25e3233b4645dabd0d81e651fe074bd8e73b forecast.md\n                      diff --git a/forecast.md b/forecast.md\nindex df0654a..93a3e13 100644\n--- a/forecast.md\n+++ b/forecast.md\n@@ -2,4 +2,10 @@\n \n ## Today\n\n-Cloudy with a chance of pizza.\n+Cloudy with a chance of sun.\n+Mild temperatures around 16 °C.\n+\n+## Tomorrow\n+\n+Morning rainbows followed by light showers.\n+An ill-considered change.\n                      That’s the right answer, but typing out random 40-character strings is annoying, so Git lets us use just the first few characters (typically seven for normal size projects):\n                      $ git diff f22b25e forecast.md\n                      diff --git a/forecast.md b/forecast.md\nindex df0654a..93a3e13 100644\n--- a/forecast.md\n+++ b/forecast.md\n@@ -2,4 +2,10 @@\n \n ## Today\n\n-Cloudy with a chance of pizza.\n+Cloudy with a chance of sun.\n+Mild temperatures around 16 °C.\n+\n+## Tomorrow\n+\n+Morning rainbows followed by light showers.\n+An ill-considered change.\n                      So far we have only been comparing a previous commit to the working copy. To get a difference between two specific commits use both their IDs:\n                      $ git diff d3e4637 62a9457 forecast.md\n                      diff --git a/forecast.md b/forecast.md\nindex 4c96be7..541eee7 100644\n--- a/forecast.md\n+++ b/forecast.md\n@@ -2,7 +2,7 @@\n \n ## Today\n \n-Cloudy with a chance of pizza.\n+Cloudy with a chance of Sun.\n \n ## Tomorrow\n \n                      \n                      \n                      \n                      \n                      \n                      Understanding Workflow and History\n                      \n                      What is the output of the last command in\n                      $ cd weather\n$ git switch -c add_CMIP_data\n$ echo \"Global Climate Data\" &gt; CMIP7.md\n$ git add CMIP7.md\n$ echo \"Data from the 7th model intercomparison project\" &gt;&gt; CMIP7.md\n$ git commit -m \"Adds in CMIP7 data file\"\n$ git restore CMIP7.md\n$ cat CMIP7.md  # this will print the content of CMIP7.md on screen\n                      \n                        Data from the 7th model intercomparison project\n                        Global Climate Data\n                        Global Climate Data\n  Data from the 7th model intercomparison project\n                        Error because you have changed CMIP7.md without committing the changes\n                      \n                      \n                      Solution (Solution). The answer is 2.\n                      The changes to the file from the second echo command are only applied to the working copy, not the version in the staging area.\n                      So, when git commit -m \"Adds in CMIP7 data file\" is executed, the version of CMIP7.md committed to the repository is the one from the staging area and only has one line, Global Climate Data.\n                      At this time, the working copy still has the second line (and git status will show that the file is modified). However, git restore CMIP7.md removes all unstaged modifications to the CMIP7.md file, so the second line is removed. So, cat CMIP7.md will output\n                      Global Climate Data\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Checking Understanding of git diff\n                      \n                      Consider this command: git diff HEAD~9 forecast.md. What do you predict this command will do if you execute it? What happens when you do execute it? Why?\n                      Try another command, git diff [ID] forecast.md, where [ID] is replaced with the unique identifier for your most recent commit. What do you think will happen, and what does happen?\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Explore and Summarize Histories\n                      \n                      Exploring history is an important part of Git, and often it is a challenge to find the right commit ID, especially if the commit is from several months ago.\n                      Imagine the weather project has more than 50 files. You would like to find a commit that modifies some specific text in forecast.md. When you type git log, a very long list appeared. How can you narrow down the search?\n                      Recall that the git diff command allows us to explore one specific file, e.g., git diff forecast.md. We can apply a similar idea here.\n                      $ git log forecast.md\n                      Unfortunately some of these commit messages are very ambiguous, e.g., update files. How can you search through these files?\n                      Both git diff and git log are very useful and they summarize a different part of the history for you. Is it possible to combine both? Let’s try the following:\n                      $ git log --patch forecast.md\n                      You should get a long list of output, and you should be able to see both commit messages and the difference between each commit.\n                      Question: What does the following command do?\n                      $ git log --patch HEAD~9 *.md\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Keypoints\n                      \n                      \n                      git log displays the repositories history.\n                      git diff displays differences between commits.\n                      HEAD references the last commit.\n                      HEAD~1 references the commit before last."
  },
  {
    "objectID": "episodes/05-history.html#footnotes",
    "href": "episodes/05-history.html#footnotes",
    "title": "Version Control with Git",
    "section": "Footnotes",
    "text": "Footnotes\n                      \n                      \n                      References in Git are user friendly links to specific commits. For instance HEAD is a reference to the latest commit on a branch. Programs with regular releases might add reference tags such as v1.0 to a specific commit to mark a new release. These references can be used instead of a commit identifier such as e48heu0.↩︎"
  },
  {
    "objectID": "episodes/06-reverting-changes.html",
    "href": "episodes/06-reverting-changes.html",
    "title": "Version Control with Git",
    "section": "",
    "text": "Skip to main content\n          \n            \n              \n                \n                                              \n            \n            \n              \n                \n                  \n                    \n                      \n                    \n                    \n                  \n                  \n                    \n                      \n                        \n                          \n                        \n                        Light\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Dark\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Auto\n                        \n                          \n                        \n                      \n                    \n                  \n                \n              \n              \n              \n                        \n                   Instructor View \n                \n                \n                  Learner View"
  },
  {
    "objectID": "episodes/06-reverting-changes.html#restoring-a-file-from-further-back",
    "href": "episodes/06-reverting-changes.html#restoring-a-file-from-further-back",
    "title": "Version Control with Git",
    "section": "Restoring a file from further back",
    "text": "Restoring a file from further back\n                      If we want to go back even further, we can use a commit identifier instead, using -s option:\n                      $ git restore -s f22b25e forecast.md\n                      $ cat forecast.md\n                      # Forecast\n\n## Today\n\nCloudy with a chance of pizza.\n                      $ git status\n                      On branch forecast\nChanges not staged for commit:\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\n  (use \"git restore &lt;file&gt;...\" to discard changes in working directory)\n    modified:   forecast.md\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n                      Notice that the changes are not currently in the staging area, and have not been committed. If we wished, we can put things back the way they were at the last commit by using git restore to overwrite the working copy with the last committed version:\n                      $ git restore forecast.md\n$ cat forecast.md\n                      # Forecast\n\n## Today\n\nCloudy with a chance of sun.\nMild temperatures around 16 °C.\n\n## Tomorrow\n\nMorning rainbows followed by light showers.\n                      It’s important to remember that we must use the commit number that identifies the state of the repository before the change we’re trying to undo. A common mistake is to use the number of the commit in which we made the change we’re trying to discard. In the example below, we want to retrieve the state from before the most recent commit (HEAD~1), which is commit f22b25e. We use the . to mean all files:\n                      \n                      The fact that files can be restored one by one tends to change the way people organize their work. If everything is in one large document, it’s hard (but not impossible) to undo changes to the introduction without also undoing changes made later to the conclusion. If the introduction and conclusion are stored in separate files, on the other hand, moving backward and forward in time becomes much easier."
  },
  {
    "objectID": "episodes/06-reverting-changes.html#reverting-changes",
    "href": "episodes/06-reverting-changes.html#reverting-changes",
    "title": "Version Control with Git",
    "section": "Reverting Changes",
    "text": "Reverting Changes\n                      Generally it is best to spot and revert mistakes before the commit stage. The table below summarises how to revert a change depending on where in the commit process you are:\n                      \n                      \n                      \n                      To revert files you have …\n                      git command\n                      \n                      \n                      \n                      \n                      modified\n                      $ git restore &lt;files&gt;\n                      \n                      \n                      staged\n                      $ git restore --staged &lt;files&gt;\n                      \n                      \n                      committed\n                      $ git revert &lt;commit&gt;\n                      \n                      \n                      \n                      We have already practised restoring modified files. Now let’s practise restoring staged changes. Go ahead and make a similar change like you did earlier to your forecast.md:\n                      $ nano forecast.md\n$ cat forecast.md\n                      # Forecast\n\n## Today\n\nCloudy with a chance of sun.\nMild temperatures around 16 °C.\n\n## Tomorrow\n\nMorning rainbows followed by light showers.\nAnother ill-considered change.\n                      Add the changes:\n                      $ git add forecast.md\n                      Now git status shows:\n                      $ git status\n                      On branch forecast\nChanges to be committed:\n  (use \"git restore --staged &lt;file&gt;...\" to unstage)\n    modified:   forecast.md\n                      And we can use the hint to unstage our changes:\n                      $ git restore --staged forecast.md\n                      Our modifications to the forecast.md file have been unstaged and are now back in the working copy. We can restore these modifications fully with:\n                      $ git restore forecast.md\n                      \n                      \n                      \n                      \n                      \n                      Recovering Older Versions of a File\n                      \n                      Jennifer has made changes to the Python script that she has been working on for weeks, and the modifications she made this morning “broke” the script and it no longer runs. She has spent ~ 1hr trying to fix it, with no luck…\n                      Luckily, she has been keeping track of her project’s versions using Git! Which commands below will let her recover the last committed version of her Python script called data_cruncher.py?\n                      \n                      $ git restore\n                      $ git restore data_cruncher.py\n                      $ git restore -s HEAD~1 data_cruncher.py\n                      $ git restore -s &lt;unique ID of last commit&gt; data_cruncher.py\n                      Both 2 and 4\n                      \n                      \n                      Solution (Solution). The answer is (5)-Both 2 and 4.\n                      The restore command restores files from the repository, overwriting the files in your working directory. Answers 2 and 4 both restore the latest version in the repository of the file data_cruncher.py. Answer 2 uses HEAD to indicate the latest, whereas answer 4 uses the unique ID of the last commit, which is what HEAD means.\n                      Answer 3 gets the version of data_cruncher.py from the commit before HEAD, which is NOT what we wanted.\n                      Answer 1 results in an error. You need to specify a file to restore. If you want to restore all files you should use git restore .\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Reverting a Commit\n                      \n                      Ahmed is collaborating with colleagues on a Python script. He realizes his last commit to the project’s repository contained an error, and wants to undo it. Ahmed wants to undo it correctly so everyone in the project’s repository gets the correct change. The command git revert [erroneous commit ID] will create a new commit that reverses the erroneous commit.\n                      The command git revert is different from git restore -s [commit ID] .. git restore restores files within the local repository to a previous state, whereas git revert restores the files to a previous state and adds then commits these changes to the local repository. So git revert here is the same as git restore -s [commit ID]\n                      followed by git commit -am Reverts: [commit].\n                      git revert undoes a whole commit whereas git restore -s can be used restore individual files.\n                      Below are the right steps and explanations for Ahmed to use git revert, what is the missing command?\n                      \n                      ________ # Look at the git history of the project to find the commit ID\n                      Copy the ID (the first few characters of the ID, e.g. 0b1d055).\n                      git revert [commit ID]\n                      Type in the new commit message.\n                      Save and close.\n                      \n                      \n                      Solution (Solution). The command git log lists project history with commit IDs.\n                      The command git show HEAD shows changes made at the latest commit, and lists the commit ID; however, Ahmed should double-check it is the correct commit, and no one else has committed changes to the repository.\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Keypoints\n                      \n                      \n                      git restore recovers old versions of files.\n                      git reset undoes staged changes.\n                      git revert reverses a commit."
  },
  {
    "objectID": "episodes/08-collab.html",
    "href": "episodes/08-collab.html",
    "title": "Version Control with Git",
    "section": "",
    "text": "Skip to main content\n          \n            \n              \n                \n                                              \n            \n            \n              \n                \n                  \n                    \n                      \n                    \n                    \n                  \n                  \n                    \n                      \n                        \n                          \n                        \n                        Light\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Dark\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Auto\n                        \n                          \n                        \n                      \n                    \n                  \n                \n              \n              \n              \n                        \n                   Instructor View \n                \n                \n                  Learner View\n                \n                      \n            \n          \n          \n        \n        \n          \n            \n              \n              Menu\n            \n            \n              \n            \n            \n              Version Control with Git\n            \n            \n              \n            \n            \n              \n                \n                  \n                    Version Control with Git\n                  \n                \n                \n                \n                  \n                  Setup\n                \n                        \n                  Key Points\n                \n                \n                  Instructor Notes\n                \n                \n                  Extract All Images\n                \n                                  \n                    \n                      More \n                    \n                    \n                      \n\n                      Git Cheatsheets for Quick Reference\n                      Discussion\n                      FCM vs Git Cheat Sheet\n                      Quick Start Repository Guide            \n                  \n                      \n            \n            \n            \n            \n              \n                \n                \n              \n              \n                \n              \n            \n          \n        \n\n        \n          Version Control with Git\n        \n\n        \n          \n            0%\n          \n          \n            \n            \n          \n            \n      \n        \n          \n            \n              \n                \n              \n              \n                \n                  \n                    \n                      \n                        \n                          \n                        \n                        Toggle Theme\n                      \n                      \n                        \n                          \n                            \n                              \n                            \n                            Light\n                            \n                              \n                            \n                          \n                        \n                        \n                          \n                            \n                              \n                            \n                            Dark\n                            \n                              \n                            \n                          \n                        \n                        \n                          \n                            \n                              \n                            \n                            Auto\n                            \n                              \n                            \n                          \n                        \n                      \n                    \n                  \n                \n                \n                  \n                    \n                      \n                        \n                                            \n                            \n                               Learner View\n                            \n                          \n                          \n                            \n                              Instructor View\n                            \n                          \n                                          \n                      \n                    \n                  \n                  \n                  \n                \n\n                \n                  \n\n                    \n                      ../EPISODES\n                    \n                    \n\n                      \n                        \n\n                                \n                                  \n                                    \n                                      Summary and Setup\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      1. Automated Version Control\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      2. Setting Up Git\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      3. Creating a Repository\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      4. Branches\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      5. Tracking Changes\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      6. Exploring History\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      7. Reverting Changes\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      8. Ignoring Things\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      9. Break\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      10. Remotes in GitHub\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      11. Exploring GitHub\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      12. Exploring History on GitHub\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      13. Pull Requests\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      14. Configuring GitHub\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      15. End\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      16. Open Science\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      17. Licensing\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      18. Citation\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      19. Hosting\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      20. 'Using Git from RStudio'\n                                    \n                                  \n                                              \n                    \n                  \n                \n                \n\n                \n                          \n                    \n                      \n                        \n                          RESOURCES\n                        \n                      \n                      \n                        \n                          \n                            \n                            \n                              \n                              Setup\n                            \n                                                \n                              Key Points\n                            \n                            \n                              Instructor Notes\n                            \n                            \n                              Extract All Images\n                            \n                                                \n                          \n                        \n                      \n                    \n                  \n                  \n                  \n                  \n                  \n\n                  \n                              \n                \n              \n            \n          \n                        For the next step, get into pairs. One person will be the “Owner” and the other will be the “Collaborator”. The goal is that the Collaborator add changes into the Owner’s repository. We will switch roles at the end, so both persons will play Owner and Collaborator.\n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               Practicing By Yourself\n                                               \n                                               \n                                               \n                                               If you’re working through this lesson on your own, you can carry on by opening a second terminal window. This window will represent your partner, working on another computer. You won’t need to give anyone access on GitHub, because both ‘partners’ are you.\n                                               \n                                               \n                                               The Owner needs to give the Collaborator access. In your repository page on GitHub, click the “Settings” button on the right, select “Collaborators”, click “Add people”, and then enter your partner’s username.\n                                               \n                                               To accept access to the Owner’s repo, the Collaborator needs to go to https://github.com/notifications or check for email notification. Once there she can accept access to the Owner’s repo.\n                                               Next, the Collaborator needs to download a copy of the Owner’s repository to her machine. This is called “cloning a repo”.\n                                               The Collaborator doesn’t want to overwrite her own version of weather.git, so needs to clone the Owner’s repository to a different location than her own repository with the same name.\n                                               To clone the Owner’s repo into her Desktop folder, the Collaborator enters:\n                                               $ git clone git@github.com:mo-eormerod/weather.git ~/Desktop/mo-eormerod-weather\n                                               Replace ‘mo-eormerod’ with the Owner’s username.\n                                               If you choose to clone without the clone path (~/Desktop/mo-eormerod-weather) specified at the end, you will clone inside your own weather folder! Make sure to navigate to the Desktop folder first.\n                                               \n                                               The Collaborator can now make a change in her clone of the Owner’s repository, exactly the same way as we’ve been doing before:\n                                               $ cd ~/Desktop/mo-eormerod-weather\n$ nano shipping-forecast.md\n$ cat shipping-forecast.md\n                                               New high expected Dover 1028 by 0600 tomorrow.\nLow Trafalgar 1013 losing its identity\n                                               $ git add shipping-forecast.md\n$ git commit -m \"Add in the shipping forecast\"\n                                                1 file changed, 2 insertion(+)\n create mode shipping-forecast.md\n                                               Then push the change to the Owner’s repository on GitHub:\n                                               $ git push origin main\n                                               Enumerating objects: 4, done.\nCounting objects: 4, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (2/2), done.\nWriting objects: 100% (3/3), 306 bytes, done.\nTotal 3 (delta 0), reused 0 (delta 0)\nTo https://github.com/mo-eormerod/weather.git\n   9272da5..29aba7c  main -&gt; main\n                                               Note that we didn’t have to create a remote called origin: Git uses this name by default when we clone a repository. (This is why origin was a sensible choice earlier when we were setting up remotes by hand.)\n                                               Take a look at the Owner’s repository on GitHub again, and you should be able to see the new commit made by the Collaborator. You may need to refresh your browser to see the new commit.\n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               Some more about remotes\n                                               \n                                               \n                                               \n                                               In this episode and the previous one, our local repository has had a single “remote”, called origin. A remote is a copy of the repository that is hosted somewhere else, that we can push to and pull from, and there’s no reason that you have to work with only one. For example, on some large projects you might have your own copy in your own GitHub account (you’d probably call this origin) and also the main “upstream” project repository (let’s call this upstream for the sake of examples). You would pull from upstream from time to time to get the latest updates that other people have committed.\n                                               Remember that the name you give to a remote only exists locally. It’s an alias that you choose - whether origin, or upstream, or mo-eormerod - and not something intrinstic to the remote repository.\n                                               The git remote family of commands is used to set up and alter the remotes associated with a repository. Here are some of the most useful ones:\n                                               \n                                               git remote -v lists all the remotes that are configured (we already used this in the last episode)\n                                               git remote add [name] [url] is used to add a new remote\n                                               git remote remove [name] removes a remote. Note that it doesn’t affect the remote repository at all - it just removes the link to it from the local repo.\n                                               git remote set-url [name] [newurl] changes the URL that is associated with the remote. This is useful if it has moved, e.g. to a different GitHub account, or from GitHub to a different hosting service. Or, if we made a typo when adding it!\n                                               git remote rename [oldname] [newname] changes the local alias by which a remote is known - its name. For example, one could use this to change upstream to mo-eormerod.\n                                               \n                                               \n                                               \n                                               To download the Collaborator’s changes from GitHub, the Owner now enters:\n                                               $ git pull origin main\n                                               remote: Enumerating objects: 4, done.\nremote: Counting objects: 100% (4/4), done.\nremote: Compressing objects: 100% (2/2), done.\nremote: Total 3 (delta 0), reused 3 (delta 0), pack-reused 0\nUnpacking objects: 100% (3/3), done.\nFrom https://github.com/mo-eormerod/weather\n * branch            main     -&gt; FETCH_HEAD\n   9272da5..29aba7c  main     -&gt; origin/main\nUpdating 9272da5..29aba7c\nFast-forward\n shipping-forecast.md | 2 +\n 1 file changed, 2 insertion(+)\n create mode 100644 shipping-forecast.md\n                                               Now the three repositories (Owner’s local, Collaborator’s local, and Owner’s on GitHub) are back in sync.\n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               A Basic Collaborative Workflow\n                                               \n                                               \n                                               \n                                               In practice, it is good to be sure that you have an updated version of the repository you are collaborating on, so you should git pull before making our changes. The basic collaborative workflow would be:\n                                               \n                                               update your local repo with git pull origin main,\n                                               make your changes and stage them with git add,\n                                               commit your changes with git commit -m, and\n                                               upload the changes to GitHub with git push origin main\n                                               \n                                               It is better to make many commits with smaller changes rather than of one commit with massive changes: small commits are easier to read and review.\n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               Switch Roles and Repeat\n                                               \n                                               Switch roles and repeat the whole process.\n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               Review Changes\n                                               \n                                               The Owner pushed commits to the repository without giving any information to the Collaborator. How can the Collaborator find out what has changed with command line? And on GitHub?\n                                               \n                                               Solution (Solution). On the command line, the Collaborator can use git fetch origin main to get the remote changes into the local repository, but without merging them. Then by running git diff main origin/main the Collaborator will see the changes output in the terminal.\n                                               On GitHub, the Collaborator can go to the repository and click on “commits” to view the most recent commits pushed to the repository.\n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               Comment Changes in GitHub\n                                               \n                                               The Collaborator has some questions about one line change made by the Owner and has some suggestions to propose.\n                                               With GitHub, it is possible to comment on the diff of a commit. Over the line of code to comment, a blue comment icon appears to open a comment window.\n                                               The Collaborator posts her comments and suggestions using the GitHub interface.\n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               Version History, Backup, and Version Control\n                                               \n                                               Some backup software can keep a history of the versions of your files. They also allows you to recover specific versions. How is this functionality different from version control? What are some of the benefits of using version control, Git and GitHub?\n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               Keypoints\n                                               \n                                               \n                                               git clone copies a remote repository to create a local repository with a remote called origin automatically set up.\n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n      \n      \t\t\n      \t\t\t\n      \t\t\t\n              This lesson is subject to the &lt;(Code of Conduct)&gt;\n              Edit on GitHub\n              | Contributing\n              | Source\n      \t\t\t\tCite | Contact | About\n      \t\t\t\n      \t\t\t\n                      Materials licensed under &lt;({license})&gt; by the authors\n                      Template licensed under &lt;(CC-BY 4.0)&gt; by {template_authors}\n              Built with Quarto"
  },
  {
    "objectID": "episodes/09-branches.html",
    "href": "episodes/09-branches.html",
    "title": "Version Control with Git",
    "section": "",
    "text": "Skip to main content\n          \n            \n              \n                \n                                              \n            \n            \n              \n                \n                  \n                    \n                      \n                    \n                    \n                  \n                  \n                    \n                      \n                        \n                          \n                        \n                        Light\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Dark\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Auto\n                        \n                          \n                        \n                      \n                    \n                  \n                \n              \n              \n              \n                        \n                   Instructor View \n                \n                \n                  Learner View"
  },
  {
    "objectID": "episodes/09-branches.html#creating-branches",
    "href": "episodes/09-branches.html#creating-branches",
    "title": "Version Control with Git",
    "section": "Creating Branches",
    "text": "Creating Branches\n                      Our current repository looks something like this:\n                      \n                      \n                      \n                      \n                      \n                          gitGraph\n                              accDescr {A Git graph showing one commit, the root-commit on the main branch.}\n                              commit id: '6f12a47'\n                      \n                      \n                      \n                      \n                      \n                      \n                      To make any changes we should create a new branch. There are several ways to create a branch and switch to the new branch. While it’s good to be aware of all these different methods we recommend using git switch -c.\n                      You should ensure the branch has a suitable unique name which will help you identify what the branch is for; even after several months of inactivity.\n                      We are going to add a weather forecast to our repository so our branch will be named forecast:\n                      \n                      \n                      git switch -c\n                      git switch is a more modern command to navigate between branches. git switch used with the -c flag automatically creates and switches you to a new branch:\n                      $ git switch -c forecast\n                      Switched to branch 'forecast'\n                      \n                      \n                      git branch\n                      To create a new branch use git branch &lt;branch-name&gt;:\n                      $ git branch forecast\n                      Now run git status and you will see you’re still on the main branch. To navigate between branches use git switch &lt;branch-name&gt;:\n                      $ git switch forecast\n                      Switched to branch 'forecast'\n                      \n                      \n                      git checkout -b\n                      The git checkout command can also be used to navigate between branches. git checkout used with the -b flag automatically creates and switches you to the new branch:\n                      $ git checkout -b forecast\n                      Switched to branch 'forecast'\n                      \n                      \n                      Running git status now should output:\n                      $ git status\n                      On branch forecast\nnothing to commit, working tree clean\n                      Now we have created but not committed anything to this new branch so our repository looks like this:\n                      \n                      \n                      \n                      \n                      \n                          gitGraph\n                              accDescr {A Git graph showing the root-commit on the main branch and a new forecast branch with no commits.}\n                              commit id: '6f12a47'\n                              branch forecast\n                      \n                      \n                      \n                      \n                      \n                      \n                      If we run git branch we can see the branches that exist in our repository.\n                      $ git branch\n                      * forecast\n  main\n                      The * indicates we are now on the forecast branch.\n                      \n                      Unique Branch Names\n                      To avoid creating a branch with the same name as a collaborators branch it is common to prefix the branch name with an Issue (ticket) number.\n                      You might choose to include your initials or username in your branch although this is less common than an Issue number.\n                      Separate words in branch names with - or _ depending on your teams working practices. The Git & GitHub Working Practices lesson, which you can take after this introductory lesson, will help you choose the working practices that are right for you and your team.\n                      \n                      \n                      \n                      \n                      \n                      \n                      Switching Between Branches\n                      \n                      How would you switch back to the main branch from the forecast branch?\n                      \n                      Solution. \n                      $ git switch main\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Typos when creating branches\n                      \n                      Help! Luca made a typo when naming their branch, seesonal-forecast, how can they fix the branch name?\n                      Hint: Look at the git documentation for the git branch command.\n                      \n                      Solution. The -m flag used with git branch lets you rename a branch.\n                      $ git branch -m &lt;old-branch-name&gt; &lt;new-branch-name&gt;\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Branch start-points\n                      \n                      The commands we used above created a branch from the HEAD of the main branch because we ran git switch from main. How would you create a branch that branched off at an earlier commit that isn’t HEAD?\n                      Hint: Look at the git documentation for the git switch command.\n                      \n                      Solution. The git switch command lets you define a &lt;start-point&gt; to branch from:\n                      $ git switch -c &lt;branch-name&gt; &lt;start-point&gt;\n                      &lt;branch-name&gt; is the name of the new branch. &lt;start-point&gt; can be a branch name, a commit-id, or a tag.\n                      This functionality also applies to the git branch command:\n                      git branch &lt;branch-name&gt; &lt;start-point&gt;"
  },
  {
    "objectID": "episodes/09-branches.html#deleting-branches",
    "href": "episodes/09-branches.html#deleting-branches",
    "title": "Version Control with Git",
    "section": "Deleting Branches",
    "text": "Deleting Branches\n                      A colleague of yours gets really excited about using branches and creates a new one:\n                      $ git switch -c shipping-forecast\n                      Switched to a new branch 'shipping-forecast'\n                      They then check their branches:\n                      $ git branch -vv\n                        forecast          6f12a47 Initial commit\n  main              6f12a47 Initial commit\n* shipping-forecast 6f12a47 Initial commit\n                      Your colleague decides to delete the branch since today’s shipping forecast isn’t ready. To delete a branch first switch to any other branch:\n                      $ git switch forecast\n                      and then delete the branch with git branch -d:\n                      $ git branch -d shipping-forecast\n                      Deleted branch shipping-forecast (was 6f12a47).\n                      \n                      \n                      \n                      \n                      \n                      \n                      Check your branch point\n                      \n                      \n                      \n                      Always switch to the branch you want to branch from, usually main, or explicitly specify a branch point when creating new branches. This helps avoid accidentally branching of a branch which isn’t main if you didn’t mean to.\n                      Imagine a colleague has added more files to their forecast branch and just created a tidal-forecast branch.\n                      They run:\n                      $ git branch -vv\n                        forecast       8136c6f Add in a seasonal forecasts file\n  main           6f12a47 Initial commit\n* tidal-forecast 8136c6f Add in a seasonal forecasts file\n                      Here the hash for the tidal-forecast branch is the same as the forecast branch so tidal-forecast is not branched off main. If they meant to branch off main they should delete this branch, and re-create it from the correct branch point.\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Deleting a branch that is checked out\n                      \n                      What happens if you:\n                      \n                      Create a new branch and switch to it\n                      Try to delete the new branch while it’s checked out\n                      \n                      \n                      Solution. Git won’t let you delete a branch you are currently on! Try it for yourself:\n                      $ git switch -c climate\n$ git branch -D climate\n                      error: Cannot delete branch 'climate' checked out at '~/Documents/weather'\n                      Note that even with the -D, force delete, flag the branch wasn’t deleted.\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Keypoints\n                      \n                      \n                      git status shows you the branch you’re currently on.\n                      git switch -c &lt;branch-name&gt; creates a new branch and switches you to it. Make sure you know what branch you are branching from before using git switch without a start-point!\n                      git switch -c &lt;branch-name&gt; &lt;start-point&gt; lets you define the start-point to branch off, via another branch name, a commit ID, or a tag.\n                      git switch &lt;branch-name&gt; switches you to another branch that already exists.\n                      git branch -vv shows you all the branches in the repository.\n                      git branch -m &lt;old-branch-name&gt; &lt;new-branch-name&gt; renames branches.\n                      git branch -d &lt;branch-name&gt; deletes a branch. Use the -D flag instead of -d to force delete the branch."
  },
  {
    "objectID": "episodes/09-github-history.html",
    "href": "episodes/09-github-history.html",
    "title": "Version Control with Git",
    "section": "",
    "text": "Skip to main content\n          \n            \n              \n                \n                                              \n            \n            \n              \n                \n                  \n                    \n                      \n                    \n                    \n                  \n                  \n                    \n                      \n                        \n                          \n                        \n                        Light\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Dark\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Auto\n                        \n                          \n                        \n                      \n                    \n                  \n                \n              \n              \n              \n                        \n                   Instructor View \n                \n                \n                  Learner View"
  },
  {
    "objectID": "episodes/09-github-history.html#viewing-the-history-of-a-repository-on-github",
    "href": "episodes/09-github-history.html#viewing-the-history-of-a-repository-on-github",
    "title": "Version Control with Git",
    "section": "Viewing the History of a Repository on GitHub",
    "text": "Viewing the History of a Repository on GitHub\n                      In an earlier episode, we used git log on the command line in our local repository to show the commits to our branch.\n                      We can also see the commits to our branch on GitHub. But first we need to push our local branch to GitHub.\n                      Make sure you are on the forecast branch:\n                      $ git switch forecast\n                      Now we can push our local branch to GitHub:\n                      $ git push\n                      Navigate to your weather GitHub repo:\n                      \n                      Select the forecast branch from the branch drop down box labelled main:\n                      \n                      Click on Commits:\n                      \n                      This commits page shows all the commits on your branch:\n                      \n                      The Git commit unique identifiers (SHAs) here on GitHub match with those shown after running git log on the command line in your local branch."
  },
  {
    "objectID": "episodes/09-github-history.html#viewing-differences-between-commits",
    "href": "episodes/09-github-history.html#viewing-differences-between-commits",
    "title": "Version Control with Git",
    "section": "Viewing Differences Between Commits",
    "text": "Viewing Differences Between Commits\n                      In an earlier episode, we used git diff on the command line in our local repository to show the differences between two commits on our branch.\n                      We can also see these differences on GitHub.\n                      In a new tab, navigate to your weather GitHub repo then add compare to the end of the URL. The URL should follow https://github.com/&lt;your-user-name&gt;/weather/compare:\n                      \n                      Select one of the Git commit SHAs from the Commits page and add it to the first drop down box labelled base: main.\n                      Then select a second Git commit SHA from the Commits page and add it to the second drop down box labelled compare: main.\n                      The resulting page will show the differences between the two Git commit SHAs:\n                      `\n                      \n                      \n                      \n                      \n                      \n                      Keypoints\n                      \n                      \n                      The Commits page displays the history for the specified branch.\n                      Adding compare to the end of the repository URL displays differences between commits."
  },
  {
    "objectID": "episodes/10-pull-requests.html",
    "href": "episodes/10-pull-requests.html",
    "title": "Version Control with Git",
    "section": "",
    "text": "Skip to main content\n          \n            \n              \n                \n                                              \n            \n            \n              \n                \n                  \n                    \n                      \n                    \n                    \n                  \n                  \n                    \n                      \n                        \n                          \n                        \n                        Light\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Dark\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Auto\n                        \n                          \n                        \n                      \n                    \n                  \n                \n              \n              \n              \n                        \n                   Instructor View \n                \n                \n                  Learner View"
  },
  {
    "objectID": "episodes/10-pull-requests.html#creating-a-pull-request",
    "href": "episodes/10-pull-requests.html#creating-a-pull-request",
    "title": "Version Control with Git",
    "section": "Creating a Pull Request",
    "text": "Creating a Pull Request\n                      In the previous episodes we developed our changes on the forecast branch. Let’s use a PR to merge these changes back into the main branch.\n                      Navigate to your weather GitHub repo. You should see a notification appear with the text forecast had recent pushes.\n                      \n                      Click on the green Compare & pull request button.\n                      \n                      This page lets us create a new pull request from the forecast branch. The title has been autofilled with the message of the last commit. You can see all the commits on the branch at the bottom of this page.\n                      Make sure the title and description are clear. Then press the green Create pull request button.\n                      \n                      \n                      \n                      \n                      \n                      \n                      Draft Pull Requests\n                      \n                      \n                      \n                      If your changes are not ready for review yet you can mark the pull request as a draft:\n                      \n                      Draft pull requests can’t be merged and code reviewers aren’t automatically assigned.\n                      \n                      \n                      \n                      Notice we’ve now moved to the Pull Requests tab. This is PR #1 and underneath the title we see:\n                      \n                      wants to merge 4 commits into main from forecast\n                      \n                      If you need to change the title or the branch you’re merging into, in this case main, click on the edit button to the far right of the title.\n                      The PR has four tabs below the title section:\n                      \n                      Conversation is where code and science reviews occur\n                      Commits shows all the commits we want to merge\n                      Checks shows the output from any automated code and science checks\n                      Files Changed shows a diff (difference) between the branch with your changes, forecast, and the target branch, main.\n                      \n                      At this point you should use the diff in the Files changed tab to check your changes."
  },
  {
    "objectID": "episodes/10-pull-requests.html#rulesets",
    "href": "episodes/10-pull-requests.html#rulesets",
    "title": "Version Control with Git",
    "section": "Rulesets",
    "text": "Rulesets\n                      GitHub Rulesets control how people can interact with your repository.\n                      When we opened our first PR we were prompted to Require approval from specific reviewers before merging. Click on the Add rule button.\n                      This page lets us create a rule preventing anyone from committing directly into the main branch. All repositories should have some form of protection using these rulesets. To add a rule to protect the main branch:\n                      \n                      Enter the Ruleset Name main\n                      Change the Enforcement status to Active\n                      Scroll down to Target branches. Click Add target and select Default branch (which in our weather repo is main).\n                      Scroll down to Rules. Tick the Require a pull request before merging option.\n                      At the bottom of the page click the green Create button.\n                      \n                      Now even if you commit to main locally you will not be able to push those changes to GitHub. To add changes you MUST open a PR and go through code and science review.\n                      \n                      \n                      \n                        \n                        \n                        Screenshot of the Rule Protecting Main\n                        \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Private Personal Repos\n                      Rulesets cannot be created on private repos in your personal space unless you have a paid GitHub plan."
  },
  {
    "objectID": "episodes/10-pull-requests.html#merging-a-pull-request",
    "href": "episodes/10-pull-requests.html#merging-a-pull-request",
    "title": "Version Control with Git",
    "section": "Merging a Pull Request",
    "text": "Merging a Pull Request\n                      Navigate back to your PR. To merge the PR click on the dropdown, and select Squash and merge. Squashing before merging will combine all the commits on your branch and ‘squash’ them into a single new commit on the target branch, in this case main. This helps keep the commit history of the main branch tidy and linear1.\n                      \n                      Once you’ve selected the squash option click on the green Squash and merge button. Edit the commit title so that the PR number is at the start of the message. For instance:\n                      Add in a forecast file (#1)\n                      Would be changed to:\n                      #1 Add in a forecast file\n                      This makes it easier to navigate to the PR for a change when you’re on the GitHub repositories code view. Change the description if necessary. Then click on Confirm squash and merge.\n                      \n                      The PR is now successfully merged into the main branch. We can safely delete the forecast branch from the GitHub repo. Click on the Delete branch button."
  },
  {
    "objectID": "episodes/10-pull-requests.html#updating-your-local-repo",
    "href": "episodes/10-pull-requests.html#updating-your-local-repo",
    "title": "Version Control with Git",
    "section": "Updating your Local Repo",
    "text": "Updating your Local Repo\n                      The new forecast.md file is currently only on the main branch in GitHub. We should pull the changes down to our local copy. Switch to the main branch:\n                      $ git switch main\n                      Pull down the changes from GitHub:\n                      $ git pull\n                      remote: Enumerating objects: 4, done.\nremote: Counting objects: 100% (4/4), done.\nremote: Compressing objects: 100% (2/2), done.\nremote: Total 3 (delta 1), reused 2 (delta 1), pack-reused 0 (from 0)\nUnpacking objects: 100% (3/3), 1.01 KiB | 173.00 KiB/s, done.\nFrom github.com:mo-eormerod/weather\n   41c775b..49c845c  main       -&gt; origin/main\nUpdating 41c775b..49c845c\nFast-forward\n .gitignore  | 2 ++\n forecast.md | 9 +++++++++\n 2 files changed, 11 insertions(+)\n create mode 100644 .gitignore\n create mode 100644 forecast.md\n                      git pull and GitHub’s Pull Requests are not the same. GitHub Pull Requests are where we performed code and science review, then merged our feature branch changes into the main branch. git pull is fetching changes to the remote branch on GitHub and merging them into your local copy.\n                      \n                      \n                      \n                      \n                      \n                      \n                      You may need to tell Git what to do\n                      \n                      \n                      \n                      If you see the below in your output, Git is asking what it should do.\n                      hint: You have divergent branches and need to specify how to reconcile them.\nhint: You can do so by running one of the following commands sometime before\nhint: your next pull:\nhint:\nhint:   git config pull.rebase false  # merge (the default strategy)\nhint:   git config pull.rebase true   # rebase\nhint:   git config pull.ff only       # fast-forward only\nhint:\nhint: You can replace \"git config\" with \"git config --global\" to set a default\nhint: preference for all repositories. You can also pass --rebase, --no-rebase,\nhint: or --ff-only on the command line to override the configured default per\nhint: invocation.\n                      In newer versions of Git it gives you the option of specifying different behaviours when a pull would merge divergent branches. The Git & GitHub Working Practices training will help you decide which option is best for your teams repositories. For now we will use the fast-forward only strategy. To use this strategy run the following command to select it as the default thing Git should do.\n                      $ git config pull.ff only\n                      Then attempt the pull again.\n                      $ git pull\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      How do I know there are Changes to Pull?\n                      \n                      \n                      \n                      git pull actually runs two commands:\n                      $ git fetch\n$ git merge\n                      The git fetch command fetches any changes on the GitHub remote. Then git merge merges those changes into your local branch.\n                      If you’re not sure if there are changes to pull; or you’re not sure you want to merge the changes right away run git fetch and examine the output before running git pull.\n                      Example git fetch output showing changes on the remote main branch being fetched:\n                      remote: Enumerating objects: 4, done.\nremote: Counting objects: 100% (4/4), done.\nremote: Compressing objects: 100% (2/2), done.\nremote: Total 3 (delta 1), reused 2 (delta 1), pack-reused 0 (from 0)\nUnpacking objects: 100% (3/3), 1010 bytes | 144.00 KiB/s, done.\nFrom github.com:mo-ormerod/weather\n   49c845c..e4bdab8  main       -&gt; origin/main\n                      \n                      \n                      \n                      Cleaning up your Local Branches\n                      We deleted our forecast dev branch from GitHub but we still have a local copy. Let’s tidy up by deleting it. To see all our branches including remote GitHub branches run:\n                      $ git branch -avv\n                        forecast                13e0329 [origin/forecast] Ignore png files and the data folder\n* main                    d1da035 [origin/main] #1 Add in a forecast file\n  remotes/origin/forecast 13e0329 Ignore png files and the data folder\n  remotes/origin/main     d1da035 #1 Add in a forecast file\n                      The first two branches are our local branches, the last two are the GitHub remotes. To remove references to remote branches that have been deleted on GitHub run:\n                      $ git remote prune origin\n                      Pruning origin\nURL: git@github.com:mo-eormerod/weather.git\n * [pruned] origin/forecast\n                      Running git branch -avv again now shows:\n                        forecast            13e0329 [origin/forecast: gone] Ignore png files and the data folder\n* main                d1da035 [origin/main] #1 Add in a forecast file\n  remotes/origin/main d1da035 #1 Add in a forecast file\n                      You can see the remote reference for the forecast branch has been removed. The second line with the local forecast branch now has gone in the brackets referencing the remote branch.\n                      To delete our local branch run:\n                      $ git branch -D forecast\n                      Running git branch -avv again now shows:\n                      * main                d1da035 [origin/main] #1 Add in a forecast file\n  remotes/origin/main d1da035 #1 Add in a forecast file\n                      You’ve now successfully merged and tidied up after your first pull request. Remember when making changes create a new branch and open a PR, NEVER commit to the main branch.\n                      \n                      \n                      \n                      \n                      \n                      \n                      Automatically Prune Deleted Remote Branches\n                      \n                      \n                      \n                      If you set the following Git configuration:\n                      $ git config --global fetch.prune true\n                      Git will automatically prune the links to remote branches that were deleted on GitHub when you run git fetch or git pull.\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Adding in a seasonal-forecast.md file\n                      \n                      Try adding in a seasonal forecast using the following steps:\n                      \n                      Create a new branch with an appropriate name and switch to it\n                      Create the seasonal-forecast.md file\n                      Add and commit the new file\n                      Push the changes to GitHub\n                      Open a PR on GitHub\n                      Merge the PR, delete the branch on GitHub\n                      Pull down the changes to your local copy\n                      Tidy up your branches\n                      \n                      \n                      Solution. \n                      \n                      Create a new branch with an appropriate name and switch to it\n                      \n                      $ git switch -c add-seasonal-forecast\n                      Switched to a new branch 'add-seasonal-forecast'\n                      \n                      Create the seasonal-forecast.md file\n                      \n                      $ nano seasonal-forecast.md\n$ cat seasonal-forecast.md\n                      # Seasonal Forecast\n\n- Winter is wet\n- Summer is hot\n                      \n                      Add and commit the new file\n                      \n                      $ git add seasonal-forecast.md\n$ git commit -m \"Add in a seasonal-forecast.md file\"\n                      [add-seasonal-forecast aeaf804] Add in a seasonal-forecast.md file\n 1 file changed, 4 insertions(+)\n create mode 100644 seasonal-forecast.md\n                      \n                      Push the changes to GitHub\n                      \n                      $ git push\n                      Enumerating objects: 4, done.\nCounting objects: 100% (4/4), done.\nDelta compression using up to 4 threads\nCompressing objects: 100% (3/3), done.\nWriting objects: 100% (3/3), 326 bytes | 163.00 KiB/s, done.\nTotal 3 (delta 1), reused 0 (delta 0), pack-reused 0\nremote: Resolving deltas: 100% (1/1), completed with 1 local object.\nremote: \nremote: Create a pull request for 'add-seasonal-forecast' on GitHub by visiting:\nremote:      https://github.com/mo-ormerod/weather/pull/new/add-seasonal-forecast\nremote: \nTo github.com:mo-ormerod/weather.git\n * [new branch]      add-seasonal-forecast -&gt; add-seasonal-forecast\nbranch 'add-seasonal-forecast' set up to track 'origin/add-seasonal-forecast'.\n                      \n                      Open a PR as shown in this very episode!\n                      Merge the PR, delete the branch on GitHub\n                      Pull down the changes to your local copy\n                      \n                      Switch to main:\n                      $ git switch main\n                      If you want to check if there are changes to pull:\n                      $ git fetch\n                      remote: Enumerating objects: 4, done.\nremote: Counting objects: 100% (4/4), done.\nremote: Compressing objects: 100% (2/2), done.\nremote: Total 3 (delta 1), reused 2 (delta 1), pack-reused 0 (from 0)\nUnpacking objects: 100% (3/3), 1010 bytes | 144.00 KiB/s, done.\nFrom github.com:mo-ormerod/weather\n   49c845c..e4bdab8  main       -&gt; origin/main\n                      Then merge the changes:\n                      $ git pull\n                      Updating 49c845c..e4bdab8\nFast-forward\n seasonal-forecast.md | 4 +++\n 1 file changed, 4 insertions(+)\n create mode 100644 seasonal-forecast.md\n                      \n                      Tidy up your branches\n                      \n                      $ git remote prune origin\n                      Pruning origin\nURL: git@github.com:mo-ormerod/weather.git\n * [pruned] origin/add-seasonal-forecast\n                      $ git branch -D add-seasonal-forecast\n                      Deleted branch add-seasonal-forecast (was aeaf804).\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Keypoints\n                      \n                      \n                      A pull request (PR) is where your changes go through code and science review.\n                      PRs can contain automated checks to help speed up the review process and avoid human error.\n                      The PR will automatically create an easy to read diff (difference) of the changes for the review (in the Files changed tab).\n                      Squashing and merging takes all the commits in your PR and ‘squashes’ them into a single new commit on the target branch.\n                      git fetch fetches changes to the GitHub remote.\n                      git pull pulls and merges changes to the GitHub remote into your local copy.\n                      git branch -avv displays all your local branches including references to any remote branches.\n                      git remote prune origin removes references to remote branches that have been deleted on GitHub."
  },
  {
    "objectID": "episodes/10-pull-requests.html#footnotes",
    "href": "episodes/10-pull-requests.html#footnotes",
    "title": "Version Control with Git",
    "section": "Footnotes",
    "text": "Footnotes\n                      \n                      \n                      Microsoft Azure Learning Squash Merge↩︎"
  },
  {
    "objectID": "episodes/11-licensing.html",
    "href": "episodes/11-licensing.html",
    "title": "Version Control with Git",
    "section": "",
    "text": "Skip to main content\n          \n            \n              \n                \n                                              \n            \n            \n              \n                \n                  \n                    \n                      \n                    \n                    \n                  \n                  \n                    \n                      \n                        \n                          \n                        \n                        Light\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Dark\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Auto\n                        \n                          \n                        \n                      \n                    \n                  \n                \n              \n              \n              \n                        \n                   Instructor View \n                \n                \n                  Learner View\n                \n                      \n            \n          \n          \n        \n        \n          \n            \n              \n              Menu\n            \n            \n              \n            \n            \n              Version Control with Git\n            \n            \n              \n            \n            \n              \n                \n                  \n                    Version Control with Git\n                  \n                \n                \n                \n                  \n                  Setup\n                \n                        \n                  Key Points\n                \n                \n                  Instructor Notes\n                \n                \n                  Extract All Images\n                \n                                  \n                    \n                      More \n                    \n                    \n                      \n\n                      Git Cheatsheets for Quick Reference\n                      Discussion\n                      FCM vs Git Cheat Sheet\n                      Quick Start Repository Guide            \n                  \n                      \n            \n            \n            \n            \n              \n                \n                \n              \n              \n                \n              \n            \n          \n        \n\n        \n          Version Control with Git\n        \n\n        \n          \n            0%\n          \n          \n            \n            \n          \n            \n      \n        \n          \n            \n              \n                \n              \n              \n                \n                  \n                    \n                      \n                        \n                          \n                        \n                        Toggle Theme\n                      \n                      \n                        \n                          \n                            \n                              \n                            \n                            Light\n                            \n                              \n                            \n                          \n                        \n                        \n                          \n                            \n                              \n                            \n                            Dark\n                            \n                              \n                            \n                          \n                        \n                        \n                          \n                            \n                              \n                            \n                            Auto\n                            \n                              \n                            \n                          \n                        \n                      \n                    \n                  \n                \n                \n                  \n                    \n                      \n                        \n                                            \n                            \n                               Learner View\n                            \n                          \n                          \n                            \n                              Instructor View\n                            \n                          \n                                          \n                      \n                    \n                  \n                  \n                  \n                \n\n                \n                  \n\n                    \n                      ../EPISODES\n                    \n                    \n\n                      \n                        \n\n                                \n                                  \n                                    \n                                      Summary and Setup\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      1. Automated Version Control\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      2. Setting Up Git\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      3. Creating a Repository\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      4. Branches\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      5. Tracking Changes\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      6. Exploring History\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      7. Reverting Changes\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      8. Ignoring Things\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      9. Break\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      10. Remotes in GitHub\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      11. Exploring GitHub\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      12. Exploring History on GitHub\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      13. Pull Requests\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      14. Configuring GitHub\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      15. End\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      16. Open Science\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      17. Licensing\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      18. Citation\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      19. Hosting\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      20. 'Using Git from RStudio'\n                                    \n                                  \n                                              \n                    \n                  \n                \n                \n\n                \n                          \n                    \n                      \n                        \n                          RESOURCES\n                        \n                      \n                      \n                        \n                          \n                            \n                            \n                              \n                              Setup\n                            \n                                                \n                              Key Points\n                            \n                            \n                              Instructor Notes\n                            \n                            \n                              Extract All Images\n                            \n                                                \n                          \n                        \n                      \n                    \n                  \n                  \n                  \n                  \n                  \n\n                  \n                              \n                \n              \n            \n          \n                                        \n                      Check your Organisation’s Policy\n                      Your organisation most likely has policies governing their intellectual property. The guidelines below are general. You should consult your organisational policy on licensing and open source before making any decisions.\n                      \n                      When a repository with source code, a manuscript or other creative works becomes public, it should include a file LICENSE or LICENSE.txt in the base directory of the repository that clearly states under which license the content is being made available. This is because creative works are automatically eligible for intellectual property (and thus copyright) protection. Reusing creative works without a license is dangerous, because the copyright holders could sue you for copyright infringement.\n                      A license solves this problem by granting rights to others (the licensees) that they would otherwise not have. What rights are being granted under which conditions differs, often only slightly, from one license to another. In practice, a few licenses are by far the most popular, and choosealicense.com will help you find a common license that suits your needs. Important considerations include:\n                      \n                      Whether you want to address patent rights.\n                      Whether you require people distributing derivative works to also distribute their source code.\n                      Whether the content you are licensing is source code.\n                      Whether you want to license the code at all.\n                      \n                      Choosing a license that is in common use makes life easier for contributors and users, because they are more likely to already be familiar with the license and don’t have to wade through a bunch of jargon to decide if they’re ok with it. The Open Source Initiative and Free Software Foundation both maintain lists of licenses which are good choices.\n                      This article provides an excellent overview of licensing and licensing options from the perspective of scientists who also write code.\n                      At the end of the day what matters is that there is a clear statement as to what the license is. Also, the license is best chosen from the get-go, even if for a repository that is not public. Pushing off the decision only makes it more complicated later, because each time a new collaborator starts contributing, they, too, hold copyright and will thus need to be asked for approval once a license is chosen.\n                      \n                      \n                      \n                      \n                      \n                      Can I Use Open License?\n                      \n                      Find out whether you are allowed to apply an open license to your software. Can you do this unilaterally, or do you need permission from someone in your institution? If so, who?\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      What licenses have I already accepted?\n                      \n                      Many of the software tools we use on a daily basis (including in this workshop) are released as open-source software. Pick a project on GitHub from the list below, or one of your own choosing. Find its license (usually in a file called LICENSE or COPYING) and talk about how it restricts your use of the software. Is it one of the licenses discussed in this session? How is it different?\n                      \n                      Git, the source-code management tool\n                      CPython, the standard implementation of the Python language\n                      Jupyter, the project behind the web-based Python notebooks we’ll be using\n                      EtherPad, a real-time collaborative editor\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Keypoints\n                      \n                      \n                      The LICENSE, LICENSE.md, or LICENSE.txt file is often used in a repository to indicate how the contents of the repo may be used by others.\n                      People who incorporate General Public License (GPL’d) software into their own software must make the derived software also open under the GPL license if they decide to share it; most other open licenses do not require this.\n                      The Creative Commons family of licenses allow people to mix and match requirements and restrictions on attribution, creation of derivative works, further sharing, and commercialization.\n                      People who are not lawyers should not try to write licenses from scratch.\n                      \n                      \n                      \n                      \n                      \n                      \n      \n      \t\t\n      \t\t\t\n      \t\t\t\n              This lesson is subject to the &lt;(Code of Conduct)&gt;\n              Edit on GitHub\n              | Contributing\n              | Source\n      \t\t\t\tCite | Contact | About\n      \t\t\t\n      \t\t\t\n                      Materials licensed under &lt;({license})&gt; by the authors\n                      Template licensed under &lt;(CC-BY 4.0)&gt; by {template_authors}\n              Built with Quarto"
  },
  {
    "objectID": "episodes/13-hosting.html",
    "href": "episodes/13-hosting.html",
    "title": "Version Control with Git",
    "section": "",
    "text": "Skip to main content\n          \n            \n              \n                \n                                              \n            \n            \n              \n                \n                  \n                    \n                      \n                    \n                    \n                  \n                  \n                    \n                      \n                        \n                          \n                        \n                        Light\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Dark\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Auto\n                        \n                          \n                        \n                      \n                    \n                  \n                \n              \n              \n              \n                        \n                   Instructor View \n                \n                \n                  Learner View\n                \n                      \n            \n          \n          \n        \n        \n          \n            \n              \n              Menu\n            \n            \n              \n            \n            \n              Version Control with Git\n            \n            \n              \n            \n            \n              \n                \n                  \n                    Version Control with Git\n                  \n                \n                \n                \n                  \n                  Setup\n                \n                        \n                  Key Points\n                \n                \n                  Instructor Notes\n                \n                \n                  Extract All Images\n                \n                                  \n                    \n                      More \n                    \n                    \n                      \n\n                      Git Cheatsheets for Quick Reference\n                      Discussion\n                      FCM vs Git Cheat Sheet\n                      Quick Start Repository Guide            \n                  \n                      \n            \n            \n            \n            \n              \n                \n                \n              \n              \n                \n              \n            \n          \n        \n\n        \n          Version Control with Git\n        \n\n        \n          \n            0%\n          \n          \n            \n            \n          \n            \n      \n        \n          \n            \n              \n                \n              \n              \n                \n                  \n                    \n                      \n                        \n                          \n                        \n                        Toggle Theme\n                      \n                      \n                        \n                          \n                            \n                              \n                            \n                            Light\n                            \n                              \n                            \n                          \n                        \n                        \n                          \n                            \n                              \n                            \n                            Dark\n                            \n                              \n                            \n                          \n                        \n                        \n                          \n                            \n                              \n                            \n                            Auto\n                            \n                              \n                            \n                          \n                        \n                      \n                    \n                  \n                \n                \n                  \n                    \n                      \n                        \n                                            \n                            \n                               Learner View\n                            \n                          \n                          \n                            \n                              Instructor View\n                            \n                          \n                                          \n                      \n                    \n                  \n                  \n                  \n                \n\n                \n                  \n\n                    \n                      ../EPISODES\n                    \n                    \n\n                      \n                        \n\n                                \n                                  \n                                    \n                                      Summary and Setup\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      1. Automated Version Control\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      2. Setting Up Git\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      3. Creating a Repository\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      4. Branches\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      5. Tracking Changes\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      6. Exploring History\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      7. Reverting Changes\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      8. Ignoring Things\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      9. Break\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      10. Remotes in GitHub\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      11. Exploring GitHub\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      12. Exploring History on GitHub\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      13. Pull Requests\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      14. Configuring GitHub\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      15. End\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      16. Open Science\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      17. Licensing\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      18. Citation\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      19. Hosting\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      20. 'Using Git from RStudio'\n                                    \n                                  \n                                              \n                    \n                  \n                \n                \n\n                \n                          \n                    \n                      \n                        \n                          RESOURCES\n                        \n                      \n                      \n                        \n                          \n                            \n                            \n                              \n                              Setup\n                            \n                                                \n                              Key Points\n                            \n                            \n                              Instructor Notes\n                            \n                            \n                              Extract All Images\n                            \n                                                \n                          \n                        \n                      \n                    \n                  \n                  \n                  \n                  \n                  \n\n                  \n                              \n                \n              \n            \n          \n                        After choosing a license, another big question for groups that want to open up their work is where to host their code and data. One option is for the lab, the department, or the university to provide a server, manage accounts and backups, and so on. The main benefit of this is that it clarifies who owns what, which is particularly important if any of the material is sensitive (i.e., relates to experiments involving human subjects or may be used in a patent application). The main drawbacks are the cost of providing the service and its longevity: a scientist who has spent ten years collecting data would like to be sure that data will still be available ten years from now, but that’s well beyond the lifespan of most of the grants that fund academic infrastructure.\n                                               Another option is to purchase a domain and pay an Internet service provider (ISP) to host it. This gives the individual or group more control, and sidesteps problems that can arise when moving from one institution to another, but requires more time and effort to set up than either the option above or the option below.\n                                               The third option is to use a public hosting service like GitHub, GitLab, or BitBucket. Each of these services provides a web interface that enables people to create, view, and edit their code repositories. These services also provide communication and project management tools including issue tracking, wiki pages, email notifications, and code reviews. These services benefit from economies of scale and network effects: it’s easier to run one large service well than to run many smaller services to the same standard. It’s also easier for people to collaborate. Using a popular service can help connect your project with communities already using the same service.\n                                               As an example, Software Carpentry is on GitHub where you can find the source for this page. Anyone with a GitHub account can suggest changes to this text.\n                                               GitHub repositories can also be assigned DOIs, by connecting its releases to Zenodo. For example, 10.5281/zenodo.7908089 is the DOI that has been “minted” for this introduction to Git.\n                                               Using large, well-established services can also help you quickly take advantage of powerful tools. One such tool, continuous integration (CI), can automatically run software builds and tests whenever code is committed or pull requests are submitted. Direct integration of CI with an online hosting service means this information is present in any pull request, and helps maintain code integrity and quality standards. While CI is still available in self-hosted situations, there is much less setup and maintenance involved with using an online service. Furthermore, such tools are often provided free of charge to open source projects, and are also available for private repositories for a fee.\n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               Institutional Barriers\n                                               \n                                               \n                                               \n                                               Sharing is the ideal for science, but many institutions place restrictions on sharing, for example to protect potentially patentable intellectual property. If you encounter such restrictions, it can be productive to inquire about the underlying motivations and either to request an exception for a specific project or domain, or to push more broadly for institutional reform to support more open science.\n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               Can My Work Be Public?\n                                               \n                                               Find out whether you are allowed to host your work openly in a public repository. Can you do this unilaterally, or do you need permission from someone in your institution? If so, who?\n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               Where Can I Share My Work?\n                                               \n                                               Does your institution have a repository or repositories that you can use to share your papers, data and software? How do institutional repositories differ from services like arXiV, figshare, GitHub or GitLab?\n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               Keypoints\n                                               \n                                               \n                                               Projects can be hosted on university servers, on personal domains, or on a public hosting service.\n                                               Rules regarding intellectual property and storage of sensitive information apply no matter where code and data are hosted.\n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n      \n      \t\t\n      \t\t\t\n      \t\t\t\n              This lesson is subject to the &lt;(Code of Conduct)&gt;\n              Edit on GitHub\n              | Contributing\n              | Source\n      \t\t\t\tCite | Contact | About\n      \t\t\t\n      \t\t\t\n                      Materials licensed under &lt;({license})&gt; by the authors\n                      Template licensed under &lt;(CC-BY 4.0)&gt; by {template_authors}\n              Built with Quarto"
  },
  {
    "objectID": "episodes/Break.html",
    "href": "episodes/Break.html",
    "title": "Version Control with Git",
    "section": "",
    "text": "Skip to main content\n          \n            \n              \n                \n                                              \n            \n            \n              \n                \n                  \n                    \n                      \n                    \n                    \n                  \n                  \n                    \n                      \n                        \n                          \n                        \n                        Light\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Dark\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Auto\n                        \n                          \n                        \n                      \n                    \n                  \n                \n              \n              \n              \n                        \n                   Instructor View \n                \n                \n                  Learner View"
  },
  {
    "objectID": "episodes/Break.html#summary",
    "href": "episodes/Break.html#summary",
    "title": "Version Control with Git",
    "section": "Summary",
    "text": "Summary\n                      You’ve now used Git to create a repository and made some commits on a feature branch. Your repository will look something like this:\n                      \n                      \n                      \n                      \n                      \n                      ---\n                      config:\n                        gitGraph:\n                          showCommitLabel: false\n                      ---\n                          gitGraph\n                              accDescr {A Git graph showing the root-commit on the main branch and a new forecast branch with five commits.}\n                              commit id: 'Initial commit'\n                              branch forecast\n                              commit id: 'Create a md file with the forecast'\n                              commit id: 'Add tomorrows forecast to forecast.md'\n                              commit id: 'Modify the forecast to add a chance of Sun'\n                              commit id: 'Add in the temperature to the forecast and create the weather atlas file'\n                              commit id: 'Ignore png files and the data folder'\n                      \n                      \n                      \n                      \n                      \n                      \n                      Your repo may have a different number of commits on the forecast branch depending on which challenge exercises you have completed. You can find short summaries of all the new commands you’ve learnt on the Key Points page."
  },
  {
    "objectID": "episodes/aio.html",
    "href": "episodes/aio.html",
    "title": "Version Control with Git",
    "section": "",
    "text": "Skip to main content\n          \n            \n              \n                \n                                              \n            \n            \n              \n                \n                  \n                    \n                      \n                    \n                    \n                  \n                  \n                    \n                      \n                        \n                          \n                        \n                        Light\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Dark\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Auto\n                        \n                          \n                        \n                      \n                    \n                  \n                \n              \n              \n              \n                        \n                   Instructor View \n                \n                \n                  Learner View"
  },
  {
    "objectID": "episodes/aio.html#terminology",
    "href": "episodes/aio.html#terminology",
    "title": "Version Control with Git",
    "section": "Terminology",
    "text": "Terminology\n                      This workshop may contain language that is new to you. The Glossary section outlines key Git & GitHub terminology for your reference.\n                      \n                      \n                      \n                        \n                        \n                        Explain Key Terminology\n                        \n                      \n                      \n                      \n                      Take this opportunity to show the learners where the glossary can be found. Explain the difference between Git & GitHub using the glossary! Or if there is time to spare, the first challenge on this page gets the learners to use the glossary to explain the difference to a partner or write it down in their own words.\n                      \n                      \n                      \n                      \n                      \n                      Distributed Version Control\n                      Git is an example of a distributed version control system. This means that each collaborator has a copy of the entire repository.\n                      \n                      \n                      Centralised (FCM)\n                      FCM and SVN are examples of centralised version control systems. Here there is only one repository on a central server.\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      The Long History of Version Control Systems\n                      \n                      \n                      \n                      Automated version control systems are nothing new. Tools like RCS, CVS, or Subversion have been around since the early 1980s and are used by many large companies. However, many of these are now considered legacy systems (i.e., outdated) due to various limitations in their capabilities. More modern systems, such as Git and Mercurial, are distributed, meaning that they do not need a centralized server to host the repository. These modern systems also include powerful merging tools that make it possible for multiple authors to work on the same files concurrently.\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Migrating to Git from FCM\n                      \n                      \n                      \n                      If you currently use FCM (a wrapper around Subversion, SVN) then look out for the following dropdowns. They contain the FCM equivalent for Git commands.\n                      \n                      \n                      \n                        \n                        \n                        FCM Comparison\n                        \n                      \n                      \n                      \n                      Running the git ... command is equivalent to:\n                      fcm ...\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Challenge\n                      \n                      Use the Glossary to describe the difference between Git & GitHub in your own words.\n                      Share your description with other learners if you are comfortable doing so.\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Paper Writing\n                      \n                      \n                      Imagine you drafted an excellent paragraph for a paper you are writing, but later ruin it. How would you retrieve the excellent version of your conclusion? Is it even possible?\n                      Imagine you have 5 co-authors. How would you manage the changes and comments they make to your paper? If you use LibreOffice Writer or Microsoft Word, what happens if you accept changes made using the Track Changes option? Do you have a history of those changes?\n                      \n                      \n                      Solution (Solution). \n                      \n                      Recovering the excellent version is only possible if you created a copy of the old version of the paper. The danger of losing good versions often leads to the problematic workflow illustrated in the PhD Comics cartoon at the top of this page.\n                      Collaborative writing with traditional word processors is cumbersome. Either every collaborator has to work on a document sequentially (slowing down the process of writing), or you have to send out a version to all collaborators and manually merge their comments into your document. The ‘track changes’ or ‘record changes’ option can highlight changes for you and simplifies merging, but as soon as you accept changes you will lose their history. You will then no longer know who suggested that change, why it was suggested, or when it was merged into the rest of the document. Even online word processors like Google Docs or Microsoft Office Online do not fully resolve these problems.\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Keypoints\n                      \n                      \n                      Version control is like an unlimited ‘undo’.\n                      Version control also allows many people to work in parallel.\n                      \n                      \n                      \n                      \n                      \n                      Overview\n                      \n                      \n                      \n                      \n                      Questions\n                      \n                      What is version control and why should I use it?\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Objectives\n                      \n                      Configure git the first time it is used on a computer.\n                      Understand the meaning of the --global configuration flag.\n                      \n                      \n                      \n                      \n                      \n                      \n                      When we use Git on a new computer for the first time, we need to configure a few things. Below are a few examples of configurations we will set as we get started with Git:\n                      \n                      our name and email address,\n                      what our preferred text editor is,\n                      and that we want to use these settings globally (i.e. for every project)."
  },
  {
    "objectID": "episodes/aio.html#command-line-git-setup",
    "href": "episodes/aio.html#command-line-git-setup",
    "title": "Version Control with Git",
    "section": "Command Line Git Setup",
    "text": "Command Line Git Setup\n                      On a command line, Git commands are written as git verb options, where verb is what we actually want to do and options is additional optional information which may be needed for the verb.\n                      \n                      Authorship\n                      To set up a new computer:\n                      $ git config --global user.name \"Joanne Simpson\"\n$ git config --global user.email \"j.simpson@mo-weather.uk\"\n                      Please use your own name and email address. This user name and email will be associated with your subsequent Git activity, which means that any changes pushed to GitHub, BitBucket, GitLab or another Git host server after this lesson will include this information.\n                      For this lesson, we will be interacting with GitHub and so the email address used should be the same as the one used when setting up your GitHub account. If you are concerned about privacy, please review GitHub’s instructions for keeping your email address private.\n                      \n                      \n                      \n                      \n                      \n                      \n                      Keeping your email private\n                      \n                      \n                      \n                      If you elect to use a private email address with GitHub, then use GitHub’s no-reply email address for the user.email value. It looks like ID+username@users.noreply.github.com. You can look up your own address in your GitHub email settings. Check with your instructor whether your organisation has a policy on keeping emails private. At the Met Office it is up to you whether to keep your email address private.\n                      \n                      \n                      \n                      \n                      Line Endings\n                      As with other keys, when you press Enter or ↵ or on Macs, Return on your keyboard, your computer encodes this input as a character. Different operating systems use different character(s) to represent the end of a line. (You may also hear these referred to as newlines or line breaks.) Because Git uses these characters to compare files, it may cause unexpected issues when editing a file on different machines. Though it is beyond the scope of this lesson, you can read more about this issue in the Pro Git book.\n                      You can change the way Git recognizes and encodes line endings using the core.autocrlf command to git config. The following settings are recommended:\n                      \n                      \n                      \n                      Linux and MacOS\n                      $ git config --global core.autocrlf input\n                      \n                      \n                      Windows\n                      $ git config --global core.autocrlf true\n                      \n                      \n                      \n                      Text Editor\n                      To set your preferred text editor, find the correct configuration command from this table:\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Editor\n                      Configuration command\n                      \n                      \n                      \n                      \n                      Atom\n                      $ git config --global core.editor \"atom --wait\"\n                      \n                      \n                      nano\n                      $ git config --global core.editor \"nano -w\"\n                      \n                      \n                      BBEdit (Mac, with command line tools)\n                      $ git config --global core.editor \"bbedit -w\"\n                      \n                      \n                      Sublime Text (Mac)\n                      $ git config --global core.editor \"/Applications/Sublime\\ Text.app/Contents/SharedSupport/bin/subl -n -w\"\n                      \n                      \n                      Sublime Text (Win, 32-bit install)\n                      $ git config --global core.editor \"'c:/program files (x86)/sublime text 3/sublime_text.exe' -w\"\n                      \n                      \n                      Sublime Text (Win, 64-bit install)\n                      $ git config --global core.editor \"'c:/program files/sublime text 3/sublime_text.exe' -w\"\n                      \n                      \n                      Notepad (Win)\n                      $ git config --global core.editor \"c:/Windows/System32/notepad.exe\"\n                      \n                      \n                      Notepad++ (Win, 32-bit install)\n                      $ git config --global core.editor \"'c:/program files (x86)/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin\"\n                      \n                      \n                      Notepad++ (Win, 64-bit install)\n                      $ git config --global core.editor \"'c:/program files/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin\"\n                      \n                      \n                      Kate (Linux)\n                      $ git config --global core.editor \"kate\"\n                      \n                      \n                      Gedit (Linux)\n                      $ git config --global core.editor \"gedit --wait --new-window\"\n                      \n                      \n                      Scratch (Linux)\n                      $ git config --global core.editor \"scratch-text-editor\"\n                      \n                      \n                      Emacs\n                      $ git config --global core.editor \"emacs\"\n                      \n                      \n                      Vim\n                      $ git config --global core.editor \"vim\"\n                      \n                      \n                      VS Code\n                      $ git config --global core.editor \"code --wait\"\n                      \n                      \n                      \n                      It is possible to reconfigure the text editor for Git whenever you want to change it.\n                      \n                      \n                      \n                      \n                      \n                      \n                      Exiting Vim\n                      \n                      \n                      \n                      Note that Vim is the default editor for many programs. If you haven’t used Vim before and wish to exit a session without saving your changes, press Esc then type :q! and press Enter or ↵ or on Macs, Return. If you want to save your changes and quit, press Esc then type :wq and press Enter or ↵ or on Macs, Return.\n                      \n                      \n                      \n                      \n                      Default Branch Name\n                      Git (2.28+) allows configuration of the name of the branch created when you initialize any new repository. We want to set this to main so it matches the cloud service we will eventually use.\n                      $ git config --global init.defaultBranch main\n                      \n                      \n                      \n                      \n                      \n                      \n                      History of main\n                      \n                      \n                      \n                      Source file changes are associated with a “branch”. By default, Git will create a branch called master when you create a new repository with git init (as explained in the next Episode). This term evokes the racist practice of human slavery and the software development community has moved to adopt more inclusive language.\n                      In 2020, most Git code hosting services transitioned to using main as the default branch. As an example, any new repository that is opened in GitHub and GitLab default to main. However, Git has not yet made the same change. As a result, local repositories must be manually configured have the same main branch name as most cloud services.\n                      For versions of Git prior to 2.28, the change can be made on an individual repository level. The command for this is in the next episode. Note that if this value is unset in your local Git configuration, the init.defaultBranch value defaults to master.\n                      \n                      \n                      The five commands we just ran above only need to be run once: the flag --global tells Git to use the settings for every project, in your user account, on this computer."
  },
  {
    "objectID": "episodes/aio.html#text-editor-git-setup",
    "href": "episodes/aio.html#text-editor-git-setup",
    "title": "Version Control with Git",
    "section": "Text Editor Git Setup",
    "text": "Text Editor Git Setup\n                      Let’s review those settings and test our core.editor right away:\n                      $ git config --global --edit\n                      Let’s close the file without making any additional changes. Since typos in the config file will cause issues, it’s safer to view the configuration with:\n                      $ git config --list\n                      And alter the configuration via the command line. You can re-run the commands above as many times as you want to change your configuration. The discussion page has details on more recommended settings.\n                      \n                      \n                      \n                      \n                      \n                      \n                      Proxy\n                      \n                      \n                      \n                      In some networks you need to use a proxy. If this is the case, you may also need to tell Git about the proxy:\n                      $ git config --global http.proxy proxy-url\n$ git config --global https.proxy proxy-url\n                      To disable the proxy, use\n                      $ git config --global --unset http.proxy\n$ git config --global --unset https.proxy\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Git Help and Manual\n                      \n                      \n                      \n                      If you forget the subcommands or options of a git command, you can access the relevant list of options typing git &lt;command&gt; -h or access the corresponding Git manual by typing git &lt;command&gt; --help, e.g.:\n                      $ git config -h\n$ git config --help\n                      While viewing the manual, remember the : is a prompt waiting for commands and you can press Q to exit the manual.\n                      More generally, you can get the list of available git commands and further resources of the Git manual typing:\n                      $ git help\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Keypoints\n                      \n                      \n                      Use git config with the --global option to configure a user name, email address, editor, and other preferences once per machine.\n                      \n                      \n                      \n                      \n                      \n                      Overview\n                      \n                      \n                      \n                      \n                      Questions\n                      \n                      How do I get set up to use Git?\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Objectives\n                      \n                      Create a local Git repository.\n                      Describe the purpose of the .git directory.\n                      \n                      \n                      \n                      \n                      \n                      \n                      Now that Git is configured, we can start using it.\n                      First, let’s create a new directory in the Desktop folder for our work and then change the current working directory to the newly created one:\n                      $ cd ~/Desktop\n$ mkdir weather\n$ cd weather\n                      Then we tell Git to make weather a repository -- a place where Git can store versions of our files:\n                      $ git init\n                      It is important to note that git init will create a repository that can include subdirectories and their files—there is no need to create separate repositories nested within the weather repository, whether subdirectories are present from the beginning or added later. Also, note that the creation of the weather directory and its initialization as a repository are completely separate processes.\n                      If we use ls to show the directory’s contents, it appears that nothing has changed:\n                      $ ls\n                      But if we add the -a flag to show everything, we can see that Git has created a hidden directory within weather called .git:\n                      $ ls -a\n                      .   ..  .git\n                      Git uses this special subdirectory to store all the information about the project, including the tracked files and sub-directories located within the project’s directory. If we ever delete the .git subdirectory, we will lose the project’s history.\n                      \n                      \n                      \n                        \n                        \n                        FCM Comparison\n                        \n                      \n                      \n                      \n                      FCM, which wraps SVN, is a centralised version control system. There is one central repository stored on a server that we work from.\n                      Git is an example of distributed version control. The .git directory contains the entire history of the repository. Each colleague working on the same repository will have a backup of the whole repository. We recommend reading the GitLab links in this callout for more benefits of Git and distributed version control systems over FCM/SVN.\n                      \n                      \n                      \n                      \n                      We can now start using one of the most important git commands, which is particularly helpful to beginners. git status tells us the status of our project, and better, a list of changes in the project and options on what to do with those changes. We can use it as often as we want, whenever we want to understand what is going on.\n                      $ git status\n                      On branch main\n\nNo commits yet\n\nnothing to commit (create/copy files and use \"git add\" to track)\n                      \n                      \n                      \n                        \n                        \n                        FCM Comparison\n                        \n                      \n                      \n                      \n                      git status is equivalent to:\n                      $ fcm status\n                      or\n                      $ fcm info\n                      \n                      \n                      \n                      \n                      If you are using a different version of git, the exact wording of the output might be slightly different."
  },
  {
    "objectID": "episodes/aio.html#initial-commit",
    "href": "episodes/aio.html#initial-commit",
    "title": "Version Control with Git",
    "section": "Initial Commit",
    "text": "Initial Commit\n                      As soon as you initialise your repository you should make an initial commit. All repositories should have a README file which outlines the purpose of the repository and other useful information. For now we will create the file with just the repository name, Weather as the title:\n                      $ echo \"# Weather\" &gt; README.md\n$ cat README.md\n                      # Weather\n                      Now add and commit the README.md file using the git add and git commit commands:\n                      $ git add README.md\n$ git commit -m \"Initial commit\"\n                      [main (root-commit) 6f12a47] Initial commit\n 1 file changed, 1 insertion(+)\n create mode 100644 README.md\n                      You’ve just added your first file to be version controlled with Git! This first commit is the special root-commit. It is the start of your version control history and like all commits has been given a unique alphanumeric hash (6f12a47). In the next few episodes you will explore tracking changes with git add and git commit in detail, and learn how to inspect your repositories history.\n                      \n                      \n                      \n                      \n                      \n                      \n                      README Files\n                      \n                      \n                      \n                      All repositories should have a README file. The README file describes what is in your repository. The makeareadme website is a great resource for README templates and inspiration.\n                      The README.md file we added is a Markdown file. Markdown is a simple markup language and GitHub can render Markdown files natively. The GitHub documentation pages on Writing on GitHub have more info on writing in Markdown for GitHub.\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Places to Create Git Repositories\n                      \n                      Along with tracking information about weather (the project we have already created), you might also want to track information about clouds specifically. Imagine you create a clouds project inside your weather project with the following sequence of commands:\n                      $ cd ~/Desktop    # return to Desktop directory\n$ cd weather      # go into weather directory, which is already a Git repository\n$ ls -a           # ensure the .git subdirectory is still present in the weather directory\n$ mkdir clouds    # make a sub-directory weather/clouds\n$ cd clouds       # go into clouds subdirectory\n$ git init        # make the clouds subdirectory a Git repository\n$ ls -a           # ensure the .git subdirectory is present indicating we have created a new Git repository\n                      Is the git init command, run inside the clouds subdirectory, required for tracking files stored in the clouds subdirectory?\n                      \n                      Solution (Solution). No. You do not need to make the clouds subdirectory a Git repository because the weather repository will track all files, sub-directories, and subdirectory files under the weather directory. Thus, in order to track all information about clouds, you only needed to add the clouds subdirectory to the weather directory.\n                      Additionally, Git repositories can interfere with each other if they are “nested”: the outer repository will try to version-control the inner repository. Therefore, it’s best to create each new Git repository in a separate directory. To be sure that there is no conflicting repository in the directory, check the output of git status. If it looks like the following, you are good to go to create a new repository as shown above:\n                      $ git status\n                      fatal: Not a git repository (or any of the parent directories): .git\n                      \n                      \n                      Correcting git init Mistakes\n                      A colleague explains to you how a nested repository is redundant and may cause confusion down the road. You would like to go back to a single Git repository. How can you undo the last git init in the clouds subdirectory?\n                      \n                      Solution (Solution – USE WITH CAUTION!). \n                      \n                      Background\n                      Removing files from a Git repository needs to be done with caution. But we have not learned yet how to tell Git to track a particular file; we will learn this in the next episode. Files that are not tracked by Git can easily be removed like any other “ordinary” files with\n                      $ rm filename\n                      Similarly a directory can be removed using rm -r dirname. If the files or folder being removed in this fashion are tracked by Git, then their removal becomes another change that we will need to track, as we will see in the next episode.\n                      \n                      \n                      Solution\n                      Git keeps all of its files in the .git directory. To recover from this little mistake, you can remove the .git folder in the clouds subdirectory by running the following command from inside the weather directory:\n                      $ rm -rf clouds/.git\n                      But be careful! Running this command in the wrong directory will remove the entire Git history of a project you might want to keep. In general, deleting files and directories using rm from the command line cannot be reversed. Therefore, always check your current directory using the command pwd.\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Keypoints\n                      \n                      \n                      git init initializes a repository.\n                      Git stores all of its repository data in the .git directory.\n                      \n                      \n                      \n                      \n                      \n                      Overview\n                      \n                      \n                      \n                      \n                      Questions\n                      \n                      Where does Git store information?\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Objectives\n                      \n                      What are branches?\n                      How do I view the current branches?\n                      How do I manipulate branches?\n                      \n                      \n                      \n                      \n                      \n                      \n                      Branching is a feature available in most modern version control systems. Branching in other version control systems can be an expensive operation in both time and disk space. In Git, branches are a part of your everyday development process.\n                      So far we have been working on the main branch and have made one commit, the root-commit. Committing the initial root-commit is the only time you should commit to main. When you want to add a new change or fix a bug, no matter how big or how small, you create a new branch for your changes. This makes it harder for unstable code to get merged into the main code base, and it gives you the chance to clean up your branch history before merging it into the main branch.\n                      \n                      \n                      \n                      \n                      \n                      ---\n                      config:\n                        gitGraph:\n                          showCommitLabel: false\n                      ---\n                          gitGraph\n                              accDescr {A Git graph showing the root-commit on the main branch and a new forecast branch with one commit branched off the root-commit. This branch is then merged back into main via a merge commit on GitHub.}\n                              commit id: '6f12a47'\n                              branch forecast\n                              commit id: '8136c6f Add in a seasonal forecasts file'\n                              checkout main\n                              merge forecast\n                      \n                      \n                      \n                      \n                      \n                      \n                      If you completed the pre-workshop setup instructions for git autocomplete you should see the current branch, main, in your terminal prompt:\n                      [~/Desktop/weather]:(main =)$\n                      The git status command also shows us the current branch:\n                      $ git status\n                      On branch main\nYour branch is up to date with 'origin/main'.\n\nnothing to commit, working tree clean\n                      The phrase working tree clean means there are no changes in your working directory and the current state of your repository is identical to the last commit.\n                      \n                      \n                      \n                        \n                        \n                        FCM Comparison\n                        \n                      \n                      \n                      \n                      main == trunk\n                      In an earlier episode we set our default branch to be called main. This is where our stable production code lives and is equivalent to trunk.\n                      We could have also named this branch trunk in Git. We chose main as it is a more common default branch name for Git and matches the default on GitHub."
  },
  {
    "objectID": "episodes/aio.html#correcting-git-init-mistakes",
    "href": "episodes/aio.html#correcting-git-init-mistakes",
    "title": "Version Control with Git",
    "section": "Correcting git init Mistakes",
    "text": "Correcting git init Mistakes\n                      A colleague explains to you how a nested repository is redundant and may cause confusion down the road. You would like to go back to a single Git repository. How can you undo the last git init in the clouds subdirectory?\n                      \n                      Solution (Solution – USE WITH CAUTION!). \n                      \n                      Background\n                      Removing files from a Git repository needs to be done with caution. But we have not learned yet how to tell Git to track a particular file; we will learn this in the next episode. Files that are not tracked by Git can easily be removed like any other “ordinary” files with\n                      $ rm filename\n                      Similarly a directory can be removed using rm -r dirname. If the files or folder being removed in this fashion are tracked by Git, then their removal becomes another change that we will need to track, as we will see in the next episode.\n                      \n                      \n                      Solution\n                      Git keeps all of its files in the .git directory. To recover from this little mistake, you can remove the .git folder in the clouds subdirectory by running the following command from inside the weather directory:\n                      $ rm -rf clouds/.git\n                      But be careful! Running this command in the wrong directory will remove the entire Git history of a project you might want to keep. In general, deleting files and directories using rm from the command line cannot be reversed. Therefore, always check your current directory using the command pwd."
  },
  {
    "objectID": "episodes/aio.html#creating-branches",
    "href": "episodes/aio.html#creating-branches",
    "title": "Version Control with Git",
    "section": "Creating Branches",
    "text": "Creating Branches\n                      Our current repository looks something like this:\n                      \n                      \n                      \n                      \n                      \n                          gitGraph\n                              accDescr {A Git graph showing one commit, the root-commit on the main branch.}\n                              commit id: '6f12a47'\n                      \n                      \n                      \n                      \n                      \n                      \n                      To make any changes we should create a new branch. There are several ways to create a branch and switch to the new branch. While it’s good to be aware of all these different methods we recommend using git switch -c.\n                      You should ensure the branch has a suitable unique name which will help you identify what the branch is for; even after several months of inactivity.\n                      We are going to add a weather forecast to our repository so our branch will be named forecast:\n                      \n                      \n                      git switch -c\n                      git switch is a more modern command to navigate between branches. git switch used with the -c flag automatically creates and switches you to a new branch:\n                      $ git switch -c forecast\n                      Switched to branch 'forecast'\n                      \n                      \n                      git branch\n                      To create a new branch use git branch &lt;branch-name&gt;:\n                      $ git branch forecast\n                      Now run git status and you will see you’re still on the main branch. To navigate between branches use git switch &lt;branch-name&gt;:\n                      $ git switch forecast\n                      Switched to branch 'forecast'\n                      \n                      \n                      git checkout -b\n                      The git checkout command can also be used to navigate between branches. git checkout used with the -b flag automatically creates and switches you to the new branch:\n                      $ git checkout -b forecast\n                      Switched to branch 'forecast'\n                      \n                      \n                      Running git status now should output:\n                      $ git status\n                      On branch forecast\nnothing to commit, working tree clean\n                      Now we have created but not committed anything to this new branch so our repository looks like this:\n                      \n                      \n                      \n                      \n                      \n                          gitGraph\n                              accDescr {A Git graph showing the root-commit on the main branch and a new forecast branch with no commits.}\n                              commit id: '6f12a47'\n                              branch forecast\n                      \n                      \n                      \n                      \n                      \n                      \n                      If we run git branch we can see the branches that exist in our repository.\n                      $ git branch\n                      * forecast\n  main\n                      The * indicates we are now on the forecast branch.\n                      \n                      Unique Branch Names\n                      To avoid creating a branch with the same name as a collaborators branch it is common to prefix the branch name with an Issue (ticket) number.\n                      You might choose to include your initials or username in your branch although this is less common than an Issue number.\n                      Separate words in branch names with - or _ depending on your teams working practices. The Git & GitHub Working Practices lesson, which you can take after this introductory lesson, will help you choose the working practices that are right for you and your team.\n                      \n                      \n                      \n                      \n                      \n                      \n                      Switching Between Branches\n                      \n                      How would you switch back to the main branch from the forecast branch?\n                      \n                      Solution. \n                      $ git switch main\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Typos when creating branches\n                      \n                      Help! Luca made a typo when naming their branch, seesonal-forecast, how can they fix the branch name?\n                      Hint: Look at the git documentation for the git branch command.\n                      \n                      Solution. The -m flag used with git branch lets you rename a branch.\n                      $ git branch -m &lt;old-branch-name&gt; &lt;new-branch-name&gt;\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Branch start-points\n                      \n                      The commands we used above created a branch from the HEAD of the main branch because we ran git switch from main. How would you create a branch that branched off at an earlier commit that isn’t HEAD?\n                      Hint: Look at the git documentation for the git switch command.\n                      \n                      Solution. The git switch command lets you define a &lt;start-point&gt; to branch from:\n                      $ git switch -c &lt;branch-name&gt; &lt;start-point&gt;\n                      &lt;branch-name&gt; is the name of the new branch. &lt;start-point&gt; can be a branch name, a commit-id, or a tag.\n                      This functionality also applies to the git branch command:\n                      git branch &lt;branch-name&gt; &lt;start-point&gt;"
  },
  {
    "objectID": "episodes/aio.html#deleting-branches",
    "href": "episodes/aio.html#deleting-branches",
    "title": "Version Control with Git",
    "section": "Deleting Branches",
    "text": "Deleting Branches\n                      A colleague of yours gets really excited about using branches and creates a new one:\n                      $ git switch -c shipping-forecast\n                      Switched to a new branch 'shipping-forecast'\n                      They then check their branches:\n                      $ git branch -vv\n                        forecast          6f12a47 Initial commit\n  main              6f12a47 Initial commit\n* shipping-forecast 6f12a47 Initial commit\n                      Your colleague decides to delete the branch since today’s shipping forecast isn’t ready. To delete a branch first switch to any other branch:\n                      $ git switch forecast\n                      and then delete the branch with git branch -d:\n                      $ git branch -d shipping-forecast\n                      Deleted branch shipping-forecast (was 6f12a47).\n                      \n                      \n                      \n                      \n                      \n                      \n                      Check your branch point\n                      \n                      \n                      \n                      Always switch to the branch you want to branch from, usually main, or explicitly specify a branch point when creating new branches. This helps avoid accidentally branching of a branch which isn’t main if you didn’t mean to.\n                      Imagine a colleague has added more files to their forecast branch and just created a tidal-forecast branch.\n                      They run:\n                      $ git branch -vv\n                        forecast       8136c6f Add in a seasonal forecasts file\n  main           6f12a47 Initial commit\n* tidal-forecast 8136c6f Add in a seasonal forecasts file\n                      Here the hash for the tidal-forecast branch is the same as the forecast branch so tidal-forecast is not branched off main. If they meant to branch off main they should delete this branch, and re-create it from the correct branch point.\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Deleting a branch that is checked out\n                      \n                      What happens if you:\n                      \n                      Create a new branch and switch to it\n                      Try to delete the new branch while it’s checked out\n                      \n                      \n                      Solution. Git won’t let you delete a branch you are currently on! Try it for yourself:\n                      $ git switch -c climate\n$ git branch -D climate\n                      error: Cannot delete branch 'climate' checked out at '~/Documents/weather'\n                      Note that even with the -D, force delete, flag the branch wasn’t deleted.\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Keypoints\n                      \n                      \n                      git status shows you the branch you’re currently on.\n                      git switch -c &lt;branch-name&gt; creates a new branch and switches you to it. Make sure you know what branch you are branching from before using git switch without a start-point!\n                      git switch -c &lt;branch-name&gt; &lt;start-point&gt; lets you define the start-point to branch off, via another branch name, a commit ID, or a tag.\n                      git switch &lt;branch-name&gt; switches you to another branch that already exists.\n                      git branch -vv shows you all the branches in the repository.\n                      git branch -m &lt;old-branch-name&gt; &lt;new-branch-name&gt; renames branches.\n                      git branch -d &lt;branch-name&gt; deletes a branch. Use the -D flag instead of -d to force delete the branch.\n                      \n                      \n                      \n                      \n                      \n                      Overview\n                      \n                      \n                      \n                      \n                      Questions\n                      \n                      Understand how branches are created.\n                      Learn the key commands to view and manipulate branches.\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Objectives\n                      \n                      Go through the modify-add-commit cycle for one or more files.\n                      Explain where information is stored at each stage of that cycle.\n                      Distinguish between descriptive and non-descriptive commit messages.\n                      \n                      \n                      \n                      \n                      \n                      \n                      First let’s make sure we’re still on the right branch. You should be on the forecast branch:\n                      $ git switch forecast\n                      Let’s create a file called forecast.md that contains a basic weather forecast. We’ll use nano to edit the file; you can use whatever editor you like. In particular, this does not have to be the core.editor you set globally earlier. But remember, the steps to create create or edit a new file will depend on the editor you choose (it might not be nano). For a refresher on text editors, check out “Which Editor?” in The Unix Shell lesson.\n                      $ nano forecast.md\n                      Type the text below into the forecast.md file:\n                      # Forecast\n\n## Today\n\nCloudy with a chance of pizza.\n                      Save the file and exit your editor. Next, let’s verify that the file was properly created by running the list command (ls):\n                      $ ls\n                      forecast.md\n                      forecast.md contains three lines, which we can see by running:\n                      $ cat forecast.md\n                      # Forecast\n\n## Today\n\nCloudy with a chance of pizza.\n                      If we check the status of our project again, Git tells us that it’s noticed the new file:\n                      $ git status\n                      On branch forecast\n\nNo commits yet\n\nUntracked files:\n   (use \"git add &lt;file&gt;...\" to include in what will be committed)\n\n    forecast.md\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n                      The “untracked files” message means that there’s a file in the directory that Git isn’t keeping track of. We can tell Git to track a file using git add:\n                      $ git add forecast.md\n                      and then check that the right thing happened:\n                      $ git status\n                      On branch forecast\n\nNo commits yet\n\nChanges to be committed:\n  (use \"git rm --cached &lt;file&gt;...\" to unstage)\n\n    new file:   forecast.md\n                      Git now knows that it’s supposed to keep track of forecast.md, but it hasn’t recorded these changes as a commit yet. To get it to do that, we need to run one more command:\n                      $ git commit -m \"Create a md file with the forecast\"\n                      [forecast f22b25e] Create a md file with the forecast\n 1 file changed, 5 insertions(+)\n create mode 100644 forecast.md\n                      When we run git commit, Git takes everything we have told it to save by using git add and stores a copy permanently inside the special .git directory. This permanent copy is called a commit (or revision) and its short identifier is f22b25e. Your commit may have another identifier.\n                      We use the -m flag (for “message”) to record a short, descriptive, and specific comment that will help us remember later on what we did and why. If we just run git commit without the -m option, Git will launch nano (or whatever other editor we configured as core.editor) so that we can write a longer message.\n                      Good commit messages start with a brief (&lt;50 characters) statement about the changes made in the commit. Generally, the message should complete the sentence “If applied, this commit will” . If you want to go into more detail, add a blank line between the summary line and your additional notes. Use this additional space to explain why you made changes and/or what their impact will be.\n                      \n                      \n                      \n                        \n                        \n                        Instructor Note\n                        \n                      \n                      \n                      \n                      The whatthecommit site can be used to show example commit messages, good and bad, pulled from public repos on GitHub. You should note that there is no safe for work filter. Some of the commit messages may include inappropriate language.\n                      \n                      \n                      \n                      \n                      \n                      Using git add .\n                      Using git add . or the -a flag with git commit will add all your unstaged changes in your repository.\n                      This might include things you didn’t mean to add. Always use git status to check your changes before adding them. We recommend you avoid using git add . and git commit -a.\n                      \n                      \n                      \n                      \n                        \n                        \n                        FCM Comparison\n                        \n                      \n                      \n                      \n                      Running git add followed by git commit is equivalent to:\n                      $ fcm commit\n                      \n                      \n                      \n                      \n                      Our repository now looks like this:\n                      \n                      \n                      \n                      \n                      \n                          gitGraph\n                              accDescr {A Git graph showing the root-commit on the main branch and a new forecast branch, branching off the root-commit, with one commit.}\n                              commit id: 'Initial commit'\n                              branch forecast\n                              commit id: 'Create a md file with the forecast'\n                      \n                      \n                      \n                      \n                      \n                      \n                      If we run git status now:\n                      $ git status\n                      On branch forecast\nnothing to commit, working tree clean\n                      it tells us everything is up to date.\n                      \n                      \n                      \n                      \n                      \n                      \n                      Where Are My Changes?\n                      \n                      \n                      \n                      If we run ls at this point, we will still see just our two files, README.md and forecast.md. That’s because Git saves information about files’ history in the special .git directory mentioned earlier so that our filesystem doesn’t become cluttered (and so that we can’t accidentally edit or delete an old version).\n                      \n                      \n                      Now suppose you want to more information to the file. (Again, we’ll edit with nano and then cat the file to show its contents; you may use a different editor, and don’t need to cat.)\n                      $ nano forecast.md\n$ cat forecast.md\n                      # Forecast\n\n## Today\n\nCloudy with a chance of pizza.\n\n## Tomorrow\n\nMorning rainbows followed by light showers.\n                      When we run git status now, it tells us that a file it already knows about has been modified:\n                      $ git status\n                      On branch forecast\nChanges not staged for commit:\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\n  (use \"git restore &lt;file&gt;...\" to discard changes in working directory)\n\n    modified:   forecast.md\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n                      The last line is the key phrase: “no changes added to commit”. We have changed this file, but we haven’t told Git we will want to save those changes (which we do with git add) nor have we saved them (which we do with git commit). So let’s do that now. It is good practice to always review our changes before saving them. We do this using git diff. This shows us the differences between the current state of the file and the most recently saved version:\n                      $ git diff\n                      diff --git a/forecast.md b/forecast.md\nindex df0654a..315bf3a 100644\n--- a/forecast.md\n+++ b/forecast.md\n@@ -3,3 +3,7 @@\n ## Today\n \n Cloudy with a chance of pizza.\n+\n+## Tomorrow\n+\n+Morning rainbows followed by light showers.\n                      The output is cryptic because it is actually a series of commands for tools like editors and patch telling them how to reconstruct one file given the other. If we break it down into pieces:\n                      \n                      The first line tells us that Git is producing output similar to the Unix diff command comparing the old and new versions of the file.\n                      The second line tells exactly which versions of the file Git is comparing; df0654a and 315bf3a are unique computer-generated labels for those versions.\n                      The third and fourth lines once again show the name of the file being changed.\n                      The remaining lines are the most interesting, they show us the actual differences and the lines on which they occur. In particular, the + marker in the first column shows where we added a line.\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      git difftool\n                      \n                      \n                      \n                      git-difftool lets you compare and edit files using your preferred diff tool.\n                      $ git difftool -g\n                      The -g flag launches the default gui diff tool. To change defaults:\n                      git config --global diff.tool &lt;tool&gt;\ngit config --global diff.guitool &lt;gui-tool&gt;\ngit config --global difftool.prompt false\ngit config --global difftool.guiDefault auto\n                      Where &lt;tool&gt; is a diffing tool such as Vim, &lt;gui-tool&gt; is your preferred graphical user interface diffing tool such as meld. The third line disables the Git prompt which asks you to confirm whether to launch the diff for every changed file. The last line automatically detects support for launching the gui based tool and launches &lt;gui-tool&gt; preferentially over &lt;tool&gt;. With this set to auto there is no need to add the -g flag when running git difftool.\n                      To see a list of available tools run:\n                      $ git difftool --tool-help\n                      \n                      \n                      After reviewing our change, it’s time to commit it:\n                      $ git commit -m \"Add tomorrows forecast to forecast.md\"\n                      On branch forecast\nChanges not staged for commit:\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\n  (use \"git restore &lt;file&gt;...\" to discard changes in working directory)\n\n    modified:   forecast.md\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n                      Whoops: Git won’t commit because we didn’t use git add first. Let’s fix that:\n                      $ git add forecast.md\n$ git commit -m \"Add tomorrows forecast to forecast.md\"\n                      [forecast 34961b1] Add tomorrows forecast to forecast.md\n 1 file changed, 4 insertions(+)\n                      Git insists that we add files to the set we want to commit before actually committing anything. This allows us to commit our changes in stages and capture changes in logical portions rather than only large batches. For example, suppose we’re adding a few citations to relevant research to our thesis. We might want to commit those additions, and the corresponding bibliography entries, but not commit some of our work drafting the conclusion (which we haven’t finished yet).\n                      To allow for this, Git has a special staging area where it keeps track of things that have been added to the current changeset but not yet committed.\n                      \n                      \n                      \n                      \n                      \n                      \n                      Staging Area\n                      \n                      \n                      \n                      If you think of Git as taking snapshots of changes over the life of a project, git add specifies what will go in a snapshot (putting things in the staging area), and git commit then actually takes the snapshot, and makes a permanent record of it (as a commit). If you don’t have anything staged when you type git commit, Git will prompt you to use git commit -a or git commit --all, which is kind of like gathering everyone to take a group photo! However, it’s almost always better to explicitly add things to the staging area, because you might commit changes you forgot you made. (Going back to the group photo simile, you might get an extra with incomplete makeup walking on the stage for the picture because you used -a!) Try to stage things manually, or you might find yourself searching for “git undo commit” more than you would like!\n                      \n                      \n                      \n                      \n                      \n                      \n                        \n                        \n                        FCM Comparison\n                        \n                      \n                      \n                      \n                      In FCM there is no concept of a staging area. FCM will commit all file modifications at once. This can lead to rather large commits. In Git remember to break down commits into small logical chunks.\n                      $ git add &lt;file&gt;\n$ git commit\n                      is equivalent to:\n                      $ fcm commit\n                      \n                      \n                      \n                      \n                      Our repository now looks like this:\n                      \n                      \n                      \n                      \n                      \n                          gitGraph\n                              accDescr {A Git graph showing the root-commit on the main branch and a new forecast branch, branching off the root-commit, with two commits.}\n                              commit id: 'Initial commit'\n                              branch forecast\n                              commit id: 'Create a md file with the forecast'\n                              commit id: 'Add tomorrows forecast to forecast.md'\n                      \n                      \n                      \n                      \n                      \n                      \n                      Let’s watch as our changes to a file move from our editor to the staging area and into long-term storage. First, we’ll improve our forecast by changing ‘pizza’ to ‘Sun’:\n                      $ nano forecast.md\n$ cat forecast.md\n                      # Forecast\n\n## Today\n\nCloudy with a chance of Sun.\n\n## Tomorrow\n\nMorning rainbows followed by light showers.\n                      $ git diff\n                      diff --git a/forecast.md b/forecast.md\nindex 315bf3a..b36abfd 100644\n--- a/forecast.md\n+++ b/forecast.md\n@@ -2,7 +2,7 @@\n \n ## Today\n \n-Cloudy with a chance of pizza.\n+Cloudy with a chance of Sun.\n \n ## Tomorrow\n\n                      So far, so good: we’ve replaced one line (shown with a - in the first column) with a new line (shown with a + in the first column). Now let’s put that change in the staging area and see what git diff reports:\n                      $ git add forecast.md\n$ git diff\n                      There is no output: as far as Git can tell, there’s no difference between what it’s been asked to save permanently and what’s currently in the directory. However, if we do this:\n                      $ git diff --staged\n                      diff --git a/forecast.md b/forecast.md\nindex 315bf3a..b36abfd 100644\n--- a/forecast.md\n+++ b/forecast.md\n@@ -2,7 +2,7 @@\n \n ## Today\n \n-Cloudy with a chance of pizza.\n+Cloudy with a chance of Sun.\n \n ## Tomorrow\n\n                      it shows us the difference between the last committed change and what’s in the staging area. Let’s save our changes:\n                      $ git commit -m \"Modify the forecast to add a chance of Sun\"\n                      [forecast 005937f] Modify the forecast to add a chance of Sun\n 1 file changed, 1 insertion(+), 1 deletion(-)\n                      check our status:\n                      $ git status\n                      On branch forecast\nnothing to commit, working tree clean\n                      Our repository now looks like this:\n                      \n                      \n                      \n                      \n                      \n                          gitGraph\n                              accDescr {A Git graph showing the root-commit on the main branch and a new forecast branch, branching off the root-commit, with three commits.}\n                              commit id: 'Initial commit'\n                              branch forecast\n                              commit id: 'Create a md file with the forecast'\n                              commit id: 'Add tomorrows forecast to forecast.md'\n                              commit id: 'Modify the forecast to add a chance of Sun'\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Word-based diffing\n                      \n                      \n                      \n                      Sometimes, e.g. in the case of the text documents a line-wise diff is too coarse. That is where the --color-words option of git diff comes in very useful as it highlights the changed words using colors.\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Directories\n                      \n                      \n                      \n                      Two important facts you should know about directories in Git.\n                      \n                      Git does not track directories on their own, only files within them. Try it for yourself:\n                      \n                      $ mkdir symbols\n$ git status\n$ git add symbols\n$ git status\n                      Note, our newly created empty directory symbols does not appear in the list of untracked files even if we explicitly add it (via git add) to our repository. This is the reason why you will sometimes see .gitkeep files in otherwise empty directories. Unlike .gitignore, these files are not special and their sole purpose is to populate a directory so that Git adds it to the repository. In fact, you can name such files anything you like.\n                      \n                      If you create a directory in your Git repository and populate it with files, you can add all files in the directory at once by:\n                      \n                      $ git add &lt;directory-with-files&gt;\n                      Try it for yourself:\n                      $ touch symbols/pressure.md symbols/pollen.md\n$ git status\n$ git add symbols\n$ git status\n                      Before moving on, we will commit these changes.\n                      $ git commit -m \"Add some initial weather symbols\"\n                      \n                      \n                      To recap, when we want to add changes to our repository, we first need to add the changed files to the staging area (git add) and then commit the staged changes to the repository (git commit):\n                      \n                      \n                      \n                      \n                      \n                      \n                      Choosing a Commit Message\n                      \n                      Which of the following commit messages would be most appropriate for the last commit made to forecast.md?\n                      \n                      “Changes”\n                      “Modify the forecast”\n                      “Modify the forecast to add a chance of Sun”\n                      \n                      \n                      Solution (Solution). Answer 1 is not descriptive enough, and the purpose of the commit is unclear; and answer 2 is redundant to using “git diff” to see what changed in this commit; but answer 3 is good: short, descriptive, and imperative.\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Committing Changes to Git\n                      \n                      Which command(s) below would save the changes of myfile.txt to my local Git repository?\n                      \n                         $ git commit -m \"my recent changes\"\n                         $ git init myfile.txt\n   $ git commit -m \"my recent changes\"\n                         $ git add myfile.txt\n   $ git commit -m \"my recent changes\"\n                         $ git commit -m myfile.txt \"my recent changes\"\n                      \n                      \n                      Solution (Solution). \n                      \n                      Would only create a commit if files have already been staged.\n                      Would try to create a new repository.\n                      Is correct: first add the file to the staging area, then commit.\n                      Would try to commit a file “my recent changes” with the message myfile.txt.\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Committing Multiple Files\n                      \n                      The staging area can hold changes from any number of files that you want to commit as a single snapshot.\n                      \n                      Add some text to forecast.md noting the expected temperature.\n                      Create a new file atlas.md with a list of common weather such as rain, sunshine, fog etc.\n                      Add changes from both files to the staging area, and commit those changes.\n                      \n                      \n                      Solution (Solution). First we make our changes to the forecast.md and atlas.md files:\n                      $ nano forecast.md\n$ cat forecast.md\n                      # Forecast\n\n## Today\n\nCloudy with a chance of sun.\nMild temperatures around 16 °C.\n\n## Tomorrow\n\nMorning rainbows followed by light showers.\n                      $ nano atlas.md\n$ cat atlas.md\n                      # Weather Atlas\n\n- rain\n- sunshine\n- fog\n                      Now you can add both files to the staging area. We can do that in one line:\n                      $ git add forecast.md atlas.md\n                      Or with multiple commands:\n                      $ git add forecast.md\n$ git add atlas.md\n                      Now the files are ready to commit. You can check that using git status. If you are ready to commit use:\n                      $ git commit -m \"Add in the temperature to the forecast and create the weather atlas file\"\n                      [forecast cc127c2] Add in the temperature to the forecast and create the weather atlas file\n 2 files changed, 6 insertions(+)\n create mode 100644 atlas.md\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      bio Repository\n                      \n                      \n                      Create a new Git repository on your computer called bio.\n                      Write a three-line biography for yourself in a file called me.txt, commit your changes.\n                      Modify one line, add a fourth line\n                      Display the differences. between its updated state and its original state.\n                      \n                      \n                      Solution (Solution). If needed, move out of the weather folder:\n                      $ cd ..\n                      Create a new folder called bio and ‘move’ into it:\n                      $ mkdir bio\n$ cd bio\n                      Initialise the repository:\n                      $ git init\n                      Create your biography file me.txt using nano or another text editor. Once in place, add and commit it to the repository:\n                      $ git add me.txt\n$ git commit -m \"Add biography file\"\n                      Modify the file as described (modify one line, add a fourth line). To display the differences between its updated state and its original state, use git diff:\n                      $ git diff me.txt\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Keypoints\n                      \n                      \n                      git status shows the status of a repository.\n                      Files can be stored in a project’s working directory (which users see), the staging area (where the next commit is being built up) and the local repository (where commits are permanently recorded).\n                      git add puts files in the staging area.\n                      git commit saves the staged content as a new commit in the local repository.\n                      Write a commit message that accurately describes your changes.\n                      \n                      \n                      \n                      \n                      \n                      Overview\n                      \n                      \n                      \n                      \n                      Questions\n                      \n                      How do I record changes in Git?\n                      How do I check the status of my version control repository?\n                      How do I record notes about what changes I made and why?\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Objectives\n                      \n                      Explain what the HEAD of a repository is and how to use it.\n                      Identify and use Git commit numbers.\n                      Compare various versions of tracked files."
  },
  {
    "objectID": "episodes/aio.html#viewing-a-repositories-history",
    "href": "episodes/aio.html#viewing-a-repositories-history",
    "title": "Version Control with Git",
    "section": "Viewing a Repositories History",
    "text": "Viewing a Repositories History\n                      If we want to know what we’ve done recently, we can ask Git to show us the project’s history using git log:\n                      $ git log\n                      commit cdb7fa654c3f5aee731a655e57f2ba74d9c74582 (HEAD -&gt; forecast)\nAuthor: Joanne Simpson &lt;j.simpson@mo-weather.uk&gt;\nDate:   Mon Nov 4 18:35:21 2024 +0000\n\n    Add in the temperature to the forecast and create the weather atlas file\n                      git log lists all commits made to a repository in reverse chronological order. The listing for each commit includes the commit’s full identifier (which starts with the same characters as the short identifier printed by the git commit command earlier), the commit’s author, when it was created, and the log message Git was given when the commit was created. The output above only shows the latest commit in the log for brevity, you should see all your commits!\n                      \n                      \n                      \n                        \n                        \n                        FCM Comparison\n                        \n                      \n                      \n                      \n                      git log is equivalent to:\n                      $ fcm log\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Paging the Log\n                      \n                      \n                      \n                      When the output of git log is too long to fit in your screen, git uses a program to split it into pages of the size of your screen. When this “pager” is called, you will notice that the last line in your screen is a :, instead of your usual prompt.\n                      \n                      To get out of the pager, press Q.\n                      To move to the next page, press Spacebar.\n                      To search for some_word in all pages, press / and type some_word. Navigate through matches pressing N.\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Limit Log Size\n                      \n                      \n                      \n                      To avoid having git log cover your entire terminal screen, you can limit the number of commits that Git lists by using -N, where N is the number of commits that you want to view. For example, if you only want information from the last commit you can use:\n                      $ git log -1\n                      commit cdb7fa654c3f5aee731a655e57f2ba74d9c74582 (HEAD -&gt; forecast)\nAuthor: Joanne Simpson &lt;j.simpson@mo-weather.uk&gt;\nDate:   Mon Nov 4 18:35:21 2024 +0000\n\n    Add in the temperature to the forecast and create the weather atlas file\n                      You can also reduce the quantity of information using the --oneline option:\n                      $ git log --oneline\n                      cdb7fa6 (HEAD -&gt; forecast) Add in the temperature to the forecast and create the weather atlas file\n62a9457 Modify the forecast to add a chance of Sun\nd3e4637 Add tomorrows forecast to forecast.md\n590c40c Create a md file with the forecast\n                      You can also combine the --oneline option with others. One useful combination adds --graph to display the commit history as a text-based graph and to indicate which commits are associated with the current HEAD, the current branch main, or other Git references:\n                      $ git log --oneline --graph\n                      * cdb7fa6 (HEAD -&gt; forecast) Add in the temperature to the forecast and create the weather atlas file\n* 62a9457 Modify the forecast to add a chance of Sun\n* d3e4637 Add tomorrows forecast to forecast.md\n* 590c40c Create a md file with the forecast\n                      \n                      \n                      \n                      A common alias for git log\n                      It is often useful to use the --decorate, --oneline, and --graph flags all at once. To avoid us having to write out the three flags each time we can set an alias:\n                      $ git config --global alias.dog \"log --decorate --oneline --graph\"\n                      This alias makes these two commands equivalent:\n                      $ git dog\n$ git log --decorate --oneline --graph\n                      --decorate ensures commits with reference names1 are displayed when using older versions of Git.\n                      \n                      \n                      git show\n                      The git show command lets you view information for specific commits. By default git show will show information for the latest commit on the current branch.\n                      $ git show\n                      commit cdb7fa654c3f5aee731a655e57f2ba74d9c74582 (HEAD -&gt; forecast)\nAuthor: Joanne Simpson &lt;j.simpson@mo-weather.uk&gt;\nDate:   Mon Nov 4 18:35:21 2024 +0000\n\n    Add in the temperature to the forecast and create the weather atlas file\n\ndiff --git a/atlas.md b/atlas.md\nnew file mode 100644\nindex 0000000..18fac28\n--- /dev/null\n+++ b/atlas.md\n@@ -0,0 +1,5 @@\n+# Weather Atlas\n+\n+- rain\n+- sunshine\n+- fog\n:"
  },
  {
    "objectID": "episodes/aio.html#identifying-commits",
    "href": "episodes/aio.html#identifying-commits",
    "title": "Version Control with Git",
    "section": "Identifying Commits",
    "text": "Identifying Commits\n                      As we saw in the previous episode, we can refer to commits by their identifiers. You can refer to the most recent commit of the working directory by using the reference name HEAD.\n                      We’ve been adding small changes at a time to forecast.md, so it’s easy to track our progress by looking, so let’s do that using our HEADs. Before we start, let’s make a change to forecast.md, adding yet another line with an ill-considered change.\n                      $ nano forecast.md\n$ cat forecast.md\n                      # Forecast\n\n## Today\n\nCloudy with a chance of sun.\nMild temperatures around 16 °C.\n\n## Tomorrow\n\nMorning rainbows followed by light showers.\nAn ill-considered change.\n                      Now, let’s see what we get.\n                      $ git diff HEAD forecast.md\n                      diff --git a/forecast.md b/forecast.md\nindex b36abfd..0848c8d 100644\n--- a/forecast.md\n+++ b/forecast.md\n@@ -8,3 +8,4 @@\n Mild temperatures around 16 °C.\n \n ## Tomorrow\n \n Morning rainbows followed by light showers.\n+An ill-considered change.\n                      which is the same as what you would get if you leave out HEAD (try it). The real goodness in all this is when you can refer to previous commits. We do that by adding ~1 (where “~” is “tilde”, pronounced [til-duh]) to refer to the commit one before HEAD.\n                      $ git diff HEAD~1 forecast.md\n                      If we want to see the differences between older commits we can use git diff again, but with the notation HEAD~1, HEAD~2, and so on, to refer to them:\n                      $ git diff HEAD~2 forecast.md\n                      diff --git a/forecast.md b/forecast.md\nindex df0654a..b36abfd 100644\n--- a/forecast.md\n+++ b/forecast.md\n@@ -2,8 +2,10 @@\n \n ## Today\n\n-Cloudy with a chance of pizza.\n+Cloudy with a chance of sun.\n+Mild temperatures around 16 °C.\n \n ## Tomorrow\n \n Morning rainbows followed by light showers.\n+An ill-considered change.\n                      We can also use identifiers with git show.\n                      $ git show HEAD~2 forecast.md\n                      Author: Joanne Simpson &lt;j.simpson@mo-weather.uk&gt;\nDate:   Mon Nov 4 18:16:29 2024 +0000\n\n    Add tomorrows forecast to forecast.md\n\ndiff --git a/forecast.md b/forecast.md\nindex d8bc6ce..5b5d97e 100644\n--- a/forecast.md\n+++ b/forecast.md\n@@ -3,3 +3,7 @@\n ## Today\n \n Cloudy with a chance of pizza.\n+\n+## Tomorrow\n+\n+Morning rainbows followed by light showers.\n                      In this way, we can build up a chain of commits. The most recent end of the chain is referred to as HEAD; we can refer to previous commits using the ~ notation, so HEAD~1 means “the previous commit”, while HEAD~123 goes back 123 commits from where we are now.\n                      We can also refer to commits using those long strings of digits and letters that both git log and git show display. These are unique IDs for the changes, and “unique” really does mean unique: every change to any set of files on any computer has a unique 40-character identifier. Our first commit on the forecast branch was given the ID f22b25e3233b4645dabd0d81e651fe074bd8e73b, so let’s try this:\n                      $ git diff f22b25e3233b4645dabd0d81e651fe074bd8e73b forecast.md\n                      diff --git a/forecast.md b/forecast.md\nindex df0654a..93a3e13 100644\n--- a/forecast.md\n+++ b/forecast.md\n@@ -2,4 +2,10 @@\n \n ## Today\n\n-Cloudy with a chance of pizza.\n+Cloudy with a chance of sun.\n+Mild temperatures around 16 °C.\n+\n+## Tomorrow\n+\n+Morning rainbows followed by light showers.\n+An ill-considered change.\n                      That’s the right answer, but typing out random 40-character strings is annoying, so Git lets us use just the first few characters (typically seven for normal size projects):\n                      $ git diff f22b25e forecast.md\n                      diff --git a/forecast.md b/forecast.md\nindex df0654a..93a3e13 100644\n--- a/forecast.md\n+++ b/forecast.md\n@@ -2,4 +2,10 @@\n \n ## Today\n\n-Cloudy with a chance of pizza.\n+Cloudy with a chance of sun.\n+Mild temperatures around 16 °C.\n+\n+## Tomorrow\n+\n+Morning rainbows followed by light showers.\n+An ill-considered change.\n                      So far we have only been comparing a previous commit to the working copy. To get a difference between two specific commits use both their IDs:\n                      $ git diff d3e4637 62a9457 forecast.md\n                      diff --git a/forecast.md b/forecast.md\nindex 4c96be7..541eee7 100644\n--- a/forecast.md\n+++ b/forecast.md\n@@ -2,7 +2,7 @@\n \n ## Today\n \n-Cloudy with a chance of pizza.\n+Cloudy with a chance of Sun.\n \n ## Tomorrow\n \n                      \n                      \n                      \n                      \n                      \n                      Understanding Workflow and History\n                      \n                      What is the output of the last command in\n                      $ cd weather\n$ git switch -c add_CMIP_data\n$ echo \"Global Climate Data\" &gt; CMIP7.md\n$ git add CMIP7.md\n$ echo \"Data from the 7th model intercomparison project\" &gt;&gt; CMIP7.md\n$ git commit -m \"Adds in CMIP7 data file\"\n$ git restore CMIP7.md\n$ cat CMIP7.md  # this will print the content of CMIP7.md on screen\n                      \n                        Data from the 7th model intercomparison project\n                        Global Climate Data\n                        Global Climate Data\n  Data from the 7th model intercomparison project\n                        Error because you have changed CMIP7.md without committing the changes\n                      \n                      \n                      Solution (Solution). The answer is 2.\n                      The changes to the file from the second echo command are only applied to the working copy, not the version in the staging area.\n                      So, when git commit -m \"Adds in CMIP7 data file\" is executed, the version of CMIP7.md committed to the repository is the one from the staging area and only has one line, Global Climate Data.\n                      At this time, the working copy still has the second line (and git status will show that the file is modified). However, git restore CMIP7.md removes all unstaged modifications to the CMIP7.md file, so the second line is removed. So, cat CMIP7.md will output\n                      Global Climate Data\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Checking Understanding of git diff\n                      \n                      Consider this command: git diff HEAD~9 forecast.md. What do you predict this command will do if you execute it? What happens when you do execute it? Why?\n                      Try another command, git diff [ID] forecast.md, where [ID] is replaced with the unique identifier for your most recent commit. What do you think will happen, and what does happen?\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Explore and Summarize Histories\n                      \n                      Exploring history is an important part of Git, and often it is a challenge to find the right commit ID, especially if the commit is from several months ago.\n                      Imagine the weather project has more than 50 files. You would like to find a commit that modifies some specific text in forecast.md. When you type git log, a very long list appeared. How can you narrow down the search?\n                      Recall that the git diff command allows us to explore one specific file, e.g., git diff forecast.md. We can apply a similar idea here.\n                      $ git log forecast.md\n                      Unfortunately some of these commit messages are very ambiguous, e.g., update files. How can you search through these files?\n                      Both git diff and git log are very useful and they summarize a different part of the history for you. Is it possible to combine both? Let’s try the following:\n                      $ git log --patch forecast.md\n                      You should get a long list of output, and you should be able to see both commit messages and the difference between each commit.\n                      Question: What does the following command do?\n                      $ git log --patch HEAD~9 *.md\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Keypoints\n                      \n                      \n                      git log displays the repositories history.\n                      git diff displays differences between commits.\n                      HEAD references the last commit.\n                      HEAD~1 references the commit before last.\n                      \n                      \n                      \n                      \n                      \n                      Overview\n                      \n                      \n                      \n                      \n                      Questions\n                      \n                      How can I identify old versions of files?\n                      How do I review my changes?\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Objectives\n                      \n                      Restore old versions of files.\n                      Undo commits.\n                      \n                      \n                      \n                      \n                      \n                      \n                      All right! So we can save changes to files and see what we’ve changed. Now, how can we restore older versions of things? Let’s suppose we change our mind about the last update to forecast.md (the “ill-considered change”).\n                      git status now tells us that the file has been changed, but those changes haven’t been staged:\n                      $ git status\n                      On branch forecast\nChanges not staged for commit:\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\n  (use \"git restore &lt;file&gt;...\" to discard changes in working directory)\n    modified:   forecast.md\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n                      We can put things back the way they were by using git restore:\n                      $ git restore forecast.md\n$ cat forecast.md\n                      # Forecast\n\n## Today\n\nCloudy with a chance of sun.\nMild temperatures around 16 °C.\n\n## Tomorrow\n\nMorning rainbows followed by light showers.\n                      As you might guess from its name, git restore restores an old version of a file. By default, it recovers the version of the file recorded in HEAD, which is the last saved commit.\n                      \n                      \n                      \n                        \n                        \n                        FCM Comparison\n                        \n                      \n                      \n                      \n                      git restore is equivalent to:\n                      $ fcm revert FILE"
  },
  {
    "objectID": "episodes/aio.html#restoring-a-file-from-further-back",
    "href": "episodes/aio.html#restoring-a-file-from-further-back",
    "title": "Version Control with Git",
    "section": "Restoring a file from further back",
    "text": "Restoring a file from further back\n                      If we want to go back even further, we can use a commit identifier instead, using -s option:\n                      $ git restore -s f22b25e forecast.md\n                      $ cat forecast.md\n                      # Forecast\n\n## Today\n\nCloudy with a chance of pizza.\n                      $ git status\n                      On branch forecast\nChanges not staged for commit:\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\n  (use \"git restore &lt;file&gt;...\" to discard changes in working directory)\n    modified:   forecast.md\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n                      Notice that the changes are not currently in the staging area, and have not been committed. If we wished, we can put things back the way they were at the last commit by using git restore to overwrite the working copy with the last committed version:\n                      $ git restore forecast.md\n$ cat forecast.md\n                      # Forecast\n\n## Today\n\nCloudy with a chance of sun.\nMild temperatures around 16 °C.\n\n## Tomorrow\n\nMorning rainbows followed by light showers.\n                      It’s important to remember that we must use the commit number that identifies the state of the repository before the change we’re trying to undo. A common mistake is to use the number of the commit in which we made the change we’re trying to discard. In the example below, we want to retrieve the state from before the most recent commit (HEAD~1), which is commit f22b25e. We use the . to mean all files:\n                      \n                      The fact that files can be restored one by one tends to change the way people organize their work. If everything is in one large document, it’s hard (but not impossible) to undo changes to the introduction without also undoing changes made later to the conclusion. If the introduction and conclusion are stored in separate files, on the other hand, moving backward and forward in time becomes much easier."
  },
  {
    "objectID": "episodes/aio.html#reverting-changes",
    "href": "episodes/aio.html#reverting-changes",
    "title": "Version Control with Git",
    "section": "Reverting Changes",
    "text": "Reverting Changes\n                      Generally it is best to spot and revert mistakes before the commit stage. The table below summarises how to revert a change depending on where in the commit process you are:\n                      \n                      \n                      \n                      To revert files you have …\n                      git command\n                      \n                      \n                      \n                      \n                      modified\n                      $ git restore &lt;files&gt;\n                      \n                      \n                      staged\n                      $ git restore --staged &lt;files&gt;\n                      \n                      \n                      committed\n                      $ git revert &lt;commit&gt;\n                      \n                      \n                      \n                      We have already practised restoring modified files. Now let’s practise restoring staged changes. Go ahead and make a similar change like you did earlier to your forecast.md:\n                      $ nano forecast.md\n$ cat forecast.md\n                      # Forecast\n\n## Today\n\nCloudy with a chance of sun.\nMild temperatures around 16 °C.\n\n## Tomorrow\n\nMorning rainbows followed by light showers.\nAnother ill-considered change.\n                      Add the changes:\n                      $ git add forecast.md\n                      Now git status shows:\n                      $ git status\n                      On branch forecast\nChanges to be committed:\n  (use \"git restore --staged &lt;file&gt;...\" to unstage)\n    modified:   forecast.md\n                      And we can use the hint to unstage our changes:\n                      $ git restore --staged forecast.md\n                      Our modifications to the forecast.md file have been unstaged and are now back in the working copy. We can restore these modifications fully with:\n                      $ git restore forecast.md\n                      \n                      \n                      \n                      \n                      \n                      Recovering Older Versions of a File\n                      \n                      Jennifer has made changes to the Python script that she has been working on for weeks, and the modifications she made this morning “broke” the script and it no longer runs. She has spent ~ 1hr trying to fix it, with no luck…\n                      Luckily, she has been keeping track of her project’s versions using Git! Which commands below will let her recover the last committed version of her Python script called data_cruncher.py?\n                      \n                      $ git restore\n                      $ git restore data_cruncher.py\n                      $ git restore -s HEAD~1 data_cruncher.py\n                      $ git restore -s &lt;unique ID of last commit&gt; data_cruncher.py\n                      Both 2 and 4\n                      \n                      \n                      Solution (Solution). The answer is (5)-Both 2 and 4.\n                      The restore command restores files from the repository, overwriting the files in your working directory. Answers 2 and 4 both restore the latest version in the repository of the file data_cruncher.py. Answer 2 uses HEAD to indicate the latest, whereas answer 4 uses the unique ID of the last commit, which is what HEAD means.\n                      Answer 3 gets the version of data_cruncher.py from the commit before HEAD, which is NOT what we wanted.\n                      Answer 1 results in an error. You need to specify a file to restore. If you want to restore all files you should use git restore .\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Reverting a Commit\n                      \n                      Ahmed is collaborating with colleagues on a Python script. He realizes his last commit to the project’s repository contained an error, and wants to undo it. Ahmed wants to undo it correctly so everyone in the project’s repository gets the correct change. The command git revert [erroneous commit ID] will create a new commit that reverses the erroneous commit.\n                      The command git revert is different from git restore -s [commit ID] .. git restore restores files within the local repository to a previous state, whereas git revert restores the files to a previous state and adds then commits these changes to the local repository. So git revert here is the same as git restore -s [commit ID]\n                      followed by git commit -am Reverts: [commit].\n                      git revert undoes a whole commit whereas git restore -s can be used restore individual files.\n                      Below are the right steps and explanations for Ahmed to use git revert, what is the missing command?\n                      \n                      ________ # Look at the git history of the project to find the commit ID\n                      Copy the ID (the first few characters of the ID, e.g. 0b1d055).\n                      git revert [commit ID]\n                      Type in the new commit message.\n                      Save and close.\n                      \n                      \n                      Solution (Solution). The command git log lists project history with commit IDs.\n                      The command git show HEAD shows changes made at the latest commit, and lists the commit ID; however, Ahmed should double-check it is the correct commit, and no one else has committed changes to the repository.\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Keypoints\n                      \n                      \n                      git restore recovers old versions of files.\n                      git reset undoes staged changes.\n                      git revert reverses a commit.\n                      \n                      \n                      \n                      \n                      \n                      Overview\n                      \n                      \n                      \n                      \n                      Questions\n                      \n                      How can I recover old versions of files?\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Objectives\n                      \n                      Configure Git to ignore specific files.\n                      Explain why ignoring files can be useful.\n                      \n                      \n                      \n                      \n                      \n                      \n                      What if we have files that we do not want Git to track for us, like backup files created by our editor or intermediate files created during data analysis? Let’s create a few dummy files:\n                      $ mkdir data\n$ touch a.png b.png c.png data/a.csv data/b.nc\n                      and see what Git says:\n                      $ git status\n                      On branch forecast\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n\n    a.png\n    b.png\n    c.png\n    data/\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n                      Putting these files under version control would be a waste of disk space. What’s worse, having them all listed could distract us from changes that actually matter, so let’s tell Git to ignore them.\n                      We do this by creating a file in the root directory of our project called .gitignore:\n                      $ nano .gitignore\n$ cat .gitignore\n                      *.png\ndata/\n                      These patterns tell Git to ignore any file whose name ends in .png and everything in the data directory. (If any of these files were already being tracked, Git would continue to track them.)\n                      Once we have created this file, the output of git status is much cleaner:\n                      $ git status\n                      On branch forecast\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n\n    .gitignore\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n                      The only thing Git notices now is the newly-created .gitignore file. You might think we wouldn’t want to track it, but everyone we’re sharing our repository with will probably want to ignore the same things that we’re ignoring. Let’s add and commit .gitignore:\n                      $ git add .gitignore\n$ git commit -m \"Ignore png files and the data folder\"\n$ git status\n                      On branch forecast\nnothing to commit, working tree clean\n                      As a bonus, using .gitignore helps us avoid accidentally adding files to the repository that we don’t want to track:\n                      $ git add a.png\n                      The following paths are ignored by one of your .gitignore files:\na.png\nUse -f if you really want to add them.\n                      If we really want to override our ignore settings, we can use git add -f to force Git to add something. For example, git add -f a.csv. We can also always see the status of ignored files if we want:\n                      $ git status --ignored\n                      On branch forecast\nIgnored files:\n (use \"git add -f &lt;file&gt;...\" to include in what will be committed)\n\n        a.png\n        b.png\n        c.png\n        data/\n\nnothing to commit, working tree clean\n                      \n                      \n                      \n                      \n                      \n                      Ignoring Nested Files\n                      \n                      Given a directory structure that looks like:\n                      data/csv\ndata/plots\n                      How would you ignore only data/plots and not data/csv?\n                      \n                      Solution (Solution). If you only want to ignore the contents of data/plots, you can change your .gitignore to ignore only the /plots/ subfolder by adding the following line to your .gitignore:\n                      data/plots/\n                      This line will ensure only the contents of data/plots is ignored, and not the contents of data/csv.\n                      As with most programming issues, there are a few alternative ways that one may ensure this ignore rule is followed. The “Ignoring Nested Files: Variation” exercise has a slightly different directory structure that presents an alternative solution. Further, the discussion page has more detail on ignore rules.\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Including Specific Files\n                      \n                      How would you ignore all .png files in your root directory except for final.png? Hint: Find out what ! (the exclamation point operator) does\n                      \n                      Solution (Solution). You would add the following two lines to your .gitignore:\n                      *.png           # ignore all png files\n!final.png      # except final.png\n                      The exclamation point operator will include a previously excluded entry.\n                      Note if you’ve previously committed .png files they will not be ignored with this new rule. Only future additions of .png files added to the root directory will be ignored.\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Ignoring Nested Files: Variation\n                      \n                      Given a directory structure that looks similar to the earlier Nested Files exercise, but with a slightly different directory structure:\n                      data/csv\ndata/images\ndata/plots\ndata/analysis\n                      How would you ignore all of the contents in the data folder, but not data/csv?\n                      Hint: think a bit about how you created an exception with the ! operator before.\n                      \n                      Solution (Solution). If you want to ignore the contents of data/ but not those of data/csv/, you can change your .gitignore to ignore the contents of data folder, but create an exception for the contents of the data/csv subfolder. Your .gitignore would look like this:\n                      data/*               # ignore everything in data folder\n!data/csv/          # do not ignore data/csv/ contents\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Ignoring all data Files in a Directory\n                      \n                      Assuming you have an empty .gitignore file, and given a directory structure that looks like:\n                      data/csv/global/temperature/a.dat\ndata/csv/global/temperature/b.dat\ndata/csv/global/temperature/c.dat\ndata/csv/global/temperature/info.txt\ndata/plots\n                      What’s the shortest .gitignore rule you could write to ignore all .dat files in data/csv/global/temperature? Do not ignore the info.txt.\n                      \n                      Solution (Solution). Appending data/csv/global/temperature/*.dat will match every file in data/csv/global/temperature that ends with .dat. The file data/csv/global/temperature/info.txt will not be ignored.\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Ignoring all data Files in the repository\n                      \n                      Let us assume you have many .csv files in different subdirectories of your repository. For example, you might have:\n                      results/a.csv\ndata/experiment_1/b.csv\ndata/experiment_2/c.csv\ndata/experiment_2/variation_1/d.csv\n                      How do you ignore all the .csv files, without explicitly listing the names of the corresponding folders?\n                      \n                      Solution (Solution). In the .gitignore file, write:\n                      **/*.csv\n                      This will ignore all the .csv files, regardless of their position in the directory tree. You can still include some specific exception with the exclamation point operator.\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      The Order of Rules\n                      \n                      Given a .gitignore file with the following contents:\n                      *.csv\n!*.csv\n                      What will be the result?\n                      \n                      Solution (Solution). The ! modifier will negate an entry from a previously defined ignore pattern. Because the !*.csv entry negates all of the previous .csv files in the .gitignore, none of them will be ignored, and all .csv files will be tracked.\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Log Files\n                      \n                      You wrote a script that creates many intermediate log-files of the form log_01, log_02, log_03, etc. You want to keep them but you do not want to track them through Git.\n                      \n                      Write one .gitignore entry that excludes files of the form log_01, log_02, etc.\n                      Test your “ignore pattern” by creating some dummy files of the form log_01, etc.\n                      You find that the file log_01 is very important after all, add it to the tracked files without changing the .gitignore again.\n                      Discuss with your neighbor what other types of files could reside in your directory that you do not want to track and thus would exclude via .gitignore.\n                      \n                      \n                      Solution (Solution). \n                      \n                      append either log_* or log* as a new entry in your .gitignore\n                      track log_01 using git add -f log_01\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Keypoints\n                      \n                      \n                      The .gitignore file tells Git what files to ignore.\n                      \n                      \n                      \n                      \n                      This marks the end of the Git section. Take a break and remember to fill out your minute card feedback."
  },
  {
    "objectID": "episodes/aio.html#summary",
    "href": "episodes/aio.html#summary",
    "title": "Version Control with Git",
    "section": "Summary",
    "text": "Summary\n                      You’ve now used Git to create a repository and made some commits on a feature branch. Your repository will look something like this:\n                      \n                      \n                      \n                      \n                      \n                      ---\n                      config:\n                        gitGraph:\n                          showCommitLabel: false\n                      ---\n                          gitGraph\n                              accDescr {A Git graph showing the root-commit on the main branch and a new forecast branch with five commits.}\n                              commit id: 'Initial commit'\n                              branch forecast\n                              commit id: 'Create a md file with the forecast'\n                              commit id: 'Add tomorrows forecast to forecast.md'\n                              commit id: 'Modify the forecast to add a chance of Sun'\n                              commit id: 'Add in the temperature to the forecast and create the weather atlas file'\n                              commit id: 'Ignore png files and the data folder'\n                      \n                      \n                      \n                      \n                      \n                      \n                      Your repo may have a different number of commits on the forecast branch depending on which challenge exercises you have completed. You can find short summaries of all the new commands you’ve learnt on the Key Points page.\n                      \n                      Overview\n                      \n                      \n                      \n                      \n                      Questions\n                      \n                      How can I tell Git to ignore files I don’t want to track?\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Objectives\n                      \n                      Explain what remote repositories are and why they are useful.\n                      Push to or pull from a remote repository.\n                      \n                      \n                      \n                      \n                      \n                      \n                      Version control really comes into its own when we begin to collaborate with other people. We already have most of the machinery we need to do this; the only thing missing is to copy changes from one repository to another.\n                      Systems like Git allow us to move work between any two repositories. In practice, though, it’s easiest to use one copy as a central hub, and to keep it on the web rather than on someone’s laptop. Most programmers use hosting services like GitHub, Bitbucket or GitLab to hold those main copies; we’ll explore the pros and cons of this in a later episode.\n                      Let’s now share the changes we’ve made to our current project with the world. To this end we are going to create a remote repository that will be linked to our local repository."
  },
  {
    "objectID": "episodes/aio.html#create-a-remote-repository",
    "href": "episodes/aio.html#create-a-remote-repository",
    "title": "Version Control with Git",
    "section": "1. Create a remote repository",
    "text": "1. Create a remote repository\n                      Log in to GitHub, then click on the icon in the top right corner to create a new repository called weather:\n                      \n                      Name your repository “weather” and then click “Create Repository”.\n                      Note: Since this repository will be connected to a local repository, it needs to be empty. Leave “Initialize this repository with a README” unchecked, and keep “None” as options for both “Add .gitignore” and “Add a license.” See the “GitHub License and README files” exercise below for a full explanation of why the repository needs to be empty.\n                      \n                      \n                      \n                      \n                        \n                        \n                        Repository Visibility\n                        \n                      \n                      \n                      \n                      Here we have chosen to make our repository public. The visibility of your repository depends on which option you choose:\n                      \n                      Private: only you\n                      Internal (organisations only): read permissions to anyone in the organisation\n                      Public: read permissions to anyone\n                      \n                      Some organisations will restrict the creation of public repositories so you may find their default is internal. If your project deals with sensitive material then create a private repository.\n                      \n                      \n                      \n                      \n                      As soon as the repository is created, GitHub displays a page with a URL and some information on how to configure your local repository. Ignore the suggested commands for now as we will run these later.\n                      \n                      This effectively does the following on GitHub’s servers:\n                      $ mkdir weather\n$ cd weather\n$ git init\n                      If you remember back to the earlier episode where we added and committed our earlier work on forecast.md, we had a diagram of the local repository which looked like this:\n                      \n                      Now that we have two repositories, we need a diagram like this:\n                      \n                      Note that our local repository still contains our earlier work on forecast.md, but the remote repository on GitHub appears empty as it doesn’t contain any files yet."
  },
  {
    "objectID": "episodes/aio.html#connect-local-to-remote-repository",
    "href": "episodes/aio.html#connect-local-to-remote-repository",
    "title": "Version Control with Git",
    "section": "2. Connect local to remote repository",
    "text": "2. Connect local to remote repository\n                      Now we connect the two repositories. We do this by making the GitHub repository a remote for the local repository. The home page of the repository on GitHub includes the URL string we need to identify it:\n                      \n                      Click on the ‘SSH’ link to change the protocol from HTTPS to SSH.\n                      \n                      \n                      \n                      \n                      \n                      \n                      HTTPS vs. SSH\n                      \n                      \n                      \n                      We use SSH here because, while it requires some additional configuration, it is a security protocol widely used by many applications. The steps below describe SSH at a minimum level for GitHub.\n                      \n                      \n                      Copy that URL from the browser, go into the local weather repository, and run this command:\n                      $ git remote add origin git@github.com:mo-eormerod/weather.git\n                      Make sure to use the URL for your repository: the only difference should be your username instead of mo-eormerod.\n                      origin is a local name used to refer to the remote repository. It could be called anything, but origin is a convention that is often used by default in Git and GitHub, so it’s helpful to stick with this unless there’s a reason not to.\n                      We can check that the command has worked by running git remote -v:\n                      $ git remote -v\n                      origin   git@github.com:mo-eormerod/weather.git (fetch)\norigin   git@github.com:mo-eormerod/weather.git (push)\n                      We’ll discuss remotes in more detail in the next episode, while talking about how they might be used for collaboration."
  },
  {
    "objectID": "episodes/aio.html#ssh-background-and-setup",
    "href": "episodes/aio.html#ssh-background-and-setup",
    "title": "Version Control with Git",
    "section": "3. SSH Background and Setup",
    "text": "3. SSH Background and Setup\n                      \n                      \n                      \n                        \n                        \n                        Instructor Note\n                        \n                      \n                      \n                      \n                      Some learners may have set up an ssh key already. If they have a key with this name: ~/.ssh/id_ed25519_github and can successfully authenticate with ssh -T git@github.com they can skip this section.\n                      If their ssh key name does not match the one above we strongly recommend they follow the instructions below.\n                      Those who are skipping this section can revisit the challenges in earlier episodes (yellow callouts with a lightning bolt) or read through the discussion notes.\n                      \n                      \n                      \n                      \n                      Before you can connect to a remote repository, you need to set up a way for your computer to authenticate with GitHub so it knows it’s you trying to connect to the remote repository.\n                      We are going to set up the method that is commonly used by many different services to authenticate access on the command line. This method is called Secure Shell Protocol (SSH). SSH is a cryptographic network protocol that allows secure communication between computers using an otherwise insecure network.\n                      SSH uses what is called a key pair. This is two keys that work together to validate access. One key is publicly known and called the public key, and the other key called the private key is kept private. Very descriptive names.\n                      You can think of the public key as a padlock, and only you have the key (the private key) to open it. You use the public key where you want a secure method of communication, such as your GitHub account. You give this padlock, or public key, to GitHub and say “lock the communications to my account with this so that only computers that have my private key can unlock communications and send git commands as my GitHub account.”\n                      What we will do now is the minimum required to set up the SSH keys and add the public key to a GitHub account. The first thing we are going to do is check if this has already been done on the computer you’re on. Because generally speaking, this setup only needs to happen once and then you can forget about it.\n                      \n                      \n                      \n                      \n                      \n                      \n                      Keeping your keys secure\n                      \n                      \n                      \n                      You shouldn’t really forget about your SSH keys, since they keep your account secure. It’s good practice to audit your secure shell keys every so often. Especially if you are using multiple computers to access your account.\n                      \n                      \n                      We will run the list command to check what key pairs already exist on your computer.\n                      ls -al ~/.ssh\n                      Your output is going to look a little different depending on whether or not SSH has ever been set up on the computer you are using.\n                      If you have not set up SSH on your computer, you will see\n                      ls: cannot access '~/.ssh': No such file or directory\n                      If SSH has been set up on the computer you’re using, the public and private key pairs will be listed. The file names are either id_ed25519/id_ed25519.pub or id_rsa/id_rsa.pub depending on how the key pairs were set up.\n                      \n                      3.1 Create an SSH key pair\n                      To create an SSH key pair use the following command, where the -t option specifies which type of algorithm to use:\n                      $ ssh-keygen -t ed25519 -C \"e.ormerod@mo-weather.uk\"\n                      The -C flag attaches a comment to the key. The comment has no effect on your key, you may place anything here to help you remember what the key is for. It makes no difference whether you use a public email or your no-reply private GitHub email in the comment.\n                      If you are using a legacy system that doesn’t support the Ed25519 algorithm, use: $ ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"\n                      Generating public/private ed25519 key pair.\nEnter file in which to save the key (~/.ssh/id_ed25519):\n                      We want to store our key in the file ~/.ssh/id_ed25519_github.\n                      Created directory '~/.ssh'.\nEnter passphrase (empty for no passphrase):\n                      Now you will be prompted for a passphrase. If the computer you work on is shared between multiple users you should set a passphrase. Be sure to use something memorable or save your passphrase somewhere, as there is no “reset my password” option. If you do not share your computer there is no need to set a passphrase so just press Enter.\n                      Note that, when typing a passphrase on a terminal, there won’t be any visual feedback of your typing. This is normal: your passphrase will be recorded even if you see nothing changing on your screen.\n                      Enter same passphrase again:\n                      After entering the same passphrase a second time, we receive the confirmation\n                      Your identification has been saved in ~/.ssh/id_ed25519_github\nYour public key has been saved in ~/.ssh/id_ed25519_github.pub\nThe key fingerprint is:\nSHA256:SMSPIStNyA00KPxuYu94KpZgRAYjgt9g4BA4kFy3g1o e.ormerod@mo-weather.uk\nThe key's randomart image is:\n+--[ED25519 256]--+\n|^B== o.          |\n|%*=.*.+          |\n|+=.E =.+         |\n| .=.+.o..        |\n|....  . S        |\n|.+ o             |\n|+ =              |\n|.o.o             |\n|oo+.             |\n+----[SHA256]-----+\n                      The “identification” is actually the private key. You should never share it. The public key is appropriately named. The “key fingerprint” is a shorter version of a public key.\n                      Now that we have generated the SSH keys, we will find the SSH files when we check.\n                      ls -al ~/.ssh\n                      drwxr-xr-x 1 Eleanor   197121   0 Jul 16 14:48 ./\ndrwxr-xr-x 1 Eleanor   197121   0 Jul 16 14:48 ../\n-rw-r--r-- 1 Eleanor   197121 419 Jul 16 14:48 id_ed25519_github\n-rw-r--r-- 1 Eleanor   197121 106 Jul 16 14:48 id_ed25519_github.pub\n                      \n                      \n                      3.2 Copy the public key to GitHub\n                      Now we have a SSH key pair and we can run this command to check if GitHub can read our authentication.\n                      ssh -T git@github.com\n                      The authenticity of host 'github.com (192.30.255.112)' can't be established.\nRSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.\nThis key is not known by any other names\nAre you sure you want to continue connecting (yes/no/[fingerprint])? y\nPlease type 'yes', 'no' or the fingerprint: yes\nWarning: Permanently added 'github.com' (RSA) to the list of known hosts.\ngit@github.com: Permission denied (publickey).\n                      Right, we forgot that we need to give GitHub our public key!\n                      \n                      \n                      \n                        \n                        \n                        Checking the GitHub RSA Key\n                        \n                      \n                      \n                      \n                      Ideally before connecting to a new host, like github.com in the output above, you would check the RSA key fingerprint matches the expected value. GitHub publishes their public SSH key fingerprints for you to check against.\n                      \n                      \n                      \n                      \n                      First, we need to copy the public key. Be sure to include the .pub at the end, otherwise you’re looking at the private key.\n                      cat ~/.ssh/id_ed25519_github.pub\n                      ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIDmRA3d51X0uu9wXek559gfn6UFNF69yZjChyBIU2qKI e.ormerod@mo-weather.uk\n                      Now, going to GitHub.com, click on your profile icon in the top right corner to get the drop-down menu. Click “Settings”, then on the settings page, click “SSH and GPG keys”, on the left side “Access” menu. Click the “New SSH key” button on the right side. Now, you can add the title (normally an ID for the computer storing the keys such as “Work Linux”), paste your SSH key into the field, and click the “Add SSH key” to complete the setup.\n                      \n                      \n                      \n                      \n                      \n                      \n                      Single sign-on (SSO)\n                      \n                      \n                      \n                      If you are part of an organisation that requires single sign-on (SSO) to access their GitHub organisation you will need to authorise the key for use in the organisation.\n                      Next to the newly created SSH key in the GitHub settings click on “Configure SSO”. Find the organisation in the list and click on “Authorise”.\n                      \n                      \n                      Now that we’ve set that up, let’s check our authentication again from the command line.\n                      $ ssh -T git@github.com\n                      Hi Eleanor! You've successfully authenticated, but GitHub does not provide shell access.\n                      Good! This output confirms that the SSH key works as intended. We are now ready to push our work to the remote repository.\n                      \n                      \n                      \n                        \n                        \n                        Troubleshooting SSH Setup\n                        \n                      \n                      \n                      \n                      If your new key failed to connect you may need to alter your ssh config.\n                      \n                      Create the ~/.ssh/config file if it doesn’t exist\n                      Add the following to the file:\n                      \n                      Host github.com\n  IdentityFile ~/.ssh/id_ed25519_github\n                      This explicitly states which key to use for github.com and is needed if you have many SSH keys already for other hosts."
  },
  {
    "objectID": "episodes/aio.html#push-local-changes-to-a-remote",
    "href": "episodes/aio.html#push-local-changes-to-a-remote",
    "title": "Version Control with Git",
    "section": "4. Push local changes to a remote",
    "text": "4. Push local changes to a remote\n                      Now that authentication is setup, we can return to the local repository. Ensure you are on the main branch:\n                      $ git switch main\n                      This command will push our main branch on our local repository to the repository on GitHub:\n                      $ git push\n                      fatal: The current branch main has no upstream branch.\nTo push the current branch and set the remote as upstream, use\n\n    git push --set-upstream origin main\n\n                      Git is telling us it doesn’t know what branch we want to push our local main branch to on GitHub. We can tell Git this by setting the upstream origin branch to also be named main.\n                      If you entered a passphrase when creating an shh key you will be prompted for it.\n                      Enumerating objects: 16, done.\nCounting objects: 100% (16/16), done.\nDelta compression using up to 4 threads\nCompressing objects: 100% (13/13), done.\nWriting objects: 100% (16/16), 1.69 KiB | 216.00 KiB/s, done.\nTotal 16 (delta 1), reused 0 (delta 0), pack-reused 0\nremote: Resolving deltas: 100% (1/1), done.\nTo github.com:mo-eormerod/weather.git\n * [new branch]      main -&gt; main\nbranch 'main' set up to track 'origin/main'.\n                      \n                      \n                      \n                      \n                      \n                      \n                      Automatically set the upstream branch\n                      \n                      \n                      \n                      You can get git to automatically set the upstream branch. This avoids having to run git push with the --set-upstream flag the first time you push from a new branch.\n                      Change your git config using:\n                      $ git config --global push.autoSetupRemote true\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Proxy\n                      \n                      \n                      \n                      If the network you are connected to uses a proxy, there is a chance that your last command failed with “Could not resolve hostname” as the error message. To solve this issue, you need to tell Git about the proxy:\n                      $ git config --global http.proxy http://user:password@proxy.url\n$ git config --global https.proxy https://user:password@proxy.url\n                      When you connect to another network that doesn’t use a proxy, you will need to tell Git to disable the proxy using:\n                      $ git config --global --unset http.proxy\n$ git config --global --unset https.proxy\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Password Managers\n                      \n                      \n                      \n                      If your operating system has a password manager configured, git push will try to use it when it needs your username and password. For example, this is the default behavior for Git Bash on Windows. If you want to type your username and password at the terminal instead of using a password manager, type:\n                      $ unset SSH_ASKPASS\n                      in the terminal, before you run git push. Despite the name, Git uses SSH_ASKPASS for all credential entry, so you may want to unset SSH_ASKPASS whether you are using Git via SSH or https.\n                      You may also want to add unset SSH_ASKPASS at the end of your ~/.bashrc to make Git default to using the terminal for usernames and passwords.\n                      \n                      \n                      Our local and remote repositories are now in this state:\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      The ‘-u’ Flag\n                      \n                      \n                      \n                      You may see a -u option used with git push in some documentation. This option is synonymous with the --set-upstream-to option for the git branch command, and is used to associate the current branch with a remote branch so that the git push command can be used without any arguments. To do this, simply use git push -u origin main once the remote has been set up.\n                      Here, we are telling Git to push the branch to the origin (GitHub) repositories main branch.\n                      \n                      \n                      We can pull changes from the remote repository to the local one as well:\n                      $ git pull\n                      Already up-to-date.\n                      Pulling has no effect in this case because the two repositories are already synchronized. If someone else had pushed some changes to the repository on GitHub, though, this command would download them to our local repository.\n                      \n                      \n                      \n                      \n                      \n                      GitHub GUI\n                      \n                      Browse to your weather repository on GitHub. Under the Code tab, find and click on the text that says “XX commits” (where “XX” is some number). Hover over, and click on, the three buttons to the right of each commit. What information can you gather/explore from these buttons? How would you get that same information in the shell?\n                      \n                      Solution (Solution). The left-most button (with the picture of a clipboard) copies the full identifier of the commit to the clipboard. In the shell, git log will show you the full commit identifier for each commit.\n                      When you click on the middle button, you’ll see all of the changes that were made in that particular commit. Green shaded lines indicate additions and red ones removals. In the shell we can do the same thing with git diff. In particular, git diff ID1..ID2 where ID1 and ID2 are commit identifiers (e.g. git diff a3bf1e5..041e637) will show the differences between those two commits.\n                      The right-most button lets you view all of the files in the repository at the time of that commit. To do this in the shell, we’d need to checkout the repository at that particular time. We can do this with git checkout ID where ID is the identifier of the commit we want to look at. If we do this, we need to remember to put the repository back to the right state afterwards!\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Uploading files directly in GitHub browser\n                      \n                      \n                      \n                      Github also allows you to skip the command line and upload files directly to your repository without having to leave the browser. There are two options. First you can click the “Upload files” button in the toolbar at the top of the file tree. Or, you can drag and drop files from your desktop onto the file tree. You can read more about this on this GitHub page.\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      GitHub Timestamp\n                      \n                      Create a remote repository on GitHub. Push the contents of your local repository to the remote. Make changes to your local repository and push these changes. Go to the repo you just created on GitHub and check the timestamps of the files. How does GitHub record times, and why?\n                      \n                      Solution (Solution). GitHub displays timestamps in a human readable relative format (i.e. “22 hours ago” or “three weeks ago”). However, if you hover over the timestamp, you can see the exact time at which the last change to the file occurred.\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Push vs. Commit\n                      \n                      In this episode, we introduced the “git push” command. How is “git push” different from “git commit”?\n                      \n                      Solution (Solution). When we push changes, we’re interacting with a remote repository to update it with the changes we’ve made locally (often this corresponds to sharing the changes we’ve made with others). Commit only updates your local repository.\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      GitHub License and README files\n                      \n                      In this episode we learned about creating a remote repository on GitHub, but when you initialized your GitHub repo, you didn’t add a README.md or a license file. If you had, what do you think would have happened when you tried to link your local and remote repositories?\n                      \n                      Solution (Solution). In this case, we’d see a merge conflict due to unrelated histories. When GitHub creates a README.md file, it performs a commit in the remote repository. When you try to pull the remote repository to your local repository, Git detects that they have histories that do not share a common origin and refuses to merge.\n                      $ git pull origin main\n                      warning: no common commits\nremote: Enumerating objects: 3, done.\nremote: Counting objects: 100% (3/3), done.\nremote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0\nUnpacking objects: 100% (3/3), done.\nFrom https://github.com/mo-eormerod/weather\n * branch            main     -&gt; FETCH_HEAD\n * [new branch]      main     -&gt; origin/main\nfatal: refusing to merge unrelated histories\n                      You can force git to merge the two repositories with the option --allow-unrelated-histories. Be careful when you use this option and carefully examine the contents of local and remote repositories before merging.\n                      $ git pull --allow-unrelated-histories origin main\n                      From https://github.com/mo-eormerod/weather\n * branch            main     -&gt; FETCH_HEAD\nMerge made by the 'recursive' strategy.\nREADME.md | 1 +\n1 file changed, 1 insertion(+)\ncreate mode 100644 README.md\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Keypoints\n                      \n                      \n                      A local Git repository can be connected to one or more remote repositories.\n                      Use the SSH protocol to connect to remote repositories.\n                      git push copies changes from a local repository to a remote repository.\n                      git pull copies changes from a remote repository to a local repository.\n                      \n                      \n                      \n                      \n                      \n                      Overview\n                      \n                      \n                      \n                      \n                      Questions\n                      \n                      How do I share my changes with others on the web?\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Objectives\n                      \n                      Navigate around the GitHub interface.\n                      \n                      \n                      \n                      \n                      \n                      \n                      GitHub has a lot of features so we’ll take some time to learn how to navigate the interface. Your instructor will guide you through navigating each section.\n                      \n                      This is the GitHub homepage. On the left you can quickly navigate to a repository or use the green New button to create a new repository. If you are in an organisation that requires single sign on to see organisational repositories you will be prompted with a large green button at the top of this page to sign in.\n                      To access your settings click on your round profile icon in the top right hand corner and select the Settings option.\n                      \n                      1 Exploring the interface for a repository\n                      The following image shows an example repository. In fact it is the repository containing the material for this lesson. Link to the git-novice repository.\n                      \n                      Let’s break it down into parts:\n                      \n                      When you navigate to a repository the top nav will display the organisation the repository belongs to, swcarpentry, and the name of the repository, git-novice, in the top left. In the top right you have access to GitHubs powerful search, buttons to open Issues and Pull requests (which will be explained later), and the notifications and profile icon on the far right.\n                      \n                      This next section displays tabs to navigate around your repository and various buttons which allow you to watch for changes to a repository and star a project. Starring a repo makes it easier to find from your homepage and helps repository owners gauge usage of their code.\n                      \n                      This section displays the code contained on the default branch, in this case main. It also displays useful stats about the repository on the right. The green &lt;&gt; Code button lets you check out a local copy of the repository.\n                      \n                      \n                      \n                      \n                      \n                      Keypoints\n                      \n                      \n                      Quickly navigate to a repository in your browser using the url pattern: https://github.com/&lt;username or organisation&gt;/&lt;repo name&gt;\n                      \n                      \n                      \n                      \n                      \n                      Overview\n                      \n                      \n                      \n                      \n                      Questions\n                      \n                      How do I search a repository?\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Objectives\n                      \n                      Recognise and use Git commit unique identifers (SHAs).\n                      Compare various versions of tracked files."
  },
  {
    "objectID": "episodes/aio.html#viewing-the-history-of-a-repository-on-github",
    "href": "episodes/aio.html#viewing-the-history-of-a-repository-on-github",
    "title": "Version Control with Git",
    "section": "Viewing the History of a Repository on GitHub",
    "text": "Viewing the History of a Repository on GitHub\n                      In an earlier episode, we used git log on the command line in our local repository to show the commits to our branch.\n                      We can also see the commits to our branch on GitHub. But first we need to push our local branch to GitHub.\n                      Make sure you are on the forecast branch:\n                      $ git switch forecast\n                      Now we can push our local branch to GitHub:\n                      $ git push\n                      Navigate to your weather GitHub repo:\n                      \n                      Select the forecast branch from the branch drop down box labelled main:\n                      \n                      Click on Commits:\n                      \n                      This commits page shows all the commits on your branch:\n                      \n                      The Git commit unique identifiers (SHAs) here on GitHub match with those shown after running git log on the command line in your local branch."
  },
  {
    "objectID": "episodes/aio.html#viewing-differences-between-commits",
    "href": "episodes/aio.html#viewing-differences-between-commits",
    "title": "Version Control with Git",
    "section": "Viewing Differences Between Commits",
    "text": "Viewing Differences Between Commits\n                      In an earlier episode, we used git diff on the command line in our local repository to show the differences between two commits on our branch.\n                      We can also see these differences on GitHub.\n                      In a new tab, navigate to your weather GitHub repo then add compare to the end of the URL. The URL should follow https://github.com/&lt;your-user-name&gt;/weather/compare:\n                      \n                      Select one of the Git commit SHAs from the Commits page and add it to the first drop down box labelled base: main.\n                      Then select a second Git commit SHA from the Commits page and add it to the second drop down box labelled compare: main.\n                      The resulting page will show the differences between the two Git commit SHAs:\n                      `\n                      \n                      \n                      \n                      \n                      \n                      Keypoints\n                      \n                      \n                      The Commits page displays the history for the specified branch.\n                      Adding compare to the end of the repository URL displays differences between commits.\n                      \n                      \n                      \n                      \n                      \n                      Overview\n                      \n                      \n                      \n                      \n                      Questions\n                      \n                      How can I identify old versions of files on GitHub?\n                      How do I review my changes on GitHub?\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Objectives\n                      \n                      Make a pull request and describe what they are useful for\n                      \n                      \n                      \n                      \n                      \n                      \n                      Pull requests are a great way to collaborate with others using GitHub. Instead of making changes directly to a repository you can suggest changes to a repository using a pull request.\n                      Pull requests are where your changes go through the vital steps of code and science review. Some of these code and science checks can be completely automated using pull requests (PRs). This helps speed up the review process and reduce the chance of human error when checking new code."
  },
  {
    "objectID": "episodes/aio.html#creating-a-pull-request",
    "href": "episodes/aio.html#creating-a-pull-request",
    "title": "Version Control with Git",
    "section": "Creating a Pull Request",
    "text": "Creating a Pull Request\n                      In the previous episodes we developed our changes on the forecast branch. Let’s use a PR to merge these changes back into the main branch.\n                      Navigate to your weather GitHub repo. You should see a notification appear with the text forecast had recent pushes.\n                      \n                      Click on the green Compare & pull request button.\n                      \n                      This page lets us create a new pull request from the forecast branch. The title has been autofilled with the message of the last commit. You can see all the commits on the branch at the bottom of this page.\n                      Make sure the title and description are clear. Then press the green Create pull request button.\n                      \n                      \n                      \n                      \n                      \n                      \n                      Draft Pull Requests\n                      \n                      \n                      \n                      If your changes are not ready for review yet you can mark the pull request as a draft:\n                      \n                      Draft pull requests can’t be merged and code reviewers aren’t automatically assigned.\n                      \n                      \n                      \n                      Notice we’ve now moved to the Pull Requests tab. This is PR #1 and underneath the title we see:\n                      \n                      wants to merge 4 commits into main from forecast\n                      \n                      If you need to change the title or the branch you’re merging into, in this case main, click on the edit button to the far right of the title.\n                      The PR has four tabs below the title section:\n                      \n                      Conversation is where code and science reviews occur\n                      Commits shows all the commits we want to merge\n                      Checks shows the output from any automated code and science checks\n                      Files Changed shows a diff (difference) between the branch with your changes, forecast, and the target branch, main.\n                      \n                      At this point you should use the diff in the Files changed tab to check your changes."
  },
  {
    "objectID": "episodes/aio.html#rulesets",
    "href": "episodes/aio.html#rulesets",
    "title": "Version Control with Git",
    "section": "Rulesets",
    "text": "Rulesets\n                      GitHub Rulesets control how people can interact with your repository.\n                      When we opened our first PR we were prompted to Require approval from specific reviewers before merging. Click on the Add rule button.\n                      This page lets us create a rule preventing anyone from committing directly into the main branch. All repositories should have some form of protection using these rulesets. To add a rule to protect the main branch:\n                      \n                      Enter the Ruleset Name main\n                      Change the Enforcement status to Active\n                      Scroll down to Target branches. Click Add target and select Default branch (which in our weather repo is main).\n                      Scroll down to Rules. Tick the Require a pull request before merging option.\n                      At the bottom of the page click the green Create button.\n                      \n                      Now even if you commit to main locally you will not be able to push those changes to GitHub. To add changes you MUST open a PR and go through code and science review.\n                      \n                      \n                      \n                        \n                        \n                        Screenshot of the Rule Protecting Main\n                        \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Private Personal Repos\n                      Rulesets cannot be created on private repos in your personal space unless you have a paid GitHub plan."
  },
  {
    "objectID": "episodes/aio.html#merging-a-pull-request",
    "href": "episodes/aio.html#merging-a-pull-request",
    "title": "Version Control with Git",
    "section": "Merging a Pull Request",
    "text": "Merging a Pull Request\n                      Navigate back to your PR. To merge the PR click on the dropdown, and select Squash and merge. Squashing before merging will combine all the commits on your branch and ‘squash’ them into a single new commit on the target branch, in this case main. This helps keep the commit history of the main branch tidy and linear2.\n                      \n                      Once you’ve selected the squash option click on the green Squash and merge button. Edit the commit title so that the PR number is at the start of the message. For instance:\n                      Add in a forecast file (#1)\n                      Would be changed to:\n                      #1 Add in a forecast file\n                      This makes it easier to navigate to the PR for a change when you’re on the GitHub repositories code view. Change the description if necessary. Then click on Confirm squash and merge.\n                      \n                      The PR is now successfully merged into the main branch. We can safely delete the forecast branch from the GitHub repo. Click on the Delete branch button."
  },
  {
    "objectID": "episodes/aio.html#updating-your-local-repo",
    "href": "episodes/aio.html#updating-your-local-repo",
    "title": "Version Control with Git",
    "section": "Updating your Local Repo",
    "text": "Updating your Local Repo\n                      The new forecast.md file is currently only on the main branch in GitHub. We should pull the changes down to our local copy. Switch to the main branch:\n                      $ git switch main\n                      Pull down the changes from GitHub:\n                      $ git pull\n                      remote: Enumerating objects: 4, done.\nremote: Counting objects: 100% (4/4), done.\nremote: Compressing objects: 100% (2/2), done.\nremote: Total 3 (delta 1), reused 2 (delta 1), pack-reused 0 (from 0)\nUnpacking objects: 100% (3/3), 1.01 KiB | 173.00 KiB/s, done.\nFrom github.com:mo-eormerod/weather\n   41c775b..49c845c  main       -&gt; origin/main\nUpdating 41c775b..49c845c\nFast-forward\n .gitignore  | 2 ++\n forecast.md | 9 +++++++++\n 2 files changed, 11 insertions(+)\n create mode 100644 .gitignore\n create mode 100644 forecast.md\n                      git pull and GitHub’s Pull Requests are not the same. GitHub Pull Requests are where we performed code and science review, then merged our feature branch changes into the main branch. git pull is fetching changes to the remote branch on GitHub and merging them into your local copy.\n                      \n                      \n                      \n                      \n                      \n                      \n                      You may need to tell Git what to do\n                      \n                      \n                      \n                      If you see the below in your output, Git is asking what it should do.\n                      hint: You have divergent branches and need to specify how to reconcile them.\nhint: You can do so by running one of the following commands sometime before\nhint: your next pull:\nhint:\nhint:   git config pull.rebase false  # merge (the default strategy)\nhint:   git config pull.rebase true   # rebase\nhint:   git config pull.ff only       # fast-forward only\nhint:\nhint: You can replace \"git config\" with \"git config --global\" to set a default\nhint: preference for all repositories. You can also pass --rebase, --no-rebase,\nhint: or --ff-only on the command line to override the configured default per\nhint: invocation.\n                      In newer versions of Git it gives you the option of specifying different behaviours when a pull would merge divergent branches. The Git & GitHub Working Practices training will help you decide which option is best for your teams repositories. For now we will use the fast-forward only strategy. To use this strategy run the following command to select it as the default thing Git should do.\n                      $ git config pull.ff only\n                      Then attempt the pull again.\n                      $ git pull\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      How do I know there are Changes to Pull?\n                      \n                      \n                      \n                      git pull actually runs two commands:\n                      $ git fetch\n$ git merge\n                      The git fetch command fetches any changes on the GitHub remote. Then git merge merges those changes into your local branch.\n                      If you’re not sure if there are changes to pull; or you’re not sure you want to merge the changes right away run git fetch and examine the output before running git pull.\n                      Example git fetch output showing changes on the remote main branch being fetched:\n                      remote: Enumerating objects: 4, done.\nremote: Counting objects: 100% (4/4), done.\nremote: Compressing objects: 100% (2/2), done.\nremote: Total 3 (delta 1), reused 2 (delta 1), pack-reused 0 (from 0)\nUnpacking objects: 100% (3/3), 1010 bytes | 144.00 KiB/s, done.\nFrom github.com:mo-ormerod/weather\n   49c845c..e4bdab8  main       -&gt; origin/main\n                      \n                      \n                      \n                      Cleaning up your Local Branches\n                      We deleted our forecast dev branch from GitHub but we still have a local copy. Let’s tidy up by deleting it. To see all our branches including remote GitHub branches run:\n                      $ git branch -avv\n                        forecast                13e0329 [origin/forecast] Ignore png files and the data folder\n* main                    d1da035 [origin/main] #1 Add in a forecast file\n  remotes/origin/forecast 13e0329 Ignore png files and the data folder\n  remotes/origin/main     d1da035 #1 Add in a forecast file\n                      The first two branches are our local branches, the last two are the GitHub remotes. To remove references to remote branches that have been deleted on GitHub run:\n                      $ git remote prune origin\n                      Pruning origin\nURL: git@github.com:mo-eormerod/weather.git\n * [pruned] origin/forecast\n                      Running git branch -avv again now shows:\n                        forecast            13e0329 [origin/forecast: gone] Ignore png files and the data folder\n* main                d1da035 [origin/main] #1 Add in a forecast file\n  remotes/origin/main d1da035 #1 Add in a forecast file\n                      You can see the remote reference for the forecast branch has been removed. The second line with the local forecast branch now has gone in the brackets referencing the remote branch.\n                      To delete our local branch run:\n                      $ git branch -D forecast\n                      Running git branch -avv again now shows:\n                      * main                d1da035 [origin/main] #1 Add in a forecast file\n  remotes/origin/main d1da035 #1 Add in a forecast file\n                      You’ve now successfully merged and tidied up after your first pull request. Remember when making changes create a new branch and open a PR, NEVER commit to the main branch.\n                      \n                      \n                      \n                      \n                      \n                      \n                      Automatically Prune Deleted Remote Branches\n                      \n                      \n                      \n                      If you set the following Git configuration:\n                      $ git config --global fetch.prune true\n                      Git will automatically prune the links to remote branches that were deleted on GitHub when you run git fetch or git pull.\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Adding in a seasonal-forecast.md file\n                      \n                      Try adding in a seasonal forecast using the following steps:\n                      \n                      Create a new branch with an appropriate name and switch to it\n                      Create the seasonal-forecast.md file\n                      Add and commit the new file\n                      Push the changes to GitHub\n                      Open a PR on GitHub\n                      Merge the PR, delete the branch on GitHub\n                      Pull down the changes to your local copy\n                      Tidy up your branches\n                      \n                      \n                      Solution. \n                      \n                      Create a new branch with an appropriate name and switch to it\n                      \n                      $ git switch -c add-seasonal-forecast\n                      Switched to a new branch 'add-seasonal-forecast'\n                      \n                      Create the seasonal-forecast.md file\n                      \n                      $ nano seasonal-forecast.md\n$ cat seasonal-forecast.md\n                      # Seasonal Forecast\n\n- Winter is wet\n- Summer is hot\n                      \n                      Add and commit the new file\n                      \n                      $ git add seasonal-forecast.md\n$ git commit -m \"Add in a seasonal-forecast.md file\"\n                      [add-seasonal-forecast aeaf804] Add in a seasonal-forecast.md file\n 1 file changed, 4 insertions(+)\n create mode 100644 seasonal-forecast.md\n                      \n                      Push the changes to GitHub\n                      \n                      $ git push\n                      Enumerating objects: 4, done.\nCounting objects: 100% (4/4), done.\nDelta compression using up to 4 threads\nCompressing objects: 100% (3/3), done.\nWriting objects: 100% (3/3), 326 bytes | 163.00 KiB/s, done.\nTotal 3 (delta 1), reused 0 (delta 0), pack-reused 0\nremote: Resolving deltas: 100% (1/1), completed with 1 local object.\nremote: \nremote: Create a pull request for 'add-seasonal-forecast' on GitHub by visiting:\nremote:      https://github.com/mo-ormerod/weather/pull/new/add-seasonal-forecast\nremote: \nTo github.com:mo-ormerod/weather.git\n * [new branch]      add-seasonal-forecast -&gt; add-seasonal-forecast\nbranch 'add-seasonal-forecast' set up to track 'origin/add-seasonal-forecast'.\n                      \n                      Open a PR as shown in this very episode!\n                      Merge the PR, delete the branch on GitHub\n                      Pull down the changes to your local copy\n                      \n                      Switch to main:\n                      $ git switch main\n                      If you want to check if there are changes to pull:\n                      $ git fetch\n                      remote: Enumerating objects: 4, done.\nremote: Counting objects: 100% (4/4), done.\nremote: Compressing objects: 100% (2/2), done.\nremote: Total 3 (delta 1), reused 2 (delta 1), pack-reused 0 (from 0)\nUnpacking objects: 100% (3/3), 1010 bytes | 144.00 KiB/s, done.\nFrom github.com:mo-ormerod/weather\n   49c845c..e4bdab8  main       -&gt; origin/main\n                      Then merge the changes:\n                      $ git pull\n                      Updating 49c845c..e4bdab8\nFast-forward\n seasonal-forecast.md | 4 +++\n 1 file changed, 4 insertions(+)\n create mode 100644 seasonal-forecast.md\n                      \n                      Tidy up your branches\n                      \n                      $ git remote prune origin\n                      Pruning origin\nURL: git@github.com:mo-ormerod/weather.git\n * [pruned] origin/add-seasonal-forecast\n                      $ git branch -D add-seasonal-forecast\n                      Deleted branch add-seasonal-forecast (was aeaf804).\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Keypoints\n                      \n                      \n                      A pull request (PR) is where your changes go through code and science review.\n                      PRs can contain automated checks to help speed up the review process and avoid human error.\n                      The PR will automatically create an easy to read diff (difference) of the changes for the review (in the Files changed tab).\n                      Squashing and merging takes all the commits in your PR and ‘squashes’ them into a single new commit on the target branch.\n                      git fetch fetches changes to the GitHub remote.\n                      git pull pulls and merges changes to the GitHub remote into your local copy.\n                      git branch -avv displays all your local branches including references to any remote branches.\n                      git remote prune origin removes references to remote branches that have been deleted on GitHub.\n                      \n                      \n                      \n                      \n                      \n                      Overview\n                      \n                      \n                      \n                      \n                      Questions\n                      \n                      What are pull requests for?\n                      How can I make a pull request?\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Objectives\n                      \n                      Configure your GitHub profile and settings.\n                      \n                      \n                      \n                      \n                      \n                      \n                      In this section we will look at configuring some optional GitHub settings on both a GitHub wide and repository level."
  },
  {
    "objectID": "episodes/aio.html#profile-settings",
    "href": "episodes/aio.html#profile-settings",
    "title": "Version Control with Git",
    "section": "Profile Settings",
    "text": "Profile Settings\n                      You access your profile settings by navigating to: https://github.com/settings/profile\n                      Working down the page:\n                      \n                      Set your preferred name. This helps collaborators find you on GitHub.\n                      Set a public email, this also helps collaborators find your profile. To keep your email address private click on email settings, then tick the Keep my email addresses private checkbox.\n                      Set your pronouns.\n                      If you have a professional website you can add a link to the URL section.\n                      If you have an ORCID you can link your GitHub profile to your ID.\n                      If you would like to display your organisational affiliation add @&lt;organisation-name&gt; to the Company section.\n                      \n                      You can also set a profile picture on this page. Click on the green Update profile button when you have finished making changes.\n                      \n                      You can also make profile changes directly from your profile by clicking on the Edit profile button."
  },
  {
    "objectID": "episodes/aio.html#configuring-notifications",
    "href": "episodes/aio.html#configuring-notifications",
    "title": "Version Control with Git",
    "section": "Configuring Notifications",
    "text": "Configuring Notifications\n                      To configure general notification settings navigate to: https://github.com/settings/notifications\n                      Here you can choose a default email for notifications, and set up Custom routing. Custom routing allows you to specify different emails for each organisation you are a member of.\n                      In the Subscriptions section you can decide whether to receive notifications via GitHub, email, or both.\n                      \n                      Repository Notifications\n                      You can customise notifications on a repository level. Since you created the weather repository you are automatically watching All Activity. Click on the Unwatch dropdown to change your notification settings.\n                      \n                      The same dropdown will display Watch on repositories that do not belong to you."
  },
  {
    "objectID": "episodes/aio.html#organisation-membership",
    "href": "episodes/aio.html#organisation-membership",
    "title": "Version Control with Git",
    "section": "Organisation Membership",
    "text": "Organisation Membership\n                      If you are a member of an organisation you can make your membership of the organisation public or private by navigating to: https://github.com/orgs/&lt;organisation-name&gt;/people\n                      Search for your name and click on the right hand dropdown to change your organisation visibility.\n                      \n                      The default visibility setting will depend on your organisation. If you set the visibility to public your membership will appear on your profile, https://github.com/&lt;your-username&gt;/, near the bottom left of the screen."
  },
  {
    "objectID": "episodes/aio.html#teams-membership",
    "href": "episodes/aio.html#teams-membership",
    "title": "Version Control with Git",
    "section": "Teams Membership",
    "text": "Teams Membership\n                      One across from the People settings are the Teams settings: https://github.com/orgs/&lt;organisation-name&gt;/teams. You can leave, request to join, or if you are an admin add members to your GitHub team here. Teams let you manage access to repositories for a group of people all at once. Some organisations restrict the creation of GitHub teams to central admins.\n                      \n                      \n                      \n                      \n                      \n                      Keypoints\n                      \n                      \n                      You access your GitHub profile settings by navigating to: https://github.com/settings/profile.\n                      To configure general GitHub notification settings navigate to: https://github.com/settings/notifications.\n                      Click on the Watch or Unwatch repository dropdown button to change notifications for specific repositories.\n                      \n                      \n                      \n                      \n                      This marks the end of the GitHub section and the workshop. Please remember to fill out your post-workshop feedback. This feedback is vital for us to keep improving the lesson for other learners."
  },
  {
    "objectID": "episodes/aio.html#where-to-next",
    "href": "episodes/aio.html#where-to-next",
    "title": "Version Control with Git",
    "section": "Where to next?",
    "text": "Where to next?\n                      The Git & GitHub Working Practices lesson teaches you how to work collaboratively with others using Git and GitHub. It explores more complex workflows and topics, building on from this lesson.\n                      There are also a number of optional episodes after this page which focus on open science and code which you can read in your own time.\n                      You can revisit this training anytime. Useful page links:\n                      \n                      Glossary\n                      Key Points\n                      Discussion page with extra information on some episodes\n                      FCM to Git cheat sheet\n                      Git cheatsheets\n                      \n                      You can keep your weather repositories around to practice with for as long as you like and when you are ready to delete them use the instructions at the end of this page."
  },
  {
    "objectID": "episodes/aio.html#summary-1",
    "href": "episodes/aio.html#summary-1",
    "title": "Version Control with Git",
    "section": "Summary",
    "text": "Summary\n                      You’ve now created a repository both locally on your computer and remotely on GitHub. You’ve developed changes on a feature branch, reviewed the changes on GitHub and merged them into main. The diagram below outlines the workflow you used during the course:\n                      \n                      A summary page outlining the steps we’ve taken to create a new repository locally and connect it to a GitHub remote can be found in the extra Quick Start Repository Guide."
  },
  {
    "objectID": "episodes/aio.html#deleting-a-repository",
    "href": "episodes/aio.html#deleting-a-repository",
    "title": "Version Control with Git",
    "section": "Deleting a Repository",
    "text": "Deleting a Repository\n                      Make sure you are certain you want to delete the repository. If you delete both the local and GitHub repositories you won’t be able to recover your files!\n                      \n                      Deleting a Local Repository\n                      $ cd ~/Desktop\n$ rm -rf weather\n                      \n                      \n                      Deleting a GitHub Repository\n                      \n                      Navigate to https://github.com/&lt;your-username&gt;/weather/settings\n                      Scroll down to the last setting in the Danger Zone\n                      Click on Delete this repository\n                      \n                      You will be asked to confirm twice that you understand the effects of deleting the repository. You will also be asked to type out &lt;your-username&gt;/weather to confirm the deletion and you may have to confirm the deletion using MFA or your passkey.\n                      \n                      Overview\n                      \n                      \n                      \n                      \n                      Questions\n                      \n                      How do I edit my GitHub profile?\n                      How do I change my notification preferences?\n                      How do I change my organisation membership visibility, and team memberships?\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Objectives\n                      \n                      Explain how a version control system can be leveraged as an electronic lab notebook for computational work.\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Check your Organisation’s Policy\n                      Your organisation most likely has policies governing their intellectual property. The guidelines below are general. You should consult your organisational policy on publishing and open source before making any decisions.\n                      \n                      \n                      The opposite of “open” isn’t “closed”. The opposite of “open” is “broken”.\n                      -– John Wilbanks\n                      \n                      Free sharing of information might be the ideal in science, but the reality is often more complicated. Normal practice today looks something like this:\n                      \n                      A scientist collects some data and stores it on a machine that is occasionally backed up by their department.\n                      They then write or modify a few small programs (which also reside on the machine) to analyze that data.\n                      Once they have some results, they write them up and submit a paper. The scientist might include their data – a growing number of journals require this – but they probably don’t include the code.\n                      Time passes.\n                      The journal sends the scientist reviews written anonymously by a handful of other people in their field. The scientist revises the paper to satisfy the reviewers, during which time they might also modify the scripts they wrote earlier, and resubmits.\n                      More time passes.\n                      The paper is eventually published. It might include a link to an online copy of the data, but the paper itself will be behind a paywall: only people who have personal or institutional access will be able to read it.\n                      \n                      For a growing number of scientists, though, the process looks like this:\n                      \n                      The data that the scientist collects is stored in an open access repository like figshare or Zenodo, possibly as soon as it’s collected, and given its own Digital Object Identifier (DOI). Or the data was already published and is stored in Dryad.\n                      The scientist creates a new repository on GitHub to hold their work.\n                      During analysis, they push changes to their scripts (and possibly some output files) to that repository. The scientist also uses the repository for their paper; that repository is then the hub for collaboration with colleagues.\n                      When they are happy with the state of the paper, the scientist posts a version to arXiv or some other preprint server to invite feedback from peers.\n                      Based on that feedback, they may post several revisions before finally submitting the paper to a journal.\n                      The published paper includes links to the preprint and to the code and data repositories, which makes it much easier for other scientists to use their work as starting point for their own research.\n                      \n                      This open model accelerates discovery: the more open work is, the more widely it is cited and re-used. However, people who want to work this way need to make some decisions about what exactly “open” means and how to do it. You can find more on the different aspects of Open Science in this book.\n                      This is one of the (many) reasons we teach version control. When used diligently, it answers the “how” question by acting as a shareable electronic lab notebook for computational work:\n                      \n                      The conceptual stages of your work are documented, including who did what and when. Every step is stamped with an identifier (the commit ID) that is for most intents and purposes unique.\n                      You can tie documentation of rationale, ideas, and other intellectual work directly to the changes that spring from them.\n                      You can refer to what you used in your research to obtain your computational results in a way that is unique and recoverable.\n                      With a version control system such as Git, the entire history of the repository is easy to archive for perpetuity.\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Making Code Citable\n                      \n                      \n                      \n                      Anything that is hosted in a version control repository (data, code, papers, etc.) can be turned into a citable object. You’ll learn how to do this in the later episode on Citation.\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      How Reproducible Is My Work?\n                      \n                      Ask one of your labmates to reproduce a result you recently obtained using only what they can find in your papers or on the web. Try to do the same for one of their results, then try to do it for a result from a lab you work with.\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      How to Find an Appropriate Data Repository?\n                      \n                      Surf the internet for a couple of minutes and check out the data repositories mentioned above: Figshare, Zenodo, Dryad. Depending on your field of research, you might find community-recognized repositories that are well-known in your field. You might also find useful these data repositories recommended by Nature. Discuss with your neighbor which data repository you might want to approach for your current project and explain why.\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      How to Track Large Data or Image Files using Git?\n                      \n                      Large data or image files such as .md5 or .psd file types can be tracked within a GitHub repository using the Git Large File Storage open source extension tool. This tool automatically uploads large file contents to a remote server and replaces the file with a text pointer within the GitHub repository.\n                      Try downloading and installing the Git Large File Storage extension tool, then add tracking of a large file to your GitHub repository. Ask a colleague to clone your repository and describe what they see when they access that large file.\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Keypoints\n                      \n                      \n                      Open scientific work is more useful and more highly cited than closed.\n                      \n                      \n                      \n                      \n                      \n                      Overview\n                      \n                      \n                      \n                      \n                      Questions\n                      \n                      How can version control help me make my work more open?\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Objectives\n                      \n                      Explain why adding licensing information to a repository is important.\n                      Choose a proper license.\n                      Explain differences in licensing and social expectations.\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Check your Organisation’s Policy\n                      Your organisation most likely has policies governing their intellectual property. The guidelines below are general. You should consult your organisational policy on licensing and open source before making any decisions.\n                      \n                      When a repository with source code, a manuscript or other creative works becomes public, it should include a file LICENSE or LICENSE.txt in the base directory of the repository that clearly states under which license the content is being made available. This is because creative works are automatically eligible for intellectual property (and thus copyright) protection. Reusing creative works without a license is dangerous, because the copyright holders could sue you for copyright infringement.\n                      A license solves this problem by granting rights to others (the licensees) that they would otherwise not have. What rights are being granted under which conditions differs, often only slightly, from one license to another. In practice, a few licenses are by far the most popular, and choosealicense.com will help you find a common license that suits your needs. Important considerations include:\n                      \n                      Whether you want to address patent rights.\n                      Whether you require people distributing derivative works to also distribute their source code.\n                      Whether the content you are licensing is source code.\n                      Whether you want to license the code at all.\n                      \n                      Choosing a license that is in common use makes life easier for contributors and users, because they are more likely to already be familiar with the license and don’t have to wade through a bunch of jargon to decide if they’re ok with it. The Open Source Initiative and Free Software Foundation both maintain lists of licenses which are good choices.\n                      This article provides an excellent overview of licensing and licensing options from the perspective of scientists who also write code.\n                      At the end of the day what matters is that there is a clear statement as to what the license is. Also, the license is best chosen from the get-go, even if for a repository that is not public. Pushing off the decision only makes it more complicated later, because each time a new collaborator starts contributing, they, too, hold copyright and will thus need to be asked for approval once a license is chosen.\n                      \n                      \n                      \n                      \n                      \n                      Can I Use Open License?\n                      \n                      Find out whether you are allowed to apply an open license to your software. Can you do this unilaterally, or do you need permission from someone in your institution? If so, who?\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      What licenses have I already accepted?\n                      \n                      Many of the software tools we use on a daily basis (including in this workshop) are released as open-source software. Pick a project on GitHub from the list below, or one of your own choosing. Find its license (usually in a file called LICENSE or COPYING) and talk about how it restricts your use of the software. Is it one of the licenses discussed in this session? How is it different?\n                      \n                      Git, the source-code management tool\n                      CPython, the standard implementation of the Python language\n                      Jupyter, the project behind the web-based Python notebooks we’ll be using\n                      EtherPad, a real-time collaborative editor\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Keypoints\n                      \n                      \n                      The LICENSE, LICENSE.md, or LICENSE.txt file is often used in a repository to indicate how the contents of the repo may be used by others.\n                      People who incorporate General Public License (GPL’d) software into their own software must make the derived software also open under the GPL license if they decide to share it; most other open licenses do not require this.\n                      The Creative Commons family of licenses allow people to mix and match requirements and restrictions on attribution, creation of derivative works, further sharing, and commercialization.\n                      People who are not lawyers should not try to write licenses from scratch.\n                      \n                      \n                      \n                      \n                      \n                      Overview\n                      \n                      \n                      \n                      \n                      Questions\n                      \n                      What licensing information should I include with my work?\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Objectives\n                      \n                      Make your work easy to cite\n                      \n                      \n                      \n                      \n                      \n                      \n                      You may want to include a file called CITATION or CITATION.txt that describes how to reference your project; the one for Software Carpentry states:\n                      To reference Software Carpentry in publications, please cite:\n\nGreg Wilson: \"Software Carpentry: Lessons Learned\". F1000Research,\n2016, 3:62 (doi: 10.12688/f1000research.3-62.v2).\n\n@online{wilson-software-carpentry-2016,\n  author      = {Greg Wilson},\n  title       = {Software Carpentry: Lessons Learned},\n  version     = {2},\n  date        = {2016-01-28},\n  url         = {http://f1000research.com/articles/3-62/v2},\n  doi         = {10.12688/f1000research.3-62.v2}\n}\n                      More detailed advice, and other ways to make your code citable can be found at the Software Sustainability Institute blog and in:\n                      Smith AM, Katz DS, Niemeyer KE, FORCE11 Software Citation Working Group. (2016) Software citation\nprinciples. [PeerJ Computer Science 2:e86](https://peerj.com/articles/cs-86/)\nhttps://doi.org/10.7717/peerj-cs.8\n                      There is also an @software{... BibTeX entry type in case no “umbrella” citation like a paper or book exists for the project you want to make citable.\n                      \n                      \n                      \n                      \n                      \n                      Keypoints\n                      \n                      \n                      Add a CITATION file to a repository to explain how you want your work cited.\n                      \n                      \n                      \n                      \n                      \n                      Overview\n                      \n                      \n                      \n                      \n                      Questions\n                      \n                      How can I make my work easier to cite?\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Objectives\n                      \n                      Explain different options for hosting scientific work.\n                      \n                      \n                      \n                      \n                      \n                      \n                      After choosing a license, another big question for groups that want to open up their work is where to host their code and data. One option is for the lab, the department, or the university to provide a server, manage accounts and backups, and so on. The main benefit of this is that it clarifies who owns what, which is particularly important if any of the material is sensitive (i.e., relates to experiments involving human subjects or may be used in a patent application). The main drawbacks are the cost of providing the service and its longevity: a scientist who has spent ten years collecting data would like to be sure that data will still be available ten years from now, but that’s well beyond the lifespan of most of the grants that fund academic infrastructure.\n                      Another option is to purchase a domain and pay an Internet service provider (ISP) to host it. This gives the individual or group more control, and sidesteps problems that can arise when moving from one institution to another, but requires more time and effort to set up than either the option above or the option below.\n                      The third option is to use a public hosting service like GitHub, GitLab, or BitBucket. Each of these services provides a web interface that enables people to create, view, and edit their code repositories. These services also provide communication and project management tools including issue tracking, wiki pages, email notifications, and code reviews. These services benefit from economies of scale and network effects: it’s easier to run one large service well than to run many smaller services to the same standard. It’s also easier for people to collaborate. Using a popular service can help connect your project with communities already using the same service.\n                      As an example, Software Carpentry is on GitHub where you can find the source for this page. Anyone with a GitHub account can suggest changes to this text.\n                      GitHub repositories can also be assigned DOIs, by connecting its releases to Zenodo. For example, 10.5281/zenodo.7908089 is the DOI that has been “minted” for this introduction to Git.\n                      Using large, well-established services can also help you quickly take advantage of powerful tools. One such tool, continuous integration (CI), can automatically run software builds and tests whenever code is committed or pull requests are submitted. Direct integration of CI with an online hosting service means this information is present in any pull request, and helps maintain code integrity and quality standards. While CI is still available in self-hosted situations, there is much less setup and maintenance involved with using an online service. Furthermore, such tools are often provided free of charge to open source projects, and are also available for private repositories for a fee.\n                      \n                      \n                      \n                      \n                      \n                      \n                      Institutional Barriers\n                      \n                      \n                      \n                      Sharing is the ideal for science, but many institutions place restrictions on sharing, for example to protect potentially patentable intellectual property. If you encounter such restrictions, it can be productive to inquire about the underlying motivations and either to request an exception for a specific project or domain, or to push more broadly for institutional reform to support more open science.\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Can My Work Be Public?\n                      \n                      Find out whether you are allowed to host your work openly in a public repository. Can you do this unilaterally, or do you need permission from someone in your institution? If so, who?\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Where Can I Share My Work?\n                      \n                      Does your institution have a repository or repositories that you can use to share your papers, data and software? How do institutional repositories differ from services like arXiV, figshare, GitHub or GitLab?\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Keypoints\n                      \n                      \n                      Projects can be hosted on university servers, on personal domains, or on a public hosting service.\n                      Rules regarding intellectual property and storage of sensitive information apply no matter where code and data are hosted.\n                      \n                      \n                      \n                      \n                      \n                      Overview\n                      \n                      \n                      \n                      \n                      Questions\n                      \n                      Where should I host my version control repositories?\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Objectives\n                      \n                      Understand how to use Git from RStudio.\n                      \n                      \n                      \n                      \n                      \n                      \n                      Version control can be very useful when developing data analysis scripts. For that reason, the popular development environment RStudio for the R programming language has built-in integration with Git. While some advanced Git features still require the command-line, RStudio has a nice interface for many common Git operations.\n                      RStudio allows us to create a project associated with a given directory to keep track of various related files. To be able to track the development of the project over time, to be able to revert to previous versions, and to collaborate with others, we version control the Rstudio project with Git. To get started using Git in RStudio, we create a new project:\n                      \n                      This opens a dialog asking us how we want to create the project. We have some options here. Let’s say that we want to use RStudio with the weather repository that we already made. Since that repository lives in a directory on our computer, we choose the option “Existing Directory”:\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Do You See a “Version Control” Option?\n                      \n                      \n                      \n                      Although we’re not going to use it here, there should be a “version control” option on this menu. That is what you would click on if you wanted to create a project on your computer by cloning a repository from GitHub. If that option is not present, it probably means that RStudio doesn’t know where your Git executable is, and you won’t be able to progress further in this lesson until you tell RStudio where it is.\n                      \n                      Find your Git Executable\n                      First let’s make sure that Git is installed on your computer. Open your shell on Mac or Linux, or on Windows open the command prompt and then type:\n                      \n                      which git (macOS, Linux)\n                      where git (Windows)\n                      \n                      If there is no version of Git on your computer, please follow the Git installation instructions in the setup of this lesson to install Git now. Next open your shell or command prompt and type which git (macOS, Linux), or where git (Windows). Copy the path to the Git executable.\n                      On one Windows computer which had GitHub Desktop installed on it, the path was: C:/Users/UserName/AppData/Local/GitHubDesktop/app-1.1.1/resources/app/git/cmd/git.exe\n                      NOTE: The path on your computer will be somewhat different.\n                      \n                      \n                      Tell RStudio where to find GitHub\n                      In RStudio, go to the Tools menu &gt; Global Options &gt; Git/SVN and then browse to the Git executable you found in the command prompt or shell. Now restart RStudio. Note: Even if you have Git installed, you may need to accept the Xcode license if you are using macOS.\n                      \n                      \n                      \n                      Next, RStudio will ask which existing directory we want to use. Click “Browse…” and navigate to the correct directory, then click “Create Project”:\n                      \n                      Ta-da! We have created a new project in RStudio within the existing weather repository. Notice the vertical “Git” menu in the menu bar. RStudio has recognized that the current directory is a Git repository, and gives us a number of tools to use Git:\n                      \n                      To edit the existing files in the repository, we can click on them in the “Files” panel on the lower right. Now let’s add some additional information about Hummus:\n                      \n                      Once we have saved our edited files, we can use RStudio to commit the changes by clicking on “Commit…” in the Git menu:\n                      \n                      This will open a dialogue where we can select which files to commit (by checking the appropriate boxes in the “Staged” column), and enter a commit message (in the upper right panel). The icons in the “Status” column indicate the current status of each file. Clicking on a file shows information about changes in the lower panel (using output of git diff). Once everything is the way we want it, we click “Commit”:\n                      \n                      The changes can be pushed by selecting “Push Branch” from the Git menu. There are also options to pull from the remote repository, and to view the commit history:\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Are the Push/Pull Commands Grayed Out?\n                      \n                      \n                      \n                      Grayed out Push/Pull commands generally mean that RStudio doesn’t know the location of your remote repository (e.g. on GitHub). To fix this, open a terminal to the repository and enter the command: git push -u origin main. Then restart RStudio.\n                      \n                      \n                      If we click on “History”, we can see a graphical version of what git log would tell us:\n                      \n                      RStudio creates a number of files that it uses to keep track of a project. We often don’t want to track these, in which case we add them to our .gitignore file:\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Tip: versioning disposable output\n                      \n                      \n                      \n                      Generally you do not want to version control disposable output (or read-only data). You should modify the .gitignore file to tell Git to ignore these files and directories.\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Challenge\n                      \n                      \n                      Create a new directory within your project called graphs.\n                      Modify the .gitignore so that the graphs directory is not version controlled.\n                      \n                      \n                      Solution (Solution to Challenge). This can be done in Rstudio:\n                      dir.create(\"./graphs\")\n                      Then open up the .gitignore file from the right-hand panel of Rstudio and add graphs/ to the list of files to ignore.\n                      \n                      \n                      \n                      \n                      There are many more features in the RStudio Git menu, but these should be enough to get you started!\n                      \n                      \n                      \n                      \n                      \n                      Keypoints\n                      \n                      \n                      Using RStudio’s Git integration allows you to version control a project over time."
  },
  {
    "objectID": "episodes/aio.html#footnotes",
    "href": "episodes/aio.html#footnotes",
    "title": "Version Control with Git",
    "section": "Footnotes",
    "text": "Footnotes\n                      \n                      \n                      References in Git are user friendly links to specific commits. For instance HEAD is a reference to the latest commit on a branch. Programs with regular releases might add reference tags such as v1.0 to a specific commit to mark a new release. These references can be used instead of a commit identifier such as e48heu0.↩︎\n                      Microsoft Azure Learning Squash Merge↩︎"
  },
  {
    "objectID": "episodes/key-points.html",
    "href": "episodes/key-points.html",
    "title": "Version Control with Git",
    "section": "",
    "text": "Skip to main content\n          \n            \n              \n                \n                                              \n            \n            \n              \n                \n                  \n                    \n                      \n                    \n                    \n                  \n                  \n                    \n                      \n                        \n                          \n                        \n                        Light\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Dark\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Auto\n                        \n                          \n                        \n                      \n                    \n                  \n                \n              \n              \n              \n                        \n                   Instructor View \n                \n                \n                  Learner View"
  },
  {
    "objectID": "episodes/key-points.html#automated-version-control",
    "href": "episodes/key-points.html#automated-version-control",
    "title": "Version Control with Git",
    "section": "Automated Version Control",
    "text": "Automated Version Control\n                      \n                      Version control is like an unlimited ‘undo’.\n                      Version control also allows many people to work in parallel."
  },
  {
    "objectID": "episodes/key-points.html#setting-up-git",
    "href": "episodes/key-points.html#setting-up-git",
    "title": "Version Control with Git",
    "section": "Setting Up Git",
    "text": "Setting Up Git\n                      \n                      Use git config with the --global option to configure a user name, email address, editor, and other preferences once per machine."
  },
  {
    "objectID": "episodes/key-points.html#creating-a-repository",
    "href": "episodes/key-points.html#creating-a-repository",
    "title": "Version Control with Git",
    "section": "Creating a Repository",
    "text": "Creating a Repository\n                      \n                      git init initializes a repository.\n                      Git stores all of its repository data in the .git directory."
  },
  {
    "objectID": "episodes/key-points.html#branches",
    "href": "episodes/key-points.html#branches",
    "title": "Version Control with Git",
    "section": "Branches",
    "text": "Branches\n                      \n                      git status shows you the branch you’re currently on.\n                      git switch -c &lt;branch-name&gt; creates a new branch and switches you to it. Make sure you know what branch you are branching from before using git switch without a start-point!\n                      git switch -c &lt;branch-name&gt; &lt;start-point&gt; lets you define the start-point to branch off, via another branch name, a commit ID, or a tag.\n                      git switch &lt;branch-name&gt; switches you to another branch that already exists.\n                      git branch -vv shows you all the branches in the repository.\n                      git branch -m &lt;old-branch-name&gt; &lt;new-branch-name&gt; renames branches.\n                      git branch -d &lt;branch-name&gt; deletes a branch. Use the -D flag instead of -d to force delete the branch."
  },
  {
    "objectID": "episodes/key-points.html#tracking-changes",
    "href": "episodes/key-points.html#tracking-changes",
    "title": "Version Control with Git",
    "section": "Tracking Changes",
    "text": "Tracking Changes\n                      \n                      git status shows the status of a repository.\n                      Files can be stored in a project’s working directory (which users see), the staging area (where the next commit is being built up) and the local repository (where commits are permanently recorded).\n                      git add puts files in the staging area.\n                      git commit saves the staged content as a new commit in the local repository.\n                      Write a commit message that accurately describes your changes."
  },
  {
    "objectID": "episodes/key-points.html#exploring-history",
    "href": "episodes/key-points.html#exploring-history",
    "title": "Version Control with Git",
    "section": "Exploring History",
    "text": "Exploring History\n                      \n                      git log displays the repositories history.\n                      git diff displays differences between commits.\n                      HEAD references the last commit.\n                      HEAD~1 references the commit before last."
  },
  {
    "objectID": "episodes/key-points.html#reverting-changes",
    "href": "episodes/key-points.html#reverting-changes",
    "title": "Version Control with Git",
    "section": "Reverting Changes",
    "text": "Reverting Changes\n                      \n                      git restore recovers old versions of files.\n                      git reset undoes staged changes.\n                      git revert reverses a commit."
  },
  {
    "objectID": "episodes/key-points.html#ignoring-things",
    "href": "episodes/key-points.html#ignoring-things",
    "title": "Version Control with Git",
    "section": "Ignoring Things",
    "text": "Ignoring Things\n                      \n                      The .gitignore file tells Git what files to ignore."
  },
  {
    "objectID": "episodes/key-points.html#break",
    "href": "episodes/key-points.html#break",
    "title": "Version Control with Git",
    "section": "Break",
    "text": "Break"
  },
  {
    "objectID": "episodes/key-points.html#remotes-in-github",
    "href": "episodes/key-points.html#remotes-in-github",
    "title": "Version Control with Git",
    "section": "Remotes in GitHub",
    "text": "Remotes in GitHub\n                      \n                      A local Git repository can be connected to one or more remote repositories.\n                      Use the SSH protocol to connect to remote repositories.\n                      git push copies changes from a local repository to a remote repository.\n                      git pull copies changes from a remote repository to a local repository."
  },
  {
    "objectID": "episodes/key-points.html#exploring-github",
    "href": "episodes/key-points.html#exploring-github",
    "title": "Version Control with Git",
    "section": "Exploring GitHub",
    "text": "Exploring GitHub\n                      \n                      Quickly navigate to a repository in your browser using the url pattern: https://github.com/&lt;username or organisation&gt;/&lt;repo name&gt;"
  },
  {
    "objectID": "episodes/key-points.html#exploring-history-on-github",
    "href": "episodes/key-points.html#exploring-history-on-github",
    "title": "Version Control with Git",
    "section": "Exploring History on GitHub",
    "text": "Exploring History on GitHub\n                      \n                      The Commits page displays the history for the specified branch.\n                      Adding compare to the end of the repository URL displays differences between commits."
  },
  {
    "objectID": "episodes/key-points.html#pull-requests",
    "href": "episodes/key-points.html#pull-requests",
    "title": "Version Control with Git",
    "section": "Pull Requests",
    "text": "Pull Requests\n                      \n                      A pull request (PR) is where your changes go through code and science review.\n                      PRs can contain automated checks to help speed up the review process and avoid human error.\n                      The PR will automatically create an easy to read diff (difference) of the changes for the review (in the Files changed tab).\n                      Squashing and merging takes all the commits in your PR and ‘squashes’ them into a single new commit on the target branch.\n                      git fetch fetches changes to the GitHub remote.\n                      git pull pulls and merges changes to the GitHub remote into your local copy.\n                      git branch -avv displays all your local branches including references to any remote branches.\n                      git remote prune origin removes references to remote branches that have been deleted on GitHub."
  },
  {
    "objectID": "episodes/key-points.html#configuring-github",
    "href": "episodes/key-points.html#configuring-github",
    "title": "Version Control with Git",
    "section": "Configuring GitHub",
    "text": "Configuring GitHub\n                      \n                      You access your GitHub profile settings by navigating to: https://github.com/settings/profile.\n                      To configure general GitHub notification settings navigate to: https://github.com/settings/notifications.\n                      Click on the Watch or Unwatch repository dropdown button to change notifications for specific repositories."
  },
  {
    "objectID": "episodes/key-points.html#end",
    "href": "episodes/key-points.html#end",
    "title": "Version Control with Git",
    "section": "End",
    "text": "End"
  },
  {
    "objectID": "episodes/key-points.html#open-science",
    "href": "episodes/key-points.html#open-science",
    "title": "Version Control with Git",
    "section": "Open Science",
    "text": "Open Science\n                      \n                      Open scientific work is more useful and more highly cited than closed."
  },
  {
    "objectID": "episodes/key-points.html#licensing",
    "href": "episodes/key-points.html#licensing",
    "title": "Version Control with Git",
    "section": "Licensing",
    "text": "Licensing\n                      \n                      The LICENSE, LICENSE.md, or LICENSE.txt file is often used in a repository to indicate how the contents of the repo may be used by others.\n                      People who incorporate General Public License (GPL’d) software into their own software must make the derived software also open under the GPL license if they decide to share it; most other open licenses do not require this.\n                      The Creative Commons family of licenses allow people to mix and match requirements and restrictions on attribution, creation of derivative works, further sharing, and commercialization.\n                      People who are not lawyers should not try to write licenses from scratch."
  },
  {
    "objectID": "episodes/key-points.html#citation",
    "href": "episodes/key-points.html#citation",
    "title": "Version Control with Git",
    "section": "Citation",
    "text": "Citation\n                      \n                      Add a CITATION file to a repository to explain how you want your work cited."
  },
  {
    "objectID": "episodes/key-points.html#hosting",
    "href": "episodes/key-points.html#hosting",
    "title": "Version Control with Git",
    "section": "Hosting",
    "text": "Hosting\n                      \n                      Projects can be hosted on university servers, on personal domains, or on a public hosting service.\n                      Rules regarding intellectual property and storage of sensitive information apply no matter where code and data are hosted."
  },
  {
    "objectID": "episodes/key-points.html#using-git-from-rstudio",
    "href": "episodes/key-points.html#using-git-from-rstudio",
    "title": "Version Control with Git",
    "section": "‘Using Git from RStudio’",
    "text": "‘Using Git from RStudio’\n                      \n                      Using RStudio’s Git integration allows you to version control a project over time."
  },
  {
    "objectID": "learners/fcm-git_cheat_sheet.html",
    "href": "learners/fcm-git_cheat_sheet.html",
    "title": "Version Control with Git",
    "section": "",
    "text": "Skip to main content\n          \n            \n              \n                \n                                              \n            \n            \n              \n                \n                  \n                    \n                      \n                    \n                    \n                  \n                  \n                    \n                      \n                        \n                          \n                        \n                        Light\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Dark\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Auto\n                        \n                          \n                        \n                      \n                    \n                  \n                \n              \n              \n              \n                        \n                   Instructor View \n                \n                \n                  Learner View"
  },
  {
    "objectID": "learners/fcm-git_cheat_sheet.html#fcm-vs-git",
    "href": "learners/fcm-git_cheat_sheet.html#fcm-vs-git",
    "title": "Version Control with Git",
    "section": "FCM vs Git",
    "text": "FCM vs Git\n                      If you are familiar with FCM then this cheat sheet is for you! Adapted from Tomek Trzeciak’s (Met Office) comparison page.\n                      \n                      fcm branch-create BRANCH_NAME (fcm bc)\n                      git checkout -b BRANCH_NAME\n                      This also switches you to the new branch.\n                      git checkout -m -b BRANCH_NAME\n                      Switches you to the new branch and also keeps local changes.\n                      \n                      \n                      fcm branch-create –switch BRANCH_NAME (fcm bc –switch)\n                      git checkout -b BRANCH_NAME main\n                      \n                      \n                      fcm branch-list (fcm bls)\n                      git branch\n                      \n                      \n                      fcm checkout BRANCH_URL WORKING_COPY_PATH\n                      git clone REPO_URL WORKING_COPY_PATH\ncd WORKING_COPY_PATH\ngit checkout BRANCH_NAME\n                      \n                      \n                      fcm switch BRANCH_NAME\n                      git checkout BRANCH_NAME\n                      or the newer command:\n                      git switch BRANCH_NAME\n                      \n                      \n                      fcm status\n                      git status\n                      \n                      \n                      fcm info\n                      git status\n                      \n                      \n                      fcm log\n                      git log\n                      \n                      \n                      fcm merge BRANCH_NAME\n                      git pull REPO BRANCH_NAME\n                      or:\n                      git fetch REPO\ngit merge REPO/BRANCH_NAME\n                      \n                      \n                      fcm conflicts\n                      git mergetool\n                      \n                      \n                      fcm resolve –accept=working FILE\n                      git add FILE\n                      \n                      \n                      fcm revert FILE\n                      git checkout -- FILE\n                      or the newer command:\n                      git restore FILE\n                      \n                      \n                      fcm commit\n                      git add FILE\ngit commit\ngit push\n                      \n                      \n                      fcm update\n                      git pull REPO BRANCH_NAME\n                      If BRANCH_NAME is not specified the default branch will be pulled.\n                      \n                      \n                      fcm branch-delete BRANCH_NAME (fcm brm BRANCH_NAME)\n                      git branch -d BRANCH_NAME"
  },
  {
    "objectID": "learners/repo-quick-start.html",
    "href": "learners/repo-quick-start.html",
    "title": "Version Control with Git",
    "section": "",
    "text": "Skip to main content\n          \n            \n              \n                \n                                              \n            \n            \n              \n                \n                  \n                    \n                      \n                    \n                    \n                  \n                  \n                    \n                      \n                        \n                          \n                        \n                        Light\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Dark\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Auto\n                        \n                          \n                        \n                      \n                    \n                  \n                \n              \n              \n              \n                        \n                   Instructor View \n                \n                \n                  Learner View"
  },
  {
    "objectID": "learners/repo-quick-start.html#github-first",
    "href": "learners/repo-quick-start.html#github-first",
    "title": "Version Control with Git",
    "section": "GitHub First",
    "text": "GitHub First\n                      This way you will create the GitHub repository first. Then you will clone the repository to get a local copy. Cloning and working in this way is covered in the Git & GitHub Working Practices lesson.\n                      \n                      Create the remote on GitHub\n                      To create a new repository on GitHub:\n                      \n                      Under the “+” menu in the top-right corner of any GitHub page, click New repository\n                      Choose an appropriate owner, name, and visibility\n                      \n                      Private: only you\n                      Internal (organisations only): read permissions to anyone in the organisation\n                      Public: read permissions to anyone\n                      \n                      Tick the box to initialise with a README file (unless creating a local repository first)\n                      \n                      \n                      \n                      Clone the GitHub remote\n                      $ git clone git@github.com:&lt;organisation&gt;/&lt;repository&gt;.git\n$ cd &lt;repository&gt;"
  },
  {
    "objectID": "learners/repo-quick-start.html#local-first",
    "href": "learners/repo-quick-start.html#local-first",
    "title": "Version Control with Git",
    "section": "Local First",
    "text": "Local First\n                      If you already have files you wish to version control this approach is best:\n                      \n                      Change into the directory containing files you want to version control\n                      Initialise the directory as a git repository\n                      \n                      $ git init\n                      \n                      Make an initial commit, where “Repository Name” is replaced with a suitable name for the repository\n                      \n                      $ echo \"# Repository Name\" &gt; README.md\n$ git add README.md\n$ git commit -m \"Initial commit\"\n                      \n                      Check if you are on the main branch with git status or your terminal prompt if you have Git Autocomplete setup. Rename the default branch from master to main (master is considered outdated terminology) if your current branch is master.\n                      \n                      $ git branch -M master main\n                      \n                      Create a new GitHub repository with no files.\n                      Set up links to the new GitHub repository\n                      \n                      git remote add origin git@github.com:&lt;organisation&gt;/&lt;repository&gt;.git\ngit push\n                      Adapted from the work of Violet Sherratt (Met Office)."
  },
  {
    "objectID": "profiles/learner-profiles.html",
    "href": "profiles/learner-profiles.html",
    "title": "Version Control with Git",
    "section": "",
    "text": "Skip to main content\n          \n            \n              \n                \n                                              \n            \n            \n              \n                \n                  \n                    \n                      \n                    \n                    \n                  \n                  \n                    \n                      \n                        \n                          \n                        \n                        Light\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Dark\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Auto\n                        \n                          \n                        \n                      \n                    \n                  \n                \n              \n              \n              \n                        \n                   Instructor View \n                \n                \n                  Learner View"
  },
  {
    "objectID": "profiles/learner-profiles.html#why-use-profiles",
    "href": "profiles/learner-profiles.html#why-use-profiles",
    "title": "Version Control with Git",
    "section": "Why Use Profiles?",
    "text": "Why Use Profiles?\n                      Profiles are used to:\n                      \n                      promote empathy\n                      increase awareness and memorability of users\n                      prioritise features\n                      inform design decisions\n                      promote equality and diversity\n                      \n                      Profiles can be used to test whether the product or service meets the specific needs and expectations of key user groups."
  },
  {
    "objectID": "profiles/learner-profiles.html#profiles",
    "href": "profiles/learner-profiles.html#profiles",
    "title": "Version Control with Git",
    "section": "Profiles",
    "text": "Profiles\n                      Amina is a researcher collaborating with the office to develop Jules. She uses fcm and svn because she has to. When the JULES docs moved to Git/GitHub she tried to start learning Git/GitHub to contribute to the docs but was unsure where to start and what courses to take. Amina and her colleagues frequently use the JASMIN computer and want to know how the new ways of working with Git and GitHub will apply to their use of JASMIN.\n                      Joshua is a scientific software engineer working on LFRic in the CCD team. He uses fcm mainly and doesn’t really touch svn. Joshua is comfortable using GitHub as some of his projects are already on GitHub. He has questions about working practices after the big codes have migrated. When working on the GitHub hosted LFRic documentation he uses the version control features of his IDE, PyCharm.\n                      Carlton is a scientific software engineer in Ocean Forecasting R&D. He is already thinking about the migration and supporting colleagues learning Git basics. Carlton has a need for Git/GitHub documentation and training, he is considering making his own. Carlton has questions about working practices after the big codes have migrated. He wants more bite sized and modular training on advanced Git/GitHub topics which could be delivered together in a days session for his team.\n                      Mina is a scientist working on JEDI related projects. Her team has already migrated most of their code to Git/GitHub and is dual using fcm and Git whilst migrating their last few repositories. Mina is learning about more advanced features of Git/GitHub and exclusively uses the command line to interact with any JEDI Git repositories. She would prefer to learn from short videos that she can access anytime.\n                      Alexis is a Science Manager. They manage a large team and several projects with technical and scientific documentation currently spread between trac pages, SharePoint, and OneNote. Alexis needs to work out how documentation will be migrated and would like to learn how to use GitHub to effectively manage her projects and team. They have also requested dedicated support for their team to help them migrate.\n                      Cora is an apprentice studying climate policy and has little to no experience with programming / computer science. She will be running various climate workflows and codes as part of Alexis’ team. Cora doesn’t know what version control is and would like to take an in person course and to have the materials available online so she can refer back anytime. She has been picking up bits of fcm as she starts her apprenticeship.\n                      Clarabella is a new starter to the office in Technology. They only know how to use Git/GitHub but have had some very basic srs/fcm training. Clarabella needs to learn how we use GitHub at the Met Office and her manager suggested they find more advanced training on topics such as GitHub actions for their project. She’s proficient with Linux and has some experience with VSCode but not its version control features and extensions.\n                      Maxine is a scientist mainly working on climate policy. They use fcm once in a blue moon to contribute to small repos / scripts that they maintain. Maxine needs training on Git/GitHub but is very bust so has little time to engage with training or the migration project. She would like a demonstration or walkthrough of how to migrate her repositories and scripts, preferably from an expert and in-person.\n                      Ziki is a prolific developer of core Met Office codes. He has limited experience of Git/GitHub and needs to know how development processes will work when the code migrates to Git/GitHub. Ziki has very little CPD time that could be used for training due to other science commitments. Ziki is nervous about making mistakes due to his time constraints and would like to know where to look to troubleshoot problems.\n                      Raven is a scientist working on the UM at a MOAP partner organisation. They only learn via written documentation with clear examples. Raven is currently working on several grant proposals and papers so has limited time to engage with us. Raven needs the benefits of migration emphasised and clear written documentation/training on how to use Git/GitHub both in general and for the UM.\n                      Tatsuya is a PhD student working on a regional UM configuration. Their supervisor has asked them to get the UM model running on their HPC and doesn’t know where to start. They learnt Git/GitHub at university but are unsure what our working practices are and where to look for help. Tatsuya hates learning through videos and would like to attend hand on support sessions to supplement any written documentation.\n                      Carmine is a scientist working at a MOAP partner institution in Oceania and does her data analysis primarily with R on Windows. They want to learn how to use Git and GitHub effectively on Windows with RStudio. They have very little experience with SVN and trac and no experience with Git and GitHub. She would like to understand more about version control and why it is important. They aren’t comfortable asking questions in a public forum so would like a private support channel to ask questions.\n                      Ceri works part time in programmes on climate related work. They are familiar with FCM and trac, having done some development of rose suites previously, but have only limited experience of Git and are not confident yet. They work fully remotely from Llanelli so require remote, direct instruction, during their work hours. They would also like a cheat sheet for Git/GitHub and clear step-by-step instructions on migration and new working practices with examples."
  }
]